module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq_ext.SeqExt
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val pop [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : Type.core_option_option t
    ensures { match (result) with
      | Type.Core_Option_Option_Some t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) && Model0.model ( * self) = Seq.snoc (Model0.model ( ^ self)) t
      | Type.Core_Option_Option_None ->  * self =  ^ self && Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module Alloc_Vec_Impl1_Pop
  type t
  type a
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq_ext.SeqExt
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val pop [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : Type.core_option_option t
    ensures { match (result) with
      | Type.Core_Option_Option_Some t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) && Model0.model ( * self) = Seq.snoc (Model0.model ( ^ self)) t
      | Type.Core_Option_Option_None ->  * self =  ^ self && Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Vec_Impl1
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module InvariantMoves_TestInvariantMove_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  val test_invariant_move [@cfg:stackify] (x : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)) : ()
end
module InvariantMoves_TestInvariantMove
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = uint32, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve1 with type t = uint32, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_Impl1_Pop_Interface as Pop0 with type t = uint32, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  let rec cfg test_invariant_move [@cfg:stackify] [#"../invariant_moves.rs" 5 0 5 43] (x : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)) : ()
    
   =
  var _0 : ();
  var x_1 : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global);
  var _3 : ();
  var _4 : Type.core_option_option uint32;
  var _5 : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global));
  var _6 : borrowed (Type.alloc_vec_vec uint32 (Type.alloc_alloc_global));
  var _7 : isize;
  var _8 : ();
  var _9 : ();
  var _10 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant dummy { [#"../invariant_moves.rs" 6 23 6 29] x_1 = x_1 };
    _6 <- borrow_mut x_1;
    x_1 <-  ^ _6;
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    _4 <- ([#"../invariant_moves.rs" 7 26 7 40] Pop0.pop _5);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _6 };
    switch (_4)
      | Type.Core_Option_Option_Some _ -> goto BB4
      | _ -> goto BB5
      end
  }
  BB4 {
    _3 <- ();
    goto BB2
  }
  BB5 {
    _0 <- ();
    goto BB6
  }
  BB6 {
    assume { Resolve1.resolve x_1 };
    return _0
  }
  
end
