module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module SumOfOdds_Sqr_Interface
  use mach.int.Int
  function sqr (x : int) : int
end
module SumOfOdds_Sqr
  use mach.int.Int
  function sqr [#"../sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [#"../sum_of_odds.rs" 8 4 8 9] x * x
end
module SumOfOdds_IsSquare_Interface
  use mach.int.Int
  predicate is_square (y : int)
end
module SumOfOdds_IsSquare
  use mach.int.Int
  clone SumOfOdds_Sqr_Interface as Sqr0
  predicate is_square [#"../sum_of_odds.rs" 12 0 12 28] (y : int) =
    [#"../sum_of_odds.rs" 13 4 13 44] exists z : (int) . y = Sqr0.sqr z
end
module SumOfOdds_SumOfOdd_Interface
  use mach.int.Int
  function sum_of_odd (x : int) : int
end
module SumOfOdds_SumOfOdd
  use mach.int.Int
  use mach.int.Int32
  function sum_of_odd [#"../sum_of_odds.rs" 18 0 18 28] (x : int) : int
  axiom def : forall x : int . sum_of_odd x = ([#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then
    0
  else
    sum_of_odd (x - 1) + 2 * x - 1
  )
  axiom sum_of_odd_spec : forall x : int . true
end
module SumOfOdds_SumOfOdd_Impl
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function sum_of_odd (x : int) : int
    variant {[#"../sum_of_odds.rs" 17 10 17 11] x}
    
   =
    [#"../sum_of_odds.rs" 16 0 16 8] if x <= 0 then 0 else sum_of_odd (x - 1) + 2 * x - 1
end
module SumOfOdds_SumOfOddIsSqr_Interface
  use mach.int.Int
  use mach.int.Int32
  clone SumOfOdds_Sqr_Interface as Sqr0
  clone SumOfOdds_SumOfOdd_Interface as SumOfOdd0 with axiom .
  function sum_of_odd_is_sqr (x : int) : ()
end
module SumOfOdds_SumOfOddIsSqr
  use mach.int.Int
  use mach.int.Int32
  clone SumOfOdds_Sqr_Interface as Sqr0
  clone SumOfOdds_SumOfOdd_Interface as SumOfOdd0 with axiom .
  function sum_of_odd_is_sqr [#"../sum_of_odds.rs" 30 0 30 28] (x : int) : ()
  axiom def : forall x : int . sum_of_odd_is_sqr x = ([#"../sum_of_odds.rs" 31 4 31 65] if x > 0 then
    sum_of_odd_is_sqr (x - 1)
  else
    ()
  )
  axiom sum_of_odd_is_sqr_spec : forall x : int . ([#"../sum_of_odds.rs" 27 11 27 17] x >= 0) -> ([#"../sum_of_odds.rs" 28 10 28 33] SumOfOdd0.sum_of_odd x = Sqr0.sqr x)
end
module SumOfOdds_SumOfOddIsSqr_Impl
  use mach.int.Int
  use mach.int.Int32
  clone SumOfOdds_Sqr as Sqr0
  clone SumOfOdds_SumOfOdd as SumOfOdd0 with axiom .
  let rec ghost function sum_of_odd_is_sqr (x : int) : ()
    requires {[#"../sum_of_odds.rs" 27 11 27 17] x >= 0}
    ensures { [#"../sum_of_odds.rs" 28 10 28 33] SumOfOdd0.sum_of_odd x = Sqr0.sqr x }
    variant {[#"../sum_of_odds.rs" 29 10 29 11] x}
    
   =
    [#"../sum_of_odds.rs" 31 4 31 65] if x > 0 then sum_of_odd_is_sqr (x - 1) else ()
end
module SumOfOdds_ComputeSumOfOdd_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  clone SumOfOdds_SumOfOdd_Interface as SumOfOdd0 with axiom .
  val compute_sum_of_odd [@cfg:stackify] (x : uint32) : uint32
    requires {[#"../sum_of_odds.rs" 34 11 34 23] UInt32.to_int x < 65536}
    ensures { [#"../sum_of_odds.rs" 35 10 35 35] UInt32.to_int result = SumOfOdd0.sum_of_odd (UInt32.to_int x) }
    
end
module SumOfOdds_ComputeSumOfOdd
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  clone SumOfOdds_Sqr as Sqr0
  clone SumOfOdds_SumOfOdd as SumOfOdd0 with axiom .
  clone SumOfOdds_SumOfOddIsSqr as SumOfOddIsSqr0 with function SumOfOdd0.sum_of_odd = SumOfOdd0.sum_of_odd,
  function Sqr0.sqr = Sqr0.sqr, axiom .
  let rec cfg compute_sum_of_odd [@cfg:stackify] [#"../sum_of_odds.rs" 36 0 36 36] (x : uint32) : uint32
    requires {[#"../sum_of_odds.rs" 34 11 34 23] UInt32.to_int x < 65536}
    ensures { [#"../sum_of_odds.rs" 35 10 35 35] UInt32.to_int result = SumOfOdd0.sum_of_odd (UInt32.to_int x) }
    
   =
  var _0 : uint32;
  var x_1 : uint32;
  var _2 : ();
  var s_5 : uint32;
  var i_6 : uint32;
  var _7 : ();
  var _10 : ();
  var _11 : bool;
  var _12 : uint32;
  var _13 : uint32;
  var _14 : ();
  var _16 : uint32;
  var _17 : uint32;
  var _18 : uint32;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    s_5 <- (0 : uint32);
    i_6 <- (0 : uint32);
    goto BB1
  }
  BB1 {
    invariant i_bound { [#"../sum_of_odds.rs" 39 25 39 33] UInt32.to_int i_6 <= UInt32.to_int x_1 };
    invariant s_is_sum { [#"../sum_of_odds.rs" 40 26 40 46] UInt32.to_int s_5 = SumOfOdd0.sum_of_odd (UInt32.to_int i_6) };
    _12 <- i_6;
    _13 <- x_1;
    _11 <- ([#"../sum_of_odds.rs" 41 10 41 15] _12 < _13);
    switch (_11)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    assert { [#"../sum_of_odds.rs" 43 12 43 33] let _ = SumOfOddIsSqr0.sum_of_odd_is_sqr (UInt32.to_int i_6) in true };
    _14 <- ();
    _18 <- i_6;
    _17 <- ([#"../sum_of_odds.rs" 46 13 46 18] (2 : uint32) * _18);
    _16 <- ([#"../sum_of_odds.rs" 46 13 46 22] _17 + (1 : uint32));
    s_5 <- ([#"../sum_of_odds.rs" 46 8 46 22] s_5 + _16);
    i_6 <- ([#"../sum_of_odds.rs" 47 8 47 14] i_6 + (1 : uint32));
    _10 <- ();
    goto BB1
  }
  BB3 {
    _7 <- ();
    _0 <- s_5;
    return _0
  }
  
end
module SumOfOdds_Test_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  val test [@cfg:stackify] (x : uint32) : ()
    requires {[#"../sum_of_odds.rs" 52 11 52 23] UInt32.to_int x < 65536}
    
end
module SumOfOdds_Test
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  clone SumOfOdds_Sqr as Sqr0
  clone SumOfOdds_IsSquare as IsSquare0 with function Sqr0.sqr = Sqr0.sqr
  clone SumOfOdds_SumOfOdd as SumOfOdd0 with axiom .
  clone SumOfOdds_SumOfOddIsSqr as SumOfOddIsSqr0 with function SumOfOdd0.sum_of_odd = SumOfOdd0.sum_of_odd,
  function Sqr0.sqr = Sqr0.sqr, axiom .
  clone SumOfOdds_ComputeSumOfOdd_Interface as ComputeSumOfOdd0 with function SumOfOdd0.sum_of_odd = SumOfOdd0.sum_of_odd
  let rec cfg test [@cfg:stackify] [#"../sum_of_odds.rs" 53 0 53 19] (x : uint32) : ()
    requires {[#"../sum_of_odds.rs" 52 11 52 23] UInt32.to_int x < 65536}
    
   =
  var _0 : ();
  var x_1 : uint32;
  var y_3 : uint32;
  var _4 : uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _4 <- x_1;
    y_3 <- ([#"../sum_of_odds.rs" 54 12 54 33] ComputeSumOfOdd0.compute_sum_of_odd _4);
    goto BB1
  }
  BB1 {
    assert { [#"../sum_of_odds.rs" 56 8 56 29] let _ = SumOfOddIsSqr0.sum_of_odd_is_sqr (UInt32.to_int x_1) in IsSquare0.is_square (UInt32.to_int y_3) };
    _0 <- ();
    return _0
  }
  
end
