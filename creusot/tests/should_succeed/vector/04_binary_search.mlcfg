module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_result_result 't 'e =
    | Core_Result_Result_Ok 't
    | Core_Result_Result_Err 'e
    
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module C04BinarySearch_SortedRange_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  predicate sorted_range (s : Seq.seq uint32) (l : int) (u : int)
end
module C04BinarySearch_SortedRange
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  predicate sorted_range [#"../04_binary_search.rs" 5 0 5 52] (s : Seq.seq uint32) (l : int) (u : int) =
    [#"../04_binary_search.rs" 6 4 8 5] forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> Seq.get s i <= Seq.get s j
end
module C04BinarySearch_Sorted_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  predicate sorted (s : Seq.seq uint32)
end
module C04BinarySearch_Sorted
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  clone C04BinarySearch_SortedRange_Interface as SortedRange0
  predicate sorted [#"../04_binary_search.rs" 12 0 12 30] (s : Seq.seq uint32) =
    [#"../04_binary_search.rs" 13 4 13 31] SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module C04BinarySearch_BinarySearch_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  use mach.int.UInt32
  clone C04BinarySearch_Sorted_Interface as Sorted0
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint32, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec uint32 (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val binary_search [@cfg:stackify] (arr : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)) (elem : uint32) : Type.core_result_result usize usize
    requires {[#"../04_binary_search.rs" 16 11 16 38] Seq.length (Model0.model arr) <= 18446744073709551615}
    requires {[#"../04_binary_search.rs" 17 11 17 23] Sorted0.sorted (Model0.model arr)}
    ensures { [#"../04_binary_search.rs" 18 0 18 66] forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Seq.get (Model0.model arr) (UInt64.to_int x) = elem }
    ensures { [#"../04_binary_search.rs" 19 0 20 51] forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . i < x -> Seq.get (Model0.model arr) (UInt64.to_int i) <= elem) }
    ensures { [#"../04_binary_search.rs" 21 0 22 70] forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . x < i && UInt64.to_int i < Seq.length (Model0.model arr) -> elem < Seq.get (Model0.model arr) (UInt64.to_int i)) }
    
end
module C04BinarySearch_BinarySearch
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  use mach.int.UInt32
  use mach.int.Int32
  clone C04BinarySearch_SortedRange as SortedRange0
  clone C04BinarySearch_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = uint32, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = uint32, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec uint32 (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = uint32
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = uint32
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = uint32
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = uint32
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = uint32, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = uint32, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  let rec cfg binary_search [@cfg:stackify] [#"../04_binary_search.rs" 23 0 23 71] (arr : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global)) (elem : uint32) : Type.core_result_result usize usize
    requires {[#"../04_binary_search.rs" 16 11 16 38] Seq.length (Model0.model arr) <= 18446744073709551615}
    requires {[#"../04_binary_search.rs" 17 11 17 23] Sorted0.sorted (Model0.model arr)}
    ensures { [#"../04_binary_search.rs" 18 0 18 66] forall x : (usize) . result = Type.Core_Result_Result_Ok x -> Seq.get (Model0.model arr) (UInt64.to_int x) = elem }
    ensures { [#"../04_binary_search.rs" 19 0 20 51] forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . i < x -> Seq.get (Model0.model arr) (UInt64.to_int i) <= elem) }
    ensures { [#"../04_binary_search.rs" 21 0 22 70] forall x : (usize) . result = Type.Core_Result_Result_Err x -> (forall i : (usize) . x < i && UInt64.to_int i < Seq.length (Model0.model arr) -> elem < Seq.get (Model0.model arr) (UInt64.to_int i)) }
    
   =
  var _0 : Type.core_result_result usize usize;
  var arr_1 : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global);
  var elem_2 : uint32;
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global);
  var _12 : ();
  var size_13 : usize;
  var _14 : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global);
  var base_15 : usize;
  var _16 : ();
  var _20 : ();
  var _21 : bool;
  var _22 : usize;
  var half_23 : usize;
  var _24 : usize;
  var _25 : bool;
  var mid_26 : usize;
  var _27 : usize;
  var _28 : usize;
  var _29 : usize;
  var _30 : bool;
  var _31 : uint32;
  var _32 : uint32;
  var _33 : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global);
  var _34 : usize;
  var _35 : uint32;
  var _36 : usize;
  var _37 : ();
  var _38 : ();
  var _39 : ();
  var cmp_40 : uint32;
  var _41 : uint32;
  var _42 : Type.alloc_vec_vec uint32 (Type.alloc_alloc_global);
  var _43 : usize;
  var _44 : bool;
  var _45 : uint32;
  var _46 : uint32;
  var _47 : usize;
  var _48 : bool;
  var _49 : uint32;
  var _50 : uint32;
  var _51 : usize;
  var _52 : usize;
  var _53 : usize;
  {
    arr_1 <- arr;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    _11 <- arr_1;
    _10 <- ([#"../04_binary_search.rs" 24 7 24 16] Len0.len _11);
    goto BB1
  }
  BB1 {
    _9 <- ([#"../04_binary_search.rs" 24 7 24 21] _10 = (0 : usize));
    switch (_9)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- Type.Core_Result_Result_Err (0 : usize);
    goto BB20
  }
  BB3 {
    _8 <- ();
    _14 <- arr_1;
    size_13 <- ([#"../04_binary_search.rs" 27 19 27 28] Len0.len _14);
    goto BB4
  }
  BB4 {
    base_15 <- (0 : usize);
    goto BB5
  }
  BB5 {
    invariant size_valid { [#"../04_binary_search.rs" 30 28 30 70] 0 < UInt64.to_int size_13 && UInt64.to_int size_13 + UInt64.to_int base_15 <= Seq.length (Model0.model arr_1) };
    invariant lower_b { [#"../04_binary_search.rs" 30 4 30 72] forall i : (usize) . i < base_15 -> Seq.get (Model0.model arr_1) (UInt64.to_int i) <= elem_2 };
    invariant lower_b { [#"../04_binary_search.rs" 30 4 30 72] forall i : (usize) . UInt64.to_int base_15 + UInt64.to_int size_13 < UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model arr_1) -> elem_2 < Seq.get (Model0.model arr_1) (UInt64.to_int i) };
    _22 <- size_13;
    _21 <- ([#"../04_binary_search.rs" 33 10 33 18] _22 > (1 : usize));
    switch (_21)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    _24 <- size_13;
    _25 <- ([#"../04_binary_search.rs" 34 19 34 27] (2 : usize) = (0 : usize));
    assert { not _25 };
    goto BB7
  }
  BB7 {
    half_23 <- ([#"../04_binary_search.rs" 34 19 34 27] _24 / (2 : usize));
    _27 <- base_15;
    _28 <- half_23;
    mid_26 <- ([#"../04_binary_search.rs" 35 18 35 29] _27 + _28);
    _33 <- arr_1;
    _34 <- mid_26;
    _32 <- ([#"../04_binary_search.rs" 37 18 37 26] Index0.index _33 _34);
    goto BB8
  }
  BB8 {
    _31 <- _32;
    _35 <- elem_2;
    _30 <- ([#"../04_binary_search.rs" 37 18 37 33] _31 > _35);
    switch (_30)
      | False -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    _29 <- base_15;
    goto BB11
  }
  BB10 {
    _29 <- mid_26;
    goto BB11
  }
  BB11 {
    base_15 <- _29;
    _36 <- half_23;
    size_13 <- ([#"../04_binary_search.rs" 38 8 38 20] size_13 - _36);
    _20 <- ();
    goto BB5
  }
  BB12 {
    _16 <- ();
    _42 <- arr_1;
    _43 <- base_15;
    _41 <- ([#"../04_binary_search.rs" 41 14 41 23] Index0.index _42 _43);
    goto BB13
  }
  BB13 {
    cmp_40 <- _41;
    _45 <- cmp_40;
    _46 <- elem_2;
    _44 <- ([#"../04_binary_search.rs" 42 7 42 18] _45 = _46);
    switch (_44)
      | False -> goto BB15
      | _ -> goto BB14
      end
  }
  BB14 {
    _47 <- base_15;
    _0 <- Type.Core_Result_Result_Ok _47;
    goto BB19
  }
  BB15 {
    _49 <- cmp_40;
    _50 <- elem_2;
    _48 <- ([#"../04_binary_search.rs" 44 14 44 24] _49 < _50);
    switch (_48)
      | False -> goto BB17
      | _ -> goto BB16
      end
  }
  BB16 {
    _52 <- base_15;
    _51 <- ([#"../04_binary_search.rs" 45 12 45 20] _52 + (1 : usize));
    _0 <- Type.Core_Result_Result_Err _51;
    goto BB18
  }
  BB17 {
    _53 <- base_15;
    _0 <- Type.Core_Result_Result_Err _53;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
