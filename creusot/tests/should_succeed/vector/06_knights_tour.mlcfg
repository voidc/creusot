module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type c06knightstour_point  =
    | C06KnightsTour_Point isize isize
    
  let function c06knightstour_point_Point_x (self : c06knightstour_point) : isize =
    match (self) with
      | C06KnightsTour_Point a _ -> a
      end
  let function c06knightstour_point_Point_y (self : c06knightstour_point) : isize =
    match (self) with
      | C06KnightsTour_Point _ a -> a
      end
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type c06knightstour_board  =
    | C06KnightsTour_Board usize (alloc_vec_vec (alloc_vec_vec usize (alloc_alloc_global)) (alloc_alloc_global))
    
  let function c06knightstour_board_Board_size (self : c06knightstour_board) : usize =
    match (self) with
      | C06KnightsTour_Board a _ -> a
      end
  let function c06knightstour_board_Board_field (self : c06knightstour_board) : alloc_vec_vec (alloc_vec_vec usize (alloc_alloc_global)) (alloc_alloc_global)
    
   =
    match (self) with
      | C06KnightsTour_Board _ a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
end
module C06KnightsTour_Impl3_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.c06knightstour_point) : Type.c06knightstour_point
end
module C06KnightsTour_Impl3_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] [#"../06_knights_tour.rs" 5 15 5 20] (self : Type.c06knightstour_point) : Type.c06knightstour_point
    
   =
  var _0 : Type.c06knightstour_point;
  var self_1 : Type.c06knightstour_point;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module C06KnightsTour_Impl0_Mov_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use prelude.Prelude
  use Type
  val mov [@cfg:stackify] (self : Type.c06knightstour_point) (p : (isize, isize)) : Type.c06knightstour_point
    requires {[#"../06_knights_tour.rs" 13 15 13 56] - 10000 <= Int64.to_int (Type.c06knightstour_point_Point_x self) && Int64.to_int (Type.c06knightstour_point_Point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 56] - 10000 <= Int64.to_int (Type.c06knightstour_point_Point_y self) && Int64.to_int (Type.c06knightstour_point_Point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 50] - 10000 <= Int64.to_int (let (a, _) = p in a) && Int64.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 16 15 16 50] - 10000 <= Int64.to_int (let (_, a) = p in a) && Int64.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 17 14 17 47] Int64.to_int (Type.c06knightstour_point_Point_x result) = Int64.to_int (Type.c06knightstour_point_Point_x self) + Int64.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 18 14 18 47] Int64.to_int (Type.c06knightstour_point_Point_y result) = Int64.to_int (Type.c06knightstour_point_Point_y self) + Int64.to_int (let (_, a) = p in a) }
    
end
module C06KnightsTour_Impl0_Mov
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use prelude.Prelude
  use Type
  let rec cfg mov [@cfg:stackify] [#"../06_knights_tour.rs" 19 4 19 45] (self : Type.c06knightstour_point) (p : (isize, isize)) : Type.c06knightstour_point
    requires {[#"../06_knights_tour.rs" 13 15 13 56] - 10000 <= Int64.to_int (Type.c06knightstour_point_Point_x self) && Int64.to_int (Type.c06knightstour_point_Point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 56] - 10000 <= Int64.to_int (Type.c06knightstour_point_Point_y self) && Int64.to_int (Type.c06knightstour_point_Point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 50] - 10000 <= Int64.to_int (let (a, _) = p in a) && Int64.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 16 15 16 50] - 10000 <= Int64.to_int (let (_, a) = p in a) && Int64.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 17 14 17 47] Int64.to_int (Type.c06knightstour_point_Point_x result) = Int64.to_int (Type.c06knightstour_point_Point_x self) + Int64.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 18 14 18 47] Int64.to_int (Type.c06knightstour_point_Point_y result) = Int64.to_int (Type.c06knightstour_point_Point_y self) + Int64.to_int (let (_, a) = p in a) }
    
   =
  var _0 : Type.c06knightstour_point;
  var self_1 : Type.c06knightstour_point;
  var p_2 : (isize, isize);
  var _9 : isize;
  var _10 : isize;
  var _11 : isize;
  var _12 : isize;
  var _13 : isize;
  var _14 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    _10 <- Type.c06knightstour_point_Point_x self_1;
    _11 <- (let (a, _) = p_2 in a);
    _9 <- ([#"../06_knights_tour.rs" 20 18 20 32] _10 + _11);
    _13 <- Type.c06knightstour_point_Point_y self_1;
    _14 <- (let (_, a) = p_2 in a);
    _12 <- ([#"../06_knights_tour.rs" 20 37 20 51] _13 + _14);
    _0 <- Type.C06KnightsTour_Point _9 _12;
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module C06KnightsTour_Impl1_Wf_Interface
  use Type
  predicate wf (self : Type.c06knightstour_board)
end
module C06KnightsTour_Impl1_Wf
  use Type
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  predicate wf [#"../06_knights_tour.rs" 31 4 31 23] (self : Type.c06knightstour_board) =
    [#"../06_knights_tour.rs" 32 8 36 9] UInt64.to_int (Type.c06knightstour_board_Board_size self) <= 1000 && Seq.length (Model0.model (Type.c06knightstour_board_Board_field self)) = UInt64.to_int (Type.c06knightstour_board_Board_size self) && (forall i : (int) . 0 <= i && i < UInt64.to_int (Type.c06knightstour_board_Board_size self) -> Seq.length (Model1.model (Seq.get (Model0.model (Type.c06knightstour_board_Board_field self)) i)) = UInt64.to_int (Type.c06knightstour_board_Board_size self))
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module Alloc_Vec_Impl0_WithCapacity_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_WithCapacity
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module C06KnightsTour_Impl1_New_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val new [@cfg:stackify] (size : usize) : Type.c06knightstour_board
    requires {[#"../06_knights_tour.rs" 38 15 38 28] UInt64.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 39 14 39 33] Type.c06knightstour_board_Board_size result = size }
    ensures { [#"../06_knights_tour.rs" 40 14 40 25] Wf0.wf result }
    
end
module C06KnightsTour_Impl1_New
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve1 with type t = usize, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  clone Alloc_Vec_Impl0_WithCapacity_Interface as WithCapacity0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] [#"../06_knights_tour.rs" 41 4 41 31] (size : usize) : Type.c06knightstour_board
    requires {[#"../06_knights_tour.rs" 38 15 38 28] UInt64.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 39 14 39 33] Type.c06knightstour_board_Board_size result = size }
    ensures { [#"../06_knights_tour.rs" 40 14 40 25] Wf0.wf result }
    
   =
  var _0 : Type.c06knightstour_board;
  var size_1 : usize;
  var rows_5 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _6 : usize;
  var i_7 : usize;
  var _8 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var _15 : usize;
  var _16 : ();
  var _17 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _18 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _19 : usize;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : usize;
  var _24 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _6 <- size_1;
    rows_5 <- ([#"../06_knights_tour.rs" 42 36 42 60] WithCapacity0.with_capacity _6);
    goto BB1
  }
  BB1 {
    i_7 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant i_size { [#"../06_knights_tour.rs" 45 28 45 37] i_7 <= size_1 };
    invariant rows { [#"../06_knights_tour.rs" 45 8 45 39] forall j : (int) . 0 <= j && j < UInt64.to_int i_7 -> Seq.length (Model1.model (Seq.get (Model0.model rows_5) j)) = UInt64.to_int size_1 };
    invariant row_len { [#"../06_knights_tour.rs" 48 29 48 48] Seq.length (Model0.model rows_5) = UInt64.to_int i_7 };
    _14 <- i_7;
    _15 <- size_1;
    _13 <- ([#"../06_knights_tour.rs" 49 14 49 22] _14 < _15);
    switch (_13)
      | False -> goto BB8
      | _ -> goto BB5
      end
  }
  BB5 {
    _17 <- borrow_mut rows_5;
    rows_5 <-  ^ _17;
    _19 <- size_1;
    _18 <- ([#"../06_knights_tour.rs" 50 22 50 45] FromElem0.from_elem (0 : usize) _19);
    goto BB6
  }
  BB6 {
    _16 <- ([#"../06_knights_tour.rs" 50 12 50 46] Push0.push _17 _18);
    goto BB7
  }
  BB7 {
    i_7 <- ([#"../06_knights_tour.rs" 51 12 51 18] i_7 + (1 : usize));
    _12 <- ();
    goto BB4
  }
  BB8 {
    _8 <- ();
    _23 <- size_1;
    assume { Resolve0.resolve _24 };
    _24 <- rows_5;
    _0 <- Type.C06KnightsTour_Board _23 _24;
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module C06KnightsTour_Impl1_InBounds_Interface
  use Type
  predicate in_bounds (self : Type.c06knightstour_board) (p : Type.c06knightstour_point)
end
module C06KnightsTour_Impl1_InBounds
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt64
  predicate in_bounds [#"../06_knights_tour.rs" 68 4 68 40] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point)
    
   =
    [#"../06_knights_tour.rs" 70 12 70 87] 0 <= Int64.to_int (Type.c06knightstour_point_Point_x p) && Int64.to_int (Type.c06knightstour_point_Point_x p) < UInt64.to_int (Type.c06knightstour_board_Board_size self) && 0 <= Int64.to_int (Type.c06knightstour_point_Point_y p) && Int64.to_int (Type.c06knightstour_point_Point_y p) < UInt64.to_int (Type.c06knightstour_board_Board_size self)
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module C06KnightsTour_Impl1_Available_Interface
  use prelude.Prelude
  use Type
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val available [@cfg:stackify] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point) : bool
    requires {[#"../06_knights_tour.rs" 57 15 57 24] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 58 4 58 44] result -> InBounds0.in_bounds self p }
    
end
module C06KnightsTour_Impl1_Available
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg available [@cfg:stackify] [#"../06_knights_tour.rs" 59 4 59 41] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point) : bool
    requires {[#"../06_knights_tour.rs" 57 15 57 24] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 58 4 58 44] result -> InBounds0.in_bounds self p }
    
   =
  var _0 : bool;
  var self_1 : Type.c06knightstour_board;
  var p_2 : Type.c06knightstour_point;
  var _5 : bool;
  var _6 : bool;
  var _7 : bool;
  var _8 : bool;
  var _9 : isize;
  var _10 : bool;
  var _11 : usize;
  var _12 : isize;
  var _13 : usize;
  var _14 : bool;
  var _15 : isize;
  var _16 : bool;
  var _17 : usize;
  var _18 : isize;
  var _19 : usize;
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _24 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _25 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _26 : usize;
  var _27 : isize;
  var _28 : usize;
  var _29 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    _9 <- Type.c06knightstour_point_Point_x p_2;
    _8 <- ([#"../06_knights_tour.rs" 60 8 60 16] (0 : isize) <= _9);
    switch (_8)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB1 {
    _0 <- false;
    goto BB3
  }
  BB2 {
    _25 <- Type.c06knightstour_board_Board_field self_1;
    _27 <- Type.c06knightstour_point_Point_x p_2;
    _26 <- UInt64.of_int (Int64.to_int _27);
    _24 <- ([#"../06_knights_tour.rs" 64 15 64 39] Index0.index _25 _26);
    goto BB13
  }
  BB3 {
    return _0
  }
  BB4 {
    _5 <- false;
    goto BB6
  }
  BB5 {
    _18 <- Type.c06knightstour_point_Point_y p_2;
    _17 <- UInt64.of_int (Int64.to_int _18);
    _19 <- Type.c06knightstour_board_Board_size self_1;
    _16 <- ([#"../06_knights_tour.rs" 63 15 63 41] _17 < _19);
    _5 <- _16;
    goto BB6
  }
  BB6 {
    switch (_5)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB7 {
    _6 <- false;
    goto BB9
  }
  BB8 {
    _15 <- Type.c06knightstour_point_Point_y p_2;
    _14 <- ([#"../06_knights_tour.rs" 62 15 62 23] (0 : isize) <= _15);
    _6 <- _14;
    goto BB9
  }
  BB9 {
    switch (_6)
      | False -> goto BB4
      | _ -> goto BB5
      end
  }
  BB10 {
    _7 <- false;
    goto BB12
  }
  BB11 {
    _12 <- Type.c06knightstour_point_Point_x p_2;
    _11 <- UInt64.of_int (Int64.to_int _12);
    _13 <- Type.c06knightstour_board_Board_size self_1;
    _10 <- ([#"../06_knights_tour.rs" 61 15 61 41] _11 < _13);
    _7 <- _10;
    goto BB12
  }
  BB12 {
    switch (_7)
      | False -> goto BB7
      | _ -> goto BB8
      end
  }
  BB13 {
    _23 <- _24;
    _29 <- Type.c06knightstour_point_Point_y p_2;
    _28 <- UInt64.of_int (Int64.to_int _29);
    _22 <- ([#"../06_knights_tour.rs" 64 15 64 53] Index1.index _23 _28);
    goto BB14
  }
  BB14 {
    _21 <- _22;
    _20 <- ([#"../06_knights_tour.rs" 64 15 64 58] _21 = (0 : usize));
    _0 <- _20;
    goto BB3
  }
  
end
module C06KnightsTour_Moves_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (isize, isize),
  type a = Type.alloc_alloc_global, axiom .
  val moves [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global)
    ensures { [#"../06_knights_tour.rs" 102 10 102 30] Seq.length (Model0.model result) = 8 }
    ensures { [#"../06_knights_tour.rs" 103 0 103 149] forall i : (int) . 0 <= i && i < 8 -> - 2 <= Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) && Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) <= 2 && - 2 <= Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) && Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) <= 2 }
    
end
module C06KnightsTour_Moves
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  axiom .
  val moves [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global)
    ensures { [#"../06_knights_tour.rs" 102 10 102 30] Seq.length (Model0.model result) = 8 }
    ensures { [#"../06_knights_tour.rs" 103 0 103 149] forall i : (int) . 0 <= i && i < 8 -> - 2 <= Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) && Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) <= 2 && - 2 <= Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) && Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) <= 2 }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module C06KnightsTour_Impl1_CountDegree_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val count_degree [@cfg:stackify] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point) : usize
    requires {[#"../06_knights_tour.rs" 75 15 75 24] Wf0.wf self}
    requires {[#"../06_knights_tour.rs" 76 15 76 32] InBounds0.in_bounds self p}
    
end
module C06KnightsTour_Impl1_CountDegree
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = isize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve1 with type t1 = isize, type t2 = isize,
  predicate Resolve0.resolve = Resolve2.resolve, predicate Resolve1.resolve = Resolve2.resolve
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = (isize, isize)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = (isize, isize)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  axiom .
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (isize, isize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = (isize, isize),
  function Model0.model = Model2.model, predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model
  clone C06KnightsTour_Moves_Interface as Moves0 with function Model0.model = Model2.model
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  let rec cfg count_degree [@cfg:stackify] [#"../06_knights_tour.rs" 77 4 77 45] (self : Type.c06knightstour_board) (p : Type.c06knightstour_point) : usize
    requires {[#"../06_knights_tour.rs" 75 15 75 24] Wf0.wf self}
    requires {[#"../06_knights_tour.rs" 76 15 76 32] InBounds0.in_bounds self p}
    
   =
  var _0 : usize;
  var self_1 : Type.c06knightstour_board;
  var p_2 : Type.c06knightstour_point;
  var count_5 : usize;
  var i_6 : usize;
  var _7 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : usize;
  var _13 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _14 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var next_15 : Type.c06knightstour_point;
  var _16 : Type.c06knightstour_point;
  var _17 : (isize, isize);
  var _18 : (isize, isize);
  var _19 : (isize, isize);
  var _20 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _21 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _22 : usize;
  var _23 : ();
  var _24 : bool;
  var _25 : Type.c06knightstour_board;
  var _26 : Type.c06knightstour_point;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    count_5 <- (0 : usize);
    i_6 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant count { [#"../06_knights_tour.rs" 81 27 81 37] count_5 <= i_6 };
    _11 <- i_6;
    _14 <- ([#"../06_knights_tour.rs" 82 18 82 25] Moves0.moves ());
    goto BB2
  }
  BB2 {
    _13 <- _14;
    _12 <- ([#"../06_knights_tour.rs" 82 18 82 31] Len0.len _13);
    goto BB3
  }
  BB3 {
    _10 <- ([#"../06_knights_tour.rs" 82 14 82 31] _11 < _12);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _14 };
    switch (_10)
      | False -> goto BB14
      | _ -> goto BB5
      end
  }
  BB5 {
    _16 <- p_2;
    _21 <- ([#"../06_knights_tour.rs" 83 30 83 37] Moves0.moves ());
    goto BB6
  }
  BB6 {
    _20 <- _21;
    _22 <- i_6;
    _19 <- ([#"../06_knights_tour.rs" 83 30 83 40] Index0.index _20 _22);
    goto BB7
  }
  BB7 {
    _18 <- _19;
    _17 <- _18;
    next_15 <- ([#"../06_knights_tour.rs" 83 23 83 41] Mov0.mov _16 _17);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve _21 };
    _25 <- self_1;
    _26 <- next_15;
    _24 <- ([#"../06_knights_tour.rs" 84 15 84 35] Available0.available _25 _26);
    goto BB10
  }
  BB10 {
    switch (_24)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    count_5 <- ([#"../06_knights_tour.rs" 85 16 85 26] count_5 + (1 : usize));
    _23 <- ();
    goto BB13
  }
  BB12 {
    _23 <- ();
    goto BB13
  }
  BB13 {
    i_6 <- ([#"../06_knights_tour.rs" 87 12 87 18] i_6 + (1 : usize));
    _9 <- ();
    goto BB1
  }
  BB14 {
    _7 <- ();
    _0 <- count_5;
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module C06KnightsTour_Impl1_Set_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val set [@cfg:stackify] (self : borrowed (Type.c06knightstour_board)) (p : Type.c06knightstour_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 92 15 92 24] Wf0.wf ( * self)}
    requires {[#"../06_knights_tour.rs" 93 15 93 32] InBounds0.in_bounds ( * self) p}
    ensures { [#"../06_knights_tour.rs" 94 14 94 26] Wf0.wf ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 95 14 95 42] Type.c06knightstour_board_Board_size ( ^ self) = Type.c06knightstour_board_Board_size ( * self) }
    
end
module C06KnightsTour_Impl1_Set
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c06knightstour_board
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere, type Output0.output = Output1.output
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  let rec cfg set [@cfg:stackify] [#"../06_knights_tour.rs" 96 4 96 41] (self : borrowed (Type.c06knightstour_board)) (p : Type.c06knightstour_point) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 92 15 92 24] Wf0.wf ( * self)}
    requires {[#"../06_knights_tour.rs" 93 15 93 32] InBounds0.in_bounds ( * self) p}
    ensures { [#"../06_knights_tour.rs" 94 14 94 26] Wf0.wf ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 95 14 95 42] Type.c06knightstour_board_Board_size ( ^ self) = Type.c06knightstour_board_Board_size ( * self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.c06knightstour_board);
  var p_2 : Type.c06knightstour_point;
  var v_3 : usize;
  var _8 : usize;
  var _9 : borrowed usize;
  var _10 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _11 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _12 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _13 : usize;
  var _14 : isize;
  var _15 : usize;
  var _16 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    _8 <- v_3;
    _12 <- borrow_mut (Type.c06knightstour_board_Board_field ( * self_1));
    self_1 <- { self_1 with current = (let Type.C06KnightsTour_Board a b =  * self_1 in Type.C06KnightsTour_Board a ( ^ _12)) };
    assume { Resolve0.resolve self_1 };
    _14 <- Type.c06knightstour_point_Point_x p_2;
    _13 <- UInt64.of_int (Int64.to_int _14);
    _11 <- ([#"../06_knights_tour.rs" 97 8 97 32] IndexMut0.index_mut _12 _13);
    goto BB1
  }
  BB1 {
    _10 <- borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ _10) };
    assume { Resolve1.resolve _11 };
    _16 <- Type.c06knightstour_point_Point_y p_2;
    _15 <- UInt64.of_int (Int64.to_int _16);
    _9 <- ([#"../06_knights_tour.rs" 97 8 97 46] IndexMut1.index_mut _10 _15);
    goto BB2
  }
  BB2 {
    _9 <- { _9 with current = _8 };
    assume { Resolve2.resolve _9 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module C06KnightsTour_Min_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  use Type
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val min [@cfg:stackify] (v : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global)) : Type.core_option_option (usize, Type.c06knightstour_point)
    ensures { [#"../06_knights_tour.rs" 118 0 119 67] forall r : ((usize, Type.c06knightstour_point)) . result = Type.Core_Option_Option_Some r -> (exists i : (int) . 0 <= i && i < Seq.length (Model0.model v) && Seq.get (Model0.model v) i = r) }
    
end
module C06KnightsTour_Min
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  use Type
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = (usize, Type.c06knightstour_point)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (usize, Type.c06knightstour_point)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (usize, Type.c06knightstour_point)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = (usize, Type.c06knightstour_point)
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (usize, Type.c06knightstour_point), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model
  let rec cfg min [@cfg:stackify] [#"../06_knights_tour.rs" 120 0 120 58] (v : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global)) : Type.core_option_option (usize, Type.c06knightstour_point)
    ensures { [#"../06_knights_tour.rs" 118 0 119 67] forall r : ((usize, Type.c06knightstour_point)) . result = Type.Core_Option_Option_Some r -> (exists i : (int) . 0 <= i && i < Seq.length (Model0.model v) && Seq.get (Model0.model v) i = r) }
    
   =
  var _0 : Type.core_option_option (usize, Type.c06knightstour_point);
  var v_1 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var i_3 : usize;
  var min_4 : Type.core_option_option (usize, Type.c06knightstour_point);
  var _5 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _12 : ();
  var _13 : isize;
  var _14 : Type.core_option_option (usize, Type.c06knightstour_point);
  var _15 : (usize, Type.c06knightstour_point);
  var _16 : (usize, Type.c06knightstour_point);
  var _17 : (usize, Type.c06knightstour_point);
  var _18 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _19 : usize;
  var m_20 : (usize, Type.c06knightstour_point);
  var _21 : bool;
  var _22 : usize;
  var _23 : (usize, Type.c06knightstour_point);
  var _24 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _25 : usize;
  var _26 : usize;
  var _27 : Type.core_option_option (usize, Type.c06knightstour_point);
  var _28 : (usize, Type.c06knightstour_point);
  var _29 : (usize, Type.c06knightstour_point);
  var _30 : (usize, Type.c06knightstour_point);
  var _31 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _32 : usize;
  var _33 : ();
  var _34 : ();
  var _35 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_3 <- (0 : usize);
    min_4 <- Type.Core_Option_Option_None;
    goto BB1
  }
  BB1 {
    invariant post { [#"../06_knights_tour.rs" 123 4 124 79] forall r : ((usize, Type.c06knightstour_point)) . min_4 = Type.Core_Option_Option_Some r -> (exists i : (int) . 0 <= i && i < Seq.length (Model0.model v_1) && Seq.get (Model0.model v_1) i = r) };
    _9 <- i_3;
    _11 <- v_1;
    _10 <- ([#"../06_knights_tour.rs" 125 14 125 21] Len0.len _11);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../06_knights_tour.rs" 125 10 125 21] _9 < _10);
    switch (_8)
      | False -> goto BB14
      | _ -> goto BB3
      end
  }
  BB3 {
    switch (min_4)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB4 {
    m_20 <- Type.core_option_option_Some_0 min_4;
    _24 <- v_1;
    _25 <- i_3;
    _23 <- ([#"../06_knights_tour.rs" 129 19 129 23] Index0.index _24 _25);
    goto BB8
  }
  BB5 {
    absurd
  }
  BB6 {
    _18 <- v_1;
    _19 <- i_3;
    _17 <- ([#"../06_knights_tour.rs" 127 32 127 36] Index0.index _18 _19);
    goto BB7
  }
  BB7 {
    _16 <- _17;
    _15 <- _16;
    _14 <- Type.Core_Option_Option_Some _15;
    min_4 <- _14;
    _12 <- ();
    goto BB13
  }
  BB8 {
    _22 <- (let (a, _) = _23 in a);
    _26 <- (let (a, _) = m_20 in a);
    _21 <- ([#"../06_knights_tour.rs" 129 19 129 31] _22 < _26);
    switch (_21)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    _31 <- v_1;
    _32 <- i_3;
    _30 <- ([#"../06_knights_tour.rs" 130 32 130 36] Index0.index _31 _32);
    goto BB10
  }
  BB10 {
    _29 <- _30;
    _28 <- _29;
    _27 <- Type.Core_Option_Option_Some _28;
    min_4 <- _27;
    _12 <- ();
    goto BB12
  }
  BB11 {
    _12 <- ();
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    i_3 <- ([#"../06_knights_tour.rs" 134 8 134 14] i_3 + (1 : usize));
    _7 <- ();
    goto BB1
  }
  BB14 {
    _5 <- ();
    _0 <- min_4;
    return _0
  }
  
end
module C06KnightsTour_DumbNonlinearArith_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function dumb_nonlinear_arith (a : usize) : ()
end
module C06KnightsTour_DumbNonlinearArith
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 142 0 142 33] (a : usize) : () =
    [#"../06_knights_tour.rs" 139 0 139 8] ()
  axiom dumb_nonlinear_arith_spec : forall a : usize . ([#"../06_knights_tour.rs" 140 11 140 22] UInt64.to_int a <= 1000) -> ([#"../06_knights_tour.rs" 141 10 141 30] UInt64.to_int a * UInt64.to_int a <= 1000000)
end
module C06KnightsTour_DumbNonlinearArith_Impl
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  let rec ghost function dumb_nonlinear_arith (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 140 11 140 22] UInt64.to_int a <= 1000}
    ensures { [#"../06_knights_tour.rs" 141 10 141 30] UInt64.to_int a * UInt64.to_int a <= 1000000 }
    
   =
    [#"../06_knights_tour.rs" 139 0 139 8] ()
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module C06KnightsTour_KnightsTour_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  val knights_tour [@cfg:stackify] (size : usize) (x : usize) (y : usize) : Type.core_option_option (Type.c06knightstour_board)
    requires {[#"../06_knights_tour.rs" 144 11 144 37] 0 < UInt64.to_int size && UInt64.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 145 11 145 19] x < size}
    requires {[#"../06_knights_tour.rs" 146 11 146 19] y < size}
    
end
module C06KnightsTour_KnightsTour
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model1.model, function Model1.model = Model2.model
  clone C06KnightsTour_DumbNonlinearArith as DumbNonlinearArith0 with axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve6 with type t = Type.c06knightstour_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve3 with type t1 = usize,
  type t2 = Type.c06knightstour_point, predicate Resolve0.resolve = Resolve5.resolve,
  predicate Resolve1.resolve = Resolve6.resolve
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = isize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve2 with type t1 = isize, type t2 = isize,
  predicate Resolve0.resolve = Resolve4.resolve, predicate Resolve1.resolve = Resolve4.resolve
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = (isize, isize)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = (isize, isize)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  axiom .
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (isize, isize), type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = (isize, isize),
  function Model0.model = Model3.model, predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (isize, isize), type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  clone C06KnightsTour_Moves_Interface as Moves0 with function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone C06KnightsTour_Min_Interface as Min0 with function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve1 with type t = (usize, Type.c06knightstour_point),
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve3.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = (usize, Type.c06knightstour_point),
  type a = Type.alloc_alloc_global, function Model0.model = Model0.model
  clone Alloc_Vec_Impl0_New_Interface as New1 with type t = (usize, Type.c06knightstour_point),
  function Model0.model = Model0.model
  clone C06KnightsTour_Impl1_CountDegree_Interface as CountDegree0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_Set_Interface as Set0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_New_Interface as New0 with predicate Wf0.wf = Wf0.wf
  let rec cfg knights_tour [@cfg:stackify] [#"../06_knights_tour.rs" 147 0 147 69] (size : usize) (x : usize) (y : usize) : Type.core_option_option (Type.c06knightstour_board)
    requires {[#"../06_knights_tour.rs" 144 11 144 37] 0 < UInt64.to_int size && UInt64.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 145 11 145 19] x < size}
    requires {[#"../06_knights_tour.rs" 146 11 146 19] y < size}
    
   =
  var _0 : Type.core_option_option (Type.c06knightstour_board);
  var size_1 : usize;
  var x_2 : usize;
  var y_3 : usize;
  var board_7 : Type.c06knightstour_board;
  var _8 : usize;
  var p_9 : Type.c06knightstour_point;
  var _10 : isize;
  var _11 : usize;
  var _12 : isize;
  var _13 : usize;
  var step_14 : usize;
  var _15 : ();
  var _16 : borrowed (Type.c06knightstour_board);
  var _17 : Type.c06knightstour_point;
  var _18 : usize;
  ghost var _19 : ();
  var _22 : ();
  var _23 : ();
  var _27 : ();
  var _28 : bool;
  var _29 : usize;
  var _30 : usize;
  var _31 : usize;
  var _32 : usize;
  var candidates_33 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var i_34 : usize;
  var _35 : ();
  var _37 : bool;
  var _38 : usize;
  var _39 : usize;
  var _40 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _41 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var adj_42 : Type.c06knightstour_point;
  var _43 : Type.c06knightstour_point;
  var _44 : (isize, isize);
  var _45 : (isize, isize);
  var _46 : (isize, isize);
  var _47 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _48 : Type.alloc_vec_vec (isize, isize) (Type.alloc_alloc_global);
  var _49 : usize;
  var _50 : ();
  var _51 : bool;
  var _52 : Type.c06knightstour_board;
  var _53 : Type.c06knightstour_point;
  var degree_54 : usize;
  var _55 : Type.c06knightstour_board;
  var _56 : Type.c06knightstour_point;
  var _57 : ();
  var _58 : borrowed (Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global));
  var _59 : (usize, Type.c06knightstour_point);
  var _60 : usize;
  var _61 : Type.c06knightstour_point;
  var _62 : ();
  var _63 : ();
  var _64 : ();
  var _65 : ();
  var _66 : Type.core_option_option (usize, Type.c06knightstour_point);
  var _67 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _68 : Type.alloc_vec_vec (usize, Type.c06knightstour_point) (Type.alloc_alloc_global);
  var _69 : isize;
  var adj_70 : Type.c06knightstour_point;
  var _71 : Type.c06knightstour_point;
  var _72 : ();
  var _73 : ();
  var _74 : borrowed (Type.c06knightstour_board);
  var _75 : Type.c06knightstour_point;
  var _76 : usize;
  var _77 : ();
  var _78 : ();
  var _79 : ();
  var _80 : Type.c06knightstour_board;
  {
    size_1 <- size;
    x_2 <- x;
    y_3 <- y;
    goto BB0
  }
  BB0 {
    _8 <- size_1;
    board_7 <- ([#"../06_knights_tour.rs" 148 20 148 36] New0.new _8);
    goto BB1
  }
  BB1 {
    _11 <- x_2;
    _10 <- Int64.of_int (UInt64.to_int _11);
    _13 <- y_3;
    _12 <- Int64.of_int (UInt64.to_int _13);
    p_9 <- Type.C06KnightsTour_Point _10 _12;
    step_14 <- (1 : usize);
    _16 <- borrow_mut board_7;
    board_7 <-  ^ _16;
    _17 <- p_9;
    _18 <- step_14;
    _15 <- ([#"../06_knights_tour.rs" 152 4 152 22] Set0.set _16 _17 _18);
    goto BB2
  }
  BB2 {
    step_14 <- ([#"../06_knights_tour.rs" 153 4 153 13] step_14 + (1 : usize));
    _22 <- ();
    _19 <- ghost ([#"../06_knights_tour.rs" 155 4 155 41] DumbNonlinearArith0.dumb_nonlinear_arith size_1);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant b { [#"../06_knights_tour.rs" 156 19 156 37] Type.c06knightstour_board_Board_size board_7 = size_1 };
    invariant b { [#"../06_knights_tour.rs" 157 19 157 29] Wf0.wf board_7 };
    invariant p { [#"../06_knights_tour.rs" 158 19 158 37] InBounds0.in_bounds board_7 p_9 };
    _29 <- step_14;
    _31 <- size_1;
    _32 <- size_1;
    _30 <- ([#"../06_knights_tour.rs" 161 18 161 31] _31 * _32);
    _28 <- ([#"../06_knights_tour.rs" 161 10 161 31] _29 <= _30);
    switch (_28)
      | False -> goto BB32
      | _ -> goto BB7
      end
  }
  BB7 {
    candidates_33 <- ([#"../06_knights_tour.rs" 163 50 163 60] New1.new ());
    goto BB8
  }
  BB8 {
    i_34 <- (0 : usize);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant c { [#"../06_knights_tour.rs" 165 8 166 57] forall i : (int) . 0 <= i && i < Seq.length (Model0.model candidates_33) -> InBounds0.in_bounds board_7 (let (_, a) = Seq.get (Model0.model candidates_33) i in a) };
    _38 <- i_34;
    _41 <- ([#"../06_knights_tour.rs" 167 18 167 25] Moves0.moves ());
    goto BB11
  }
  BB11 {
    _40 <- _41;
    _39 <- ([#"../06_knights_tour.rs" 167 18 167 31] Len0.len _40);
    goto BB12
  }
  BB12 {
    _37 <- ([#"../06_knights_tour.rs" 167 14 167 31] _38 < _39);
    goto BB13
  }
  BB13 {
    assume { Resolve0.resolve _41 };
    switch (_37)
      | False -> goto BB25
      | _ -> goto BB14
      end
  }
  BB14 {
    _43 <- p_9;
    _48 <- ([#"../06_knights_tour.rs" 168 29 168 36] Moves0.moves ());
    goto BB15
  }
  BB15 {
    _47 <- _48;
    _49 <- i_34;
    _46 <- ([#"../06_knights_tour.rs" 168 29 168 39] Index0.index _47 _49);
    goto BB16
  }
  BB16 {
    _45 <- _46;
    _44 <- _45;
    adj_42 <- ([#"../06_knights_tour.rs" 168 22 168 40] Mov0.mov _43 _44);
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    assume { Resolve0.resolve _48 };
    _52 <- board_7;
    _53 <- adj_42;
    _51 <- ([#"../06_knights_tour.rs" 169 15 169 35] Available0.available _52 _53);
    goto BB19
  }
  BB19 {
    switch (_51)
      | False -> goto BB23
      | _ -> goto BB20
      end
  }
  BB20 {
    _55 <- board_7;
    _56 <- adj_42;
    degree_54 <- ([#"../06_knights_tour.rs" 170 29 170 52] CountDegree0.count_degree _55 _56);
    goto BB21
  }
  BB21 {
    _58 <- borrow_mut candidates_33;
    candidates_33 <-  ^ _58;
    _60 <- degree_54;
    _61 <- adj_42;
    _59 <- (_60, _61);
    _57 <- ([#"../06_knights_tour.rs" 171 16 171 46] Push0.push _58 _59);
    goto BB22
  }
  BB22 {
    _50 <- ();
    goto BB24
  }
  BB23 {
    _50 <- ();
    goto BB24
  }
  BB24 {
    i_34 <- ([#"../06_knights_tour.rs" 173 12 173 18] i_34 + (1 : usize));
    _27 <- ();
    goto BB10
  }
  BB25 {
    _35 <- ();
    _68 <- candidates_33;
    _67 <- _68;
    _66 <- ([#"../06_knights_tour.rs" 175 14 175 30] Min0.min _67);
    goto BB26
  }
  BB26 {
    switch (_66)
      | Type.Core_Option_Option_None -> goto BB27
      | Type.Core_Option_Option_Some _ -> goto BB29
      end
  }
  BB27 {
    _0 <- Type.Core_Option_Option_None;
    goto BB35
  }
  BB28 {
    assume { Resolve1.resolve candidates_33 };
    absurd
  }
  BB29 {
    adj_70 <- (let (_, a) = Type.core_option_option_Some_0 _66 in a);
    _71 <- adj_70;
    p_9 <- _71;
    _65 <- ();
    _74 <- borrow_mut board_7;
    board_7 <-  ^ _74;
    _75 <- p_9;
    _76 <- step_14;
    _73 <- ([#"../06_knights_tour.rs" 179 8 179 26] Set0.set _74 _75 _76);
    goto BB30
  }
  BB30 {
    step_14 <- ([#"../06_knights_tour.rs" 180 8 180 17] step_14 + (1 : usize));
    _27 <- ();
    goto BB31
  }
  BB31 {
    assume { Resolve1.resolve candidates_33 };
    goto BB6
  }
  BB32 {
    _23 <- ();
    _80 <- board_7;
    _0 <- Type.Core_Option_Option_Some _80;
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB37
  }
  BB35 {
    assume { Resolve1.resolve candidates_33 };
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    return _0
  }
  
end
module C06KnightsTour_Impl2
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module C06KnightsTour_Impl3
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.c06knightstour_point
  clone C06KnightsTour_Impl3_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.c06knightstour_point,
  val clone' = Clone0.clone'
end
