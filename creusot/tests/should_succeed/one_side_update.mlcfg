module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type onesideupdate_myint  =
    | OneSideUpdate_MyInt usize
    
  let function onesideupdate_myint_MyInt_0 (self : onesideupdate_myint) : usize =
    match (self) with
      | OneSideUpdate_MyInt a -> a
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module OneSideUpdate_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module OneSideUpdate_F
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.onesideupdate_myint
  let rec cfg f [@cfg:stackify] [#"../one_side_update.rs" 5 0 5 10] (_ : ()) : () =
  var _0 : ();
  var a_1 : Type.onesideupdate_myint;
  var b_2 : borrowed (Type.onesideupdate_myint);
  var _3 : bool;
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.onesideupdate_myint;
  {
    goto BB0
  }
  BB0 {
    a_1 <- Type.OneSideUpdate_MyInt (10 : usize);
    b_2 <- borrow_mut a_1;
    a_1 <-  ^ b_2;
    _3 <- true;
    switch (_3)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve b_2 };
    _5 <- Type.onesideupdate_myint_MyInt_0 a_1;
    _4 <- ([#"../one_side_update.rs" 9 16 9 25] _5 = (10 : usize));
    _0 <- ();
    goto BB3
  }
  BB2 {
    _6 <- Type.OneSideUpdate_MyInt (5 : usize);
    b_2 <- { b_2 with current = _6 };
    assume { Resolve0.resolve b_2 };
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
