module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module BranchBorrow4_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module BranchBorrow4_F
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = int32
  let rec cfg f [@cfg:stackify] [#"../branch_borrow_4.rs" 3 0 3 10] (_ : ()) : () =
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var x_3 : borrowed int32;
  var y_4 : borrowed int32;
  var w_5 : borrowed int32;
  var _6 : ();
  var _7 : bool;
  var _8 : borrowed int32;
  var _9 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    a_1 <- (10 : int32);
    b_2 <- (10 : int32);
    x_3 <- borrow_mut a_1;
    a_1 <-  ^ x_3;
    y_4 <- borrow_mut b_2;
    b_2 <-  ^ y_4;
    _7 <- true;
    switch (_7)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve y_4 };
    x_3 <- { x_3 with current = (5 : int32) };
    assume { Resolve0.resolve _8 };
    _8 <- x_3;
    assume { Resolve0.resolve w_5 };
    w_5 <- _8;
    assume { Resolve0.resolve w_5 };
    _6 <- ();
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve x_3 };
    y_4 <- { y_4 with current = (6 : int32) };
    _9 <- borrow_mut ( * y_4);
    y_4 <- { y_4 with current = ( ^ _9) };
    assume { Resolve0.resolve y_4 };
    assume { Resolve0.resolve w_5 };
    w_5 <- _9;
    assume { Resolve0.resolve w_5 };
    _6 <- ();
    goto BB3
  }
  BB3 {
    _0 <- ();
    return _0
  }
  
end
