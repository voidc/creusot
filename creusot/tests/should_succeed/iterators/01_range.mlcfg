module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type c01range_range  =
    | C01Range_Range isize isize
    
  let function c01range_range_Range_start (self : c01range_range) : isize =
    match (self) with
      | C01Range_Range a _ -> a
      end
  let function c01range_range_Range_end (self : c01range_range) : isize =
    match (self) with
      | C01Range_Range _ a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
end
module C01Range_Impl0_Completed_Interface
  use Type
  predicate completed (self : Type.c01range_range)
end
module C01Range_Impl0_Completed
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  predicate completed [#"../01_range.rs" 18 4 18 30] (self : Type.c01range_range) =
    [#"../01_range.rs" 19 20 19 42] Type.c01range_range_Range_start self >= Type.c01range_range_Range_end self
end
module C01Range_Impl0_Produces_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  predicate produces (self : Type.c01range_range) (visited : Seq.seq isize) (o : Type.c01range_range)
end
module C01Range_Impl0_Produces
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use mach.int.Int32
  predicate produces [#"../01_range.rs" 23 4 23 64] (self : Type.c01range_range) (visited : Seq.seq isize) (o : Type.c01range_range)
    
   =
    [#"../01_range.rs" 24 8 29 9] Type.c01range_range_Range_end self = Type.c01range_range_Range_end o && Type.c01range_range_Range_start self <= Type.c01range_range_Range_start o && Seq.length visited = Int64.to_int (Type.c01range_range_Range_start o) - Int64.to_int (Type.c01range_range_Range_start self) && (forall i : (int) . 0 <= i && i < Seq.length visited -> Int64.to_int (Seq.get visited i) = Int64.to_int (Type.c01range_range_Range_start self) + i)
end
module C01Range_Impl0_ProducesRefl_Interface
  use seq.Seq
  use Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_refl (a : Type.c01range_range) : ()
end
module C01Range_Impl0_ProducesRefl
  use seq.Seq
  use Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_refl [#"../01_range.rs" 34 4 34 29] (a : Type.c01range_range) : () =
    [#"../01_range.rs" 32 4 32 10] ()
  axiom produces_refl_spec : forall a : Type.c01range_range . [#"../01_range.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Impl0_ProducesRefl_Impl
  use seq.Seq
  use Type
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_refl (a : Type.c01range_range) : ()
    ensures { [#"../01_range.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a }
    
   =
    [#"../01_range.rs" 32 4 32 10] ()
end
module C01Range_Impl0_ProducesTrans_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_trans (a : Type.c01range_range) (ab : Seq.seq isize) (b : Type.c01range_range) (bc : Seq.seq isize) (c : Type.c01range_range) : ()
    
end
module C01Range_Impl0_ProducesTrans
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_trans [#"../01_range.rs" 40 4 40 90] (a : Type.c01range_range) (ab : Seq.seq isize) (b : Type.c01range_range) (bc : Seq.seq isize) (c : Type.c01range_range) : ()
    
   =
    [#"../01_range.rs" 36 4 36 10] ()
  axiom produces_trans_spec : forall a : Type.c01range_range, ab : Seq.seq isize, b : Type.c01range_range, bc : Seq.seq isize, c : Type.c01range_range . ([#"../01_range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../01_range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl0_ProducesTrans_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_trans (a : Type.c01range_range) (ab : Seq.seq isize) (b : Type.c01range_range) (bc : Seq.seq isize) (c : Type.c01range_range) : ()
    requires {[#"../01_range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../01_range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   =
    [#"../01_range.rs" 36 4 36 10] ()
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module C01Range_Impl0_Next_Interface
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use seq.Seq
  clone C01Range_Impl0_Produces_Interface as Produces0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = Type.c01range_range
  clone C01Range_Impl0_Completed_Interface as Completed0
  val next [@cfg:stackify] (self : borrowed (Type.c01range_range)) : Type.core_option_option isize
    ensures { [#"../01_range.rs" 43 14 46 5] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( ^ self) && Resolve0.resolve self
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C01Range_Impl0_Next
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use seq.Seq
  clone C01Range_Impl0_Produces as Produces0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c01range_range
  clone C01Range_Impl0_Completed as Completed0
  let rec cfg next [@cfg:stackify] [#"../01_range.rs" 47 4 47 39] (self : borrowed (Type.c01range_range)) : Type.core_option_option isize
    ensures { [#"../01_range.rs" 43 14 46 5] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( ^ self) && Resolve0.resolve self
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
   =
  var _0 : Type.core_option_option isize;
  var self_1 : borrowed (Type.c01range_range);
  var _3 : bool;
  var _4 : isize;
  var _5 : isize;
  var r_6 : isize;
  var _7 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- Type.c01range_range_Range_start ( * self_1);
    _5 <- Type.c01range_range_Range_end ( * self_1);
    _3 <- ([#"../01_range.rs" 48 11 48 33] _4 >= _5);
    switch (_3)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB3
  }
  BB2 {
    r_6 <- Type.c01range_range_Range_start ( * self_1);
    self_1 <- { self_1 with current = (let Type.C01Range_Range a b =  * self_1 in Type.C01Range_Range ([#"../01_range.rs" 52 12 52 27] Type.c01range_range_Range_start ( * self_1) + (1 : isize)) b) };
    assume { Resolve0.resolve self_1 };
    _7 <- r_6;
    _0 <- Type.Core_Option_Option_Some _7;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C01Range_Impl1_IntoIter_Interface
  use Type
  val into_iter [@cfg:stackify] (self : Type.c01range_range) : Type.c01range_range
    ensures { [#"../01_range.rs" 59 14 59 28] result = self }
    
end
module C01Range_Impl1_IntoIter
  use Type
  let rec cfg into_iter [@cfg:stackify] [#"../01_range.rs" 60 4 60 34] (self : Type.c01range_range) : Type.c01range_range
    ensures { [#"../01_range.rs" 59 14 59 28] result = self }
    
   =
  var _0 : Type.c01range_range;
  var self_1 : Type.c01range_range;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module C01Range_Impl0_Item
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  type item  =
    isize
end
module C01Range_Common_Iterator_Item
  type self
  type item
end
module C01Range_Common_Iterator_Completed_Interface
  type self
  predicate completed (self : self)
end
module C01Range_Common_Iterator_Completed
  type self
  predicate completed [#"../common.rs" 8 4 8 31] (self : self)
end
module C01Range_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  predicate produces [#"../common.rs" 11 4 11 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_refl (a : self) : ()
end
module C01Range_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module C01Range_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Common_Iterator_Next_Interface
  type self
  use Type
  use seq.Seq
  use prelude.Prelude
  clone C01Range_Common_Iterator_Completed_Interface as Completed0 with type self = self
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self)
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C01Range_Common_Iterator_Next
  type self
  use Type
  use seq.Seq
  use prelude.Prelude
  clone C01Range_Common_Iterator_Completed as Completed0 with type self = self
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces as Produces0 with type self = self, type Item0.item = Item0.item
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self)
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C01Range_Impl0
  use seq.Seq
  use Type
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_ProducesRefl as ProducesRefl0 with predicate Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Impl0_Completed as Completed0
  clone C01Range_Common_Iterator_Completed_Interface as Completed1 with type self = Type.c01range_range,
  predicate completed = Completed0.completed
  clone C01Range_Impl0_Item as Item0
  clone C01Range_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = Type.c01range_range,
  function produces_refl = ProducesRefl0.produces_refl, predicate Produces0.produces = Produces0.produces,
  type Item0.item = Item0.item, axiom .
  clone C01Range_Common_Iterator_Produces_Interface as Produces1 with type self = Type.c01range_range,
  predicate produces = Produces0.produces, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Item as Item1 with type self = Type.c01range_range, type item = Item0.item
  goal produces_refl_spec : forall a : Type.c01range_range . forall result : () . ([#"../01_range.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone C01Range_Impl0_ProducesTrans as ProducesTrans0 with predicate Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = Type.c01range_range,
  function produces_trans = ProducesTrans0.produces_trans, predicate Produces0.produces = Produces0.produces,
  type Item0.item = Item0.item, axiom .
  goal produces_trans_spec : forall a : Type.c01range_range, ab : Seq.seq isize, b : Type.c01range_range, bc : Seq.seq isize, c : Type.c01range_range . (([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) && ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 38 15 38 32] Produces0.produces b bc c) && ([#"../01_range.rs" 37 15 37 32] Produces0.produces a ab b)) && (forall result : () . ([#"../01_range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c01range_range
  clone C01Range_Impl0_Next_Interface as Next0 with predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve0.resolve, predicate Produces0.produces = Produces0.produces
  clone C01Range_Common_Iterator_Next_Interface as Next1 with type self = Type.c01range_range, val next = Next0.next,
  type Item0.item = Item0.item, predicate Completed0.completed = Completed0.completed,
  predicate Produces0.produces = Produces0.produces
end
module C01Range_SumRange_Interface
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  val sum_range [@cfg:stackify] (n : isize) : isize
    requires {[#"../01_range.rs" 65 11 65 18] Int64.to_int n >= 0}
    ensures { [#"../01_range.rs" 66 10 66 21] result = n }
    
end
module C01Range_SumRange
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use seq.Seq
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_ProducesTrans as ProducesTrans0 with predicate Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Impl0_ProducesRefl as ProducesRefl0 with predicate Produces0.produces = Produces0.produces, axiom .
  use Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c01range_range
  clone C01Range_Impl0_Completed as Completed0
  clone C01Range_Impl1_IntoIter_Interface as IntoIter0
  clone C01Range_Impl0_Next_Interface as Next0 with predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve0.resolve, predicate Produces0.produces = Produces0.produces
  let rec cfg sum_range [@cfg:stackify] [#"../01_range.rs" 67 0 67 35] (n : isize) : isize
    requires {[#"../01_range.rs" 65 11 65 18] Int64.to_int n >= 0}
    ensures { [#"../01_range.rs" 66 10 66 21] result = n }
    
   =
  var _0 : isize;
  var n_1 : isize;
  var i_4 : isize;
  var _5 : ();
  var iter_6 : Type.c01range_range;
  var _7 : Type.c01range_range;
  var _8 : isize;
  ghost var iter_old_9 : Type.c01range_range;
  var _12 : ();
  ghost var produced_13 : Seq.seq isize;
  var _16 : ();
  var _19 : ();
  var _20 : Type.core_option_option isize;
  var _21 : borrowed (Type.c01range_range);
  var _22 : isize;
  var i_23 : isize;
  ghost var _24 : Seq.seq isize;
  var _26 : ();
  var _27 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : isize);
    _8 <- n_1;
    _7 <- Type.C01Range_Range (0 : isize) _8;
    iter_6 <- ([#"../01_range.rs" 69 4 69 54] IntoIter0.into_iter _7);
    goto BB1
  }
  BB1 {
    _12 <- ();
    iter_old_9 <- ghost ([#"../01_range.rs" 69 4 69 54] iter_6);
    goto BB2
  }
  BB2 {
    _16 <- ();
    produced_13 <- ghost ([#"../01_range.rs" 69 4 69 54] Seq.empty );
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant structural { [#"../01_range.rs" 69 4 69 54] Produces0.produces iter_old_9 produced_13 iter_6 };
    invariant user { [#"../01_range.rs" 69 22 69 52] Int64.to_int i_4 = Seq.length produced_13 && i_4 <= n_1 };
    _21 <- borrow_mut iter_6;
    iter_6 <-  ^ _21;
    _20 <- ([#"../01_range.rs" 69 4 69 54] Next0.next _21);
    goto BB5
  }
  BB5 {
    switch (_20)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB8
      end
  }
  BB6 {
    _5 <- ();
    _0 <- i_4;
    return _0
  }
  BB7 {
    absurd
  }
  BB8 {
    i_23 <- Type.core_option_option_Some_0 _20;
    _26 <- ();
    _24 <- ghost ([#"../01_range.rs" 69 4 69 54] Seq.snoc produced_13 i_23);
    goto BB9
  }
  BB9 {
    produced_13 <- _24;
    i_4 <- ([#"../01_range.rs" 71 8 71 14] i_4 + (1 : isize));
    _19 <- ();
    goto BB4
  }
  
end
