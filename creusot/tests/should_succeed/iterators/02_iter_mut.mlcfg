module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type c02itermut_itermut 't =
    | C02IterMut_IterMut (borrowed (seq 't))
    
  let function c02itermut_itermut_IterMut_inner (self : c02itermut_itermut 't) : borrowed (seq 't) =
    match (self) with
      | C02IterMut_IterMut a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module C02IterMut_Impl0_Completed_Interface
  type t
  use Type
  predicate completed (self : Type.c02itermut_itermut t)
end
module C02IterMut_Impl0_Completed
  type t
  use Type
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate completed [#"../02_iter_mut.rs" 17 4 17 30] (self : Type.c02itermut_itermut t) =
    [#"../02_iter_mut.rs" 18 20 18 52] Seq.(==) (Model0.model (Type.c02itermut_itermut_IterMut_inner self)) (Seq.empty )
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Prelude.id self && Seq.length (model self) <= 18446744073709551615
end
module C02IterMut_Impl0_Produces_Interface
  type t
  use Type
  use seq.Seq
  use prelude.Prelude
  predicate produces (self : Type.c02itermut_itermut t) (visited : Seq.seq (borrowed t)) (tl : Type.c02itermut_itermut t)
    
end
module C02IterMut_Impl0_Produces
  type t
  use Type
  use seq.Seq
  use prelude.Prelude
  use mach.int.Int
  use seq_ext.SeqExt
  use mach.int.Int32
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  predicate produces [#"../02_iter_mut.rs" 22 4 22 65] (self : Type.c02itermut_itermut t) (visited : Seq.seq (borrowed t)) (tl : Type.c02itermut_itermut t)
    
   =
    [#"../02_iter_mut.rs" 24 12 29 85] Seq.length (Model0.model ( * Type.c02itermut_itermut_IterMut_inner self)) = Seq.length visited + Seq.length (Model0.model ( * Type.c02itermut_itermut_IterMut_inner tl)) && Seq.length (Model0.model ( ^ Type.c02itermut_itermut_IterMut_inner self)) = Seq.length visited + Seq.length (Model0.model ( ^ Type.c02itermut_itermut_IterMut_inner tl)) && Seq.(==) (SeqExt.subsequence (Model0.model ( * Type.c02itermut_itermut_IterMut_inner self)) (Seq.length visited) (Seq.length (Model0.model ( * Type.c02itermut_itermut_IterMut_inner self)))) (Model0.model ( * Type.c02itermut_itermut_IterMut_inner tl)) && Seq.(==) (SeqExt.subsequence (Model0.model ( ^ Type.c02itermut_itermut_IterMut_inner self)) (Seq.length visited) (Seq.length (Model0.model ( ^ Type.c02itermut_itermut_IterMut_inner self)))) (Model0.model ( ^ Type.c02itermut_itermut_IterMut_inner tl)) && (forall i : (int) . 0 <= i && i < Seq.length visited -> Seq.get (Model0.model ( * Type.c02itermut_itermut_IterMut_inner self)) i =  * Seq.get visited i && Seq.get (Model0.model ( ^ Type.c02itermut_itermut_IterMut_inner self)) i =  ^ Seq.get visited i)
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module C02IterMut_Impl0_ProducesRefl_Interface
  type t
  use seq.Seq
  use Type
  clone C02IterMut_Impl0_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Type.c02itermut_itermut t) : ()
end
module C02IterMut_Impl0_ProducesRefl
  type t
  use seq.Seq
  use Type
  clone C02IterMut_Impl0_Produces_Interface as Produces0 with type t = t
  function produces_refl [#"../02_iter_mut.rs" 35 4 35 29] (a : Type.c02itermut_itermut t) : () =
    [#"../02_iter_mut.rs" 33 4 33 10] ()
  axiom produces_refl_spec : forall a : Type.c02itermut_itermut t . [#"../02_iter_mut.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a
end
module C02IterMut_Impl0_ProducesRefl_Impl
  type t
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  clone C02IterMut_Impl0_Produces as Produces0 with type t = t, function Model0.model = Model0.model
  let rec ghost function produces_refl (a : Type.c02itermut_itermut t) : ()
    ensures { [#"../02_iter_mut.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a }
    
   =
    [#"../02_iter_mut.rs" 33 4 33 10] ()
end
module C02IterMut_Impl0_ProducesTrans_Interface
  type t
  use seq.Seq
  use Type
  use prelude.Prelude
  clone C02IterMut_Impl0_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Type.c02itermut_itermut t) (ab : Seq.seq (borrowed t)) (b : Type.c02itermut_itermut t) (bc : Seq.seq (borrowed t)) (c : Type.c02itermut_itermut t) : ()
    
end
module C02IterMut_Impl0_ProducesTrans
  type t
  use seq.Seq
  use Type
  use prelude.Prelude
  clone C02IterMut_Impl0_Produces_Interface as Produces0 with type t = t
  function produces_trans [#"../02_iter_mut.rs" 41 4 41 90] (a : Type.c02itermut_itermut t) (ab : Seq.seq (borrowed t)) (b : Type.c02itermut_itermut t) (bc : Seq.seq (borrowed t)) (c : Type.c02itermut_itermut t) : ()
    
   =
    [#"../02_iter_mut.rs" 37 4 37 10] ()
  axiom produces_trans_spec : forall a : Type.c02itermut_itermut t, ab : Seq.seq (borrowed t), b : Type.c02itermut_itermut t, bc : Seq.seq (borrowed t), c : Type.c02itermut_itermut t . ([#"../02_iter_mut.rs" 38 15 38 32] Produces0.produces a ab b) -> ([#"../02_iter_mut.rs" 39 15 39 32] Produces0.produces b bc c) -> ([#"../02_iter_mut.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Impl0_ProducesTrans_Impl
  type t
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  clone C02IterMut_Impl0_Produces as Produces0 with type t = t, function Model0.model = Model0.model
  let rec ghost function produces_trans (a : Type.c02itermut_itermut t) (ab : Seq.seq (borrowed t)) (b : Type.c02itermut_itermut t) (bc : Seq.seq (borrowed t)) (c : Type.c02itermut_itermut t) : ()
    requires {[#"../02_iter_mut.rs" 38 15 38 32] Produces0.produces a ab b}
    requires {[#"../02_iter_mut.rs" 39 15 39 32] Produces0.produces b bc c}
    ensures { [#"../02_iter_mut.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   =
    [#"../02_iter_mut.rs" 37 4 37 10] ()
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Logic_Seq_Impl2_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl2_Tail
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    SeqExt.subsequence self 1 (Seq.length self)
end
module Core_Slice_Impl0_TakeFirstMut_Interface
  type t
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl2_Tail_Interface as Tail0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val take_first_mut [@cfg:stackify] (self : borrowed (borrowed (seq t))) : Type.core_option_option (borrowed t)
    ensures { match (result) with
      | Type.Core_Option_Option_Some r ->  * r = Seq.get (Model0.model ( *  * self)) 0 &&  ^ r = Seq.get (Model0.model ( ^  * self)) 0 && Seq.length (Model0.model ( *  * self)) > 0 && Seq.length (Model0.model ( ^  * self)) > 0 && Seq.(==) (Model0.model ( *  ^ self)) (Tail0.tail (Model0.model ( *  * self))) && Seq.(==) (Model0.model ( ^  ^ self)) (Tail0.tail (Model0.model ( ^  * self)))
      | Type.Core_Option_Option_None ->  ^ self =  * self && Seq.length (Model0.model ( *  * self)) = 0
      end }
    
end
module Core_Slice_Impl0_TakeFirstMut
  type t
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl2_Tail_Interface as Tail0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val take_first_mut [@cfg:stackify] (self : borrowed (borrowed (seq t))) : Type.core_option_option (borrowed t)
    ensures { match (result) with
      | Type.Core_Option_Option_Some r ->  * r = Seq.get (Model0.model ( *  * self)) 0 &&  ^ r = Seq.get (Model0.model ( ^  * self)) 0 && Seq.length (Model0.model ( *  * self)) > 0 && Seq.length (Model0.model ( ^  * self)) > 0 && Seq.(==) (Model0.model ( *  ^ self)) (Tail0.tail (Model0.model ( *  * self))) && Seq.(==) (Model0.model ( ^  ^ self)) (Tail0.tail (Model0.model ( ^  * self)))
      | Type.Core_Option_Option_None ->  ^ self =  * self && Seq.length (Model0.model ( *  * self)) = 0
      end }
    
end
module C02IterMut_Impl0_Next_Interface
  type t
  use Type
  use prelude.Prelude
  use seq.Seq
  clone C02IterMut_Impl0_Produces_Interface as Produces0 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = Type.c02itermut_itermut t
  clone C02IterMut_Impl0_Completed_Interface as Completed0 with type t = t
  val next [@cfg:stackify] (self : borrowed (Type.c02itermut_itermut t)) : Type.core_option_option (borrowed t)
    ensures { [#"../02_iter_mut.rs" 43 14 46 5] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self) && Resolve0.resolve self
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C02IterMut_Impl0_Next
  type t
  use Type
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = t, axiom .
  clone C02IterMut_Impl0_Produces as Produces0 with type t = t, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c02itermut_itermut t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone C02IterMut_Impl0_Completed as Completed0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Seq_Impl2_Tail as Tail0 with type t = t
  clone Core_Slice_Impl0_TakeFirstMut_Interface as TakeFirstMut0 with type t = t, function Model0.model = Model1.model,
  function Tail0.tail = Tail0.tail
  let rec cfg next [@cfg:stackify] [#"../02_iter_mut.rs" 47 4 47 44] (self : borrowed (Type.c02itermut_itermut t)) : Type.core_option_option (borrowed t)
    ensures { [#"../02_iter_mut.rs" 43 14 46 5] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self) && Resolve0.resolve self
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
   =
  var _0 : Type.core_option_option (borrowed t);
  var self_1 : borrowed (Type.c02itermut_itermut t);
  var _3 : borrowed (borrowed (seq t));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (Type.c02itermut_itermut_IterMut_inner ( * self_1));
    self_1 <- { self_1 with current = (let Type.C02IterMut_IterMut a =  * self_1 in Type.C02IterMut_IterMut ( ^ _3)) };
    _0 <- ([#"../02_iter_mut.rs" 48 8 48 37] TakeFirstMut0.take_first_mut _3);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module C02IterMut_Impl1_IntoIter_Interface
  type t
  use Type
  val into_iter [@cfg:stackify] (self : Type.c02itermut_itermut t) : Type.c02itermut_itermut t
    ensures { [#"../02_iter_mut.rs" 53 14 53 28] result = self }
    
end
module C02IterMut_Impl1_IntoIter
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.c02itermut_itermut t
  let rec cfg into_iter [@cfg:stackify] [#"../02_iter_mut.rs" 54 4 54 30] (self : Type.c02itermut_itermut t) : Type.c02itermut_itermut t
    ensures { [#"../02_iter_mut.rs" 53 14 53 28] result = self }
    
   =
  var _0 : Type.c02itermut_itermut t;
  var self_1 : Type.c02itermut_itermut t;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module C02IterMut_IterMut_Interface
  type t
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model2 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val iter_mut [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))) : Type.c02itermut_itermut t
    ensures { [#"../02_iter_mut.rs" 60 10 60 31] Model0.model ( * Type.c02itermut_itermut_IterMut_inner result) = Model1.model ( * v) }
    ensures { [#"../02_iter_mut.rs" 61 10 61 31] Model0.model ( ^ Type.c02itermut_itermut_IterMut_inner result) = Model1.model ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 62 10 62 35] Seq.length (Model1.model ( ^ v)) = Seq.length (Model2.model v) }
    
end
module C02IterMut_IterMut
  type t
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  val iter_mut [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))) : Type.c02itermut_itermut t
    ensures { [#"../02_iter_mut.rs" 60 10 60 31] Model0.model ( * Type.c02itermut_itermut_IterMut_inner result) = Model1.model ( * v) }
    ensures { [#"../02_iter_mut.rs" 61 10 61 31] Model0.model ( ^ Type.c02itermut_itermut_IterMut_inner result) = Model1.model ( ^ v) }
    ensures { [#"../02_iter_mut.rs" 62 10 62 35] Seq.length (Model1.model ( ^ v)) = Seq.length (Model2.model v) }
    
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module C02IterMut_Impl0_Item
  type t
  use prelude.Prelude
  type item  =
    borrowed t
end
module C02IterMut_Common_Iterator_Item
  type self
  type item
end
module C02IterMut_Common_Iterator_Completed_Interface
  type self
  predicate completed (self : self)
end
module C02IterMut_Common_Iterator_Completed
  type self
  predicate completed [#"../common.rs" 8 4 8 31] (self : self)
end
module C02IterMut_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C02IterMut_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item as Item0 with type self = self
  predicate produces [#"../common.rs" 11 4 11 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C02IterMut_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_refl (a : self) : ()
end
module C02IterMut_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a
end
module C02IterMut_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module C02IterMut_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C02IterMut_Common_Iterator_Item as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C02IterMut_Common_Iterator_Next_Interface
  type self
  use Type
  use seq.Seq
  use prelude.Prelude
  clone C02IterMut_Common_Iterator_Completed_Interface as Completed0 with type self = self
  clone C02IterMut_Common_Iterator_Item as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self)
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C02IterMut_Common_Iterator_Next
  type self
  use Type
  use seq.Seq
  use prelude.Prelude
  clone C02IterMut_Common_Iterator_Completed as Completed0 with type self = self
  clone C02IterMut_Common_Iterator_Item as Item0 with type self = self
  clone C02IterMut_Common_Iterator_Produces as Produces0 with type self = self, type Item0.item = Item0.item
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self)
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C02IterMut_Impl0
  type t
  use seq.Seq
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = t, axiom .
  clone C02IterMut_Impl0_Produces as Produces0 with type t = t, function Model0.model = Model1.model
  clone C02IterMut_Impl0_ProducesRefl as ProducesRefl0 with type t = t,
  predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone C02IterMut_Impl0_Completed as Completed0 with type t = t, function Model0.model = Model0.model
  clone C02IterMut_Common_Iterator_Completed_Interface as Completed1 with type self = Type.c02itermut_itermut t,
  predicate completed = Completed0.completed
  clone C02IterMut_Impl0_Item as Item0 with type t = t
  clone C02IterMut_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = Type.c02itermut_itermut t,
  function produces_refl = ProducesRefl0.produces_refl, predicate Produces0.produces = Produces0.produces,
  type Item0.item = Item0.item, axiom .
  clone C02IterMut_Common_Iterator_Produces_Interface as Produces1 with type self = Type.c02itermut_itermut t,
  predicate produces = Produces0.produces, type Item0.item = Item0.item
  clone C02IterMut_Common_Iterator_Item as Item1 with type self = Type.c02itermut_itermut t, type item = Item0.item
  goal produces_refl_spec : forall a : Type.c02itermut_itermut t . forall result : () . ([#"../02_iter_mut.rs" 34 14 34 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
  clone C02IterMut_Impl0_ProducesTrans as ProducesTrans0 with type t = t,
  predicate Produces0.produces = Produces0.produces, axiom .
  clone C02IterMut_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = Type.c02itermut_itermut t,
  function produces_trans = ProducesTrans0.produces_trans, predicate Produces0.produces = Produces0.produces,
  type Item0.item = Item0.item, axiom .
  goal produces_trans_spec : forall a : Type.c02itermut_itermut t, ab : Seq.seq (borrowed t), b : Type.c02itermut_itermut t, bc : Seq.seq (borrowed t), c : Type.c02itermut_itermut t . (([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) && ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../02_iter_mut.rs" 39 15 39 32] Produces0.produces b bc c) && ([#"../02_iter_mut.rs" 38 15 38 32] Produces0.produces a ab b)) && (forall result : () . ([#"../02_iter_mut.rs" 40 14 40 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c02itermut_itermut t
  clone C02IterMut_Impl0_Next_Interface as Next0 with type t = t, predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve0.resolve, predicate Produces0.produces = Produces0.produces
  clone C02IterMut_Common_Iterator_Next_Interface as Next1 with type self = Type.c02itermut_itermut t,
  val next = Next0.next, type Item0.item = Item0.item, predicate Completed0.completed = Completed0.completed,
  predicate Produces0.produces = Produces0.produces
end
module C02IterMut_AllZero_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = usize, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  val all_zero [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global))) : ()
    ensures { [#"../02_iter_mut.rs" 68 10 68 35] Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    ensures { [#"../02_iter_mut.rs" 69 0 69 69] forall i : (int) . 0 <= i && i < Seq.length (Model1.model v) -> UInt64.to_int (Seq.get (Model0.model ( ^ v)) i) = 0 }
    
end
module C02IterMut_AllZero
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = usize, axiom .
  clone C02IterMut_Impl0_Produces as Produces0 with type t = usize, function Model0.model = Model2.model
  clone C02IterMut_Impl0_ProducesTrans as ProducesTrans0 with type t = usize,
  predicate Produces0.produces = Produces0.produces, axiom .
  clone C02IterMut_Impl0_ProducesRefl as ProducesRefl0 with type t = usize,
  predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = usize, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  use mach.int.Int64
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.c02itermut_itermut usize
  clone C02IterMut_Impl1_IntoIter_Interface as IntoIter0 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone C02IterMut_Impl0_Completed as Completed0 with type t = usize, function Model0.model = Model3.model
  clone C02IterMut_Impl0_Next_Interface as Next0 with type t = usize,
  predicate Completed0.completed = Completed0.completed, predicate Resolve0.resolve = Resolve2.resolve,
  predicate Produces0.produces = Produces0.produces
  clone C02IterMut_IterMut_Interface as IterMut0 with type t = usize, function Model0.model = Model2.model,
  function Model1.model = Model0.model, function Model2.model = Model1.model
  let rec cfg all_zero [@cfg:stackify] [#"../02_iter_mut.rs" 70 0 70 35] (v : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global))) : ()
    ensures { [#"../02_iter_mut.rs" 68 10 68 35] Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    ensures { [#"../02_iter_mut.rs" 69 0 69 69] forall i : (int) . 0 <= i && i < Seq.length (Model1.model v) -> UInt64.to_int (Seq.get (Model0.model ( ^ v)) i) = 0 }
    
   =
  var _0 : ();
  var v_1 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var iter_4 : Type.c02itermut_itermut usize;
  var _5 : Type.c02itermut_itermut usize;
  var _6 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  ghost var iter_old_7 : Type.c02itermut_itermut usize;
  var _10 : ();
  ghost var produced_11 : Seq.seq (borrowed usize);
  var _14 : ();
  var _17 : ();
  var _18 : Type.core_option_option (borrowed usize);
  var _19 : borrowed (Type.c02itermut_itermut usize);
  var _20 : isize;
  var i_21 : borrowed usize;
  ghost var _22 : Seq.seq (borrowed usize);
  var _24 : ();
  var x_25 : borrowed usize;
  var _26 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _6) };
    _5 <- ([#"../02_iter_mut.rs" 72 13 72 24] IterMut0.iter_mut _6);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve v_1 };
    iter_4 <- ([#"../02_iter_mut.rs" 71 4 71 91] IntoIter0.into_iter _5);
    goto BB2
  }
  BB2 {
    _10 <- ();
    iter_old_7 <- ghost ([#"../02_iter_mut.rs" 71 4 71 91] iter_4);
    goto BB3
  }
  BB3 {
    _14 <- ();
    produced_11 <- ghost ([#"../02_iter_mut.rs" 71 4 71 91] Seq.empty );
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant structural { [#"../02_iter_mut.rs" 71 4 71 91] Produces0.produces iter_old_7 produced_11 iter_4 };
    invariant user { [#"../02_iter_mut.rs" 71 4 71 91] forall i : (int) . 0 <= i && i < Seq.length produced_11 -> UInt64.to_int ( ^ Seq.get produced_11 i) = 0 };
    _19 <- borrow_mut iter_4;
    iter_4 <-  ^ _19;
    _18 <- ([#"../02_iter_mut.rs" 71 4 71 91] Next0.next _19);
    goto BB6
  }
  BB6 {
    switch (_18)
      | Type.Core_Option_Option_None -> goto BB7
      | Type.Core_Option_Option_Some _ -> goto BB9
      end
  }
  BB7 {
    _0 <- ();
    return _0
  }
  BB8 {
    absurd
  }
  BB9 {
    assume { Resolve1.resolve i_21 };
    i_21 <- Type.core_option_option_Some_0 _18;
    _24 <- ();
    _22 <- ghost ([#"../02_iter_mut.rs" 71 4 71 91] Seq.snoc produced_11 i_21);
    goto BB10
  }
  BB10 {
    produced_11 <- _22;
    assume { Resolve1.resolve x_25 };
    x_25 <- i_21;
    x_25 <- { x_25 with current = (0 : usize) };
    assume { Resolve1.resolve x_25 };
    _17 <- ();
    goto BB5
  }
  
end
