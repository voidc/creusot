module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) int 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) int
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module C01ResolveUnsoundness_MakeVecOfSize_Interface
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = bool, type a = Type.alloc_alloc_global,
  axiom .
  val make_vec_of_size [@cfg:stackify] (n : int) : Type.alloc_vec_vec bool (Type.alloc_alloc_global)
    ensures { [#"../01_resolve_unsoundness.rs" 12 10 12 31] Seq.length (Model0.model result) = n }
    
end
module C01ResolveUnsoundness_MakeVecOfSize
  use seq.Seq
  use mach.int.Int
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = bool, type a = Type.alloc_alloc_global, axiom .
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = bool
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = bool, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = bool, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = bool, function Model0.model = Model0.model
  let rec cfg make_vec_of_size [@cfg:stackify] [#"../01_resolve_unsoundness.rs" 13 0 13 46] (n : int) : Type.alloc_vec_vec bool (Type.alloc_alloc_global)
    ensures { [#"../01_resolve_unsoundness.rs" 12 10 12 31] Seq.length (Model0.model result) = n }
    
   =
  var _0 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  var n_1 : int;
  var _2 : ();
  var out_4 : Type.alloc_vec_vec bool (Type.alloc_alloc_global);
  var i_5 : int;
  var _6 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : int;
  var _11 : int;
  var _12 : ();
  var _13 : borrowed (Type.alloc_vec_vec bool (Type.alloc_alloc_global));
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    out_4 <- ([#"../01_resolve_unsoundness.rs" 14 29 14 39] New0.new ());
    goto BB1
  }
  BB1 {
    i_5 <- (0 : int);
    goto BB2
  }
  BB2 {
    invariant loop_invariant { [#"../01_resolve_unsoundness.rs" 16 32 16 53] (0 : int) <= i_5 && i_5 <= n_1 };
    _10 <- i_5;
    _11 <- n_1;
    _9 <- ([#"../01_resolve_unsoundness.rs" 17 10 17 16] _10 <= _11);
    switch (_9)
      | False -> goto BB5
      | _ -> goto BB3
      end
  }
  BB3 {
    _13 <- borrow_mut out_4;
    out_4 <-  ^ _13;
    _12 <- ([#"../01_resolve_unsoundness.rs" 18 8 18 23] Push0.push _13 false);
    goto BB4
  }
  BB4 {
    i_5 <- ([#"../01_resolve_unsoundness.rs" 19 8 19 14] i_5 + (1 : int));
    _8 <- ();
    goto BB2
  }
  BB5 {
    _6 <- ();
    assume { Resolve0.resolve _0 };
    _0 <- out_4;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
