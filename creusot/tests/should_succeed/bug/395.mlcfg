module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module C395_SignedDivision_Interface
  val signed_division [@cfg:stackify] (_ : ()) : ()
end
module C395_SignedDivision
  use mach.int.Int
  use mach.int.Int32
  let rec cfg signed_division [@cfg:stackify] [#"../395.rs" 3 0 3 24] (_ : ()) : () =
  var _0 : ();
  var x_1 : int32;
  var y_2 : int32;
  var _3 : ();
  var _4 : bool;
  var _5 : bool;
  var _6 : int32;
  var _7 : int32;
  var _8 : int32;
  var _9 : bool;
  var _10 : bool;
  var _11 : bool;
  var _12 : bool;
  var _13 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- (10 : int32);
    y_2 <- (1 : int32);
    _7 <- x_1;
    _8 <- y_2;
    _9 <- ([#"../395.rs" 7 12 7 17] _8 = (0 : int32));
    assert { not _9 };
    goto BB1
  }
  BB1 {
    _10 <- ([#"../395.rs" 7 12 7 17] _8 = (-1 : int32));
    _11 <- ([#"../395.rs" 7 12 7 17] _7 = (-2147483648 : int32));
    _12 <- ([#"../395.rs" 7 12 7 17] _10 && _11);
    assert { not _12 };
    goto BB2
  }
  BB2 {
    _6 <- ([#"../395.rs" 7 12 7 17] _7 / _8);
    _5 <- ([#"../395.rs" 7 12 7 23] _6 = (10 : int32));
    _4 <- not _5;
    switch (_4)
      | False -> goto BB4
      | True -> goto BB3
      end
  }
  BB3 {
    absurd
  }
  BB4 {
    _3 <- ();
    _0 <- ();
    return _0
  }
  
end
