
module Quant_WithInvariant_Type
  type t_withinvariant  =
    | C_WithInvariant
    
end
module Quant_Impl0_Invariant_Stub
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  predicate invariant' [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant)
end
module Quant_Impl0_Invariant_Interface
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  predicate invariant' [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant)
end
module Quant_Impl0_Invariant
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  predicate invariant' [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant) =
    [#"../quant.rs" 10 8 10 12] true
  val invariant' [#"../quant.rs" 9 4 9 30] (self : Quant_WithInvariant_Type.t_withinvariant) : bool
    ensures { result = invariant' self }
    
end
module Quant_Forall_Stub
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  clone Quant_Impl0_Invariant_Stub as Invariant0
  function forall [#"../quant.rs" 16 0 16 15] (_1' : ()) : ()
end
module Quant_Forall_Interface
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  clone Quant_Impl0_Invariant_Stub as Invariant0
  function forall [#"../quant.rs" 16 0 16 15] (_1' : ()) : ()
  axiom forall_spec : forall _1' : () . [#"../quant.rs" 15 0 15 50] forall x : Quant_WithInvariant_Type.t_withinvariant . Invariant0.invariant' x -> Invariant0.invariant' x
end
module Quant_Forall
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  clone Quant_Impl0_Invariant_Stub as Invariant0
  function forall [#"../quant.rs" 16 0 16 15] (_1' : ()) : () =
    [#"../quant.rs" 14 0 14 6] ()
  val forall [#"../quant.rs" 16 0 16 15] (_1' : ()) : ()
    ensures { result = forall _1' }
    
  axiom forall_spec : forall _1' : () . [#"../quant.rs" 15 0 15 50] forall x : Quant_WithInvariant_Type.t_withinvariant . Invariant0.invariant' x -> Invariant0.invariant' x
end
module Quant_Forall_Impl
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  clone Quant_Impl0_Invariant as Invariant0
  let rec ghost function forall [#"../quant.rs" 16 0 16 15] (_1' : ()) : ()
    ensures { [#"../quant.rs" 15 0 15 50] forall x : Quant_WithInvariant_Type.t_withinvariant . Invariant0.invariant' x -> Invariant0.invariant' x }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../quant.rs" 14 0 14 6] ()
end
module Quant_Exists_Stub
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  clone Quant_Impl0_Invariant_Stub as Invariant0
  function exists [#"../quant.rs" 20 0 20 15] (_1' : ()) : ()
end
module Quant_Exists_Interface
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  clone Quant_Impl0_Invariant_Stub as Invariant0
  function exists [#"../quant.rs" 20 0 20 15] (_1' : ()) : ()
  axiom exists_spec : forall _1' : () . [#"../quant.rs" 19 0 19 42] exists _x : Quant_WithInvariant_Type.t_withinvariant . Invariant0.invariant' _x /\ true
end
module Quant_Exists
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  clone Quant_Impl0_Invariant_Stub as Invariant0
  function exists [#"../quant.rs" 20 0 20 15] (_1' : ()) : () =
    [#"../quant.rs" 18 0 18 6] ()
  val exists [#"../quant.rs" 20 0 20 15] (_1' : ()) : ()
    ensures { result = exists _1' }
    
  axiom exists_spec : forall _1' : () . [#"../quant.rs" 19 0 19 42] exists _x : Quant_WithInvariant_Type.t_withinvariant . Invariant0.invariant' _x /\ true
end
module Quant_Exists_Impl
  use Quant_WithInvariant_Type as Quant_WithInvariant_Type
  clone Quant_Impl0_Invariant as Invariant0
  let rec ghost function exists [#"../quant.rs" 20 0 20 15] (_1' : ()) : ()
    ensures { [#"../quant.rs" 19 0 19 42] exists _x : Quant_WithInvariant_Type.t_withinvariant . Invariant0.invariant' _x /\ true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../quant.rs" 18 0 18 6] ()
end
module Quant_Impl0
  
end
