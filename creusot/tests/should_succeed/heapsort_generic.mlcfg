module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_cmp_ordering  =
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module HeapsortGeneric_Parent_Interface
  use mach.int.Int
  function parent (i : int) : int
end
module HeapsortGeneric_Parent
  use mach.int.Int
  use mach.int.Int32
  function parent [#"../heapsort_generic.rs" 8 0 8 24] (i : int) : int =
    [#"../heapsort_generic.rs" 9 4 9 19] div (i + 1) 2 - 1
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Greater
end
module HeapsortGeneric_HeapFrag_Interface
  type t
  use seq.Seq
  use mach.int.Int
  predicate heap_frag (s : Seq.seq t) (start : int) (end' : int)
end
module HeapsortGeneric_HeapFrag
  type t
  use seq.Seq
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone HeapsortGeneric_Parent_Interface as Parent0
  predicate heap_frag [#"../heapsort_generic.rs" 13 0 13 66] (s : Seq.seq t) (start : int) (end' : int) =
    [#"../heapsort_generic.rs" 14 4 15 26] forall i : (int) . start <= Parent0.parent i && i < end' -> LeLog0.le_log (Seq.get s i) (Seq.get s (Parent0.parent i))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal)
end
module HeapsortGeneric_HeapFragMax_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone HeapsortGeneric_HeapFrag_Interface as HeapFrag0 with type t = t
  function heap_frag_max (s : Seq.seq t) (i : int) (end' : int) : ()
end
module HeapsortGeneric_HeapFragMax
  type t
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone HeapsortGeneric_HeapFrag_Interface as HeapFrag0 with type t = t
  clone HeapsortGeneric_Parent_Interface as Parent0
  function heap_frag_max [#"../heapsort_generic.rs" 23 0 23 58] (s : Seq.seq t) (i : int) (end' : int) : ()
  axiom def : forall s : Seq.seq t, i : int, end' : int . heap_frag_max s i end' = ([#"../heapsort_generic.rs" 24 4 26 5] if i > 0 then
    heap_frag_max s (Parent0.parent i) end'
  else
    ()
  )
  axiom heap_frag_max_spec : forall s : Seq.seq t, i : int, end' : int . ([#"../heapsort_generic.rs" 19 11 19 31] HeapFrag0.heap_frag s 0 end') -> ([#"../heapsort_generic.rs" 20 11 20 28] 0 <= i && i < end') -> ([#"../heapsort_generic.rs" 21 10 21 22] LeLog0.le_log (Seq.get s i) (Seq.get s 0))
end
module HeapsortGeneric_HeapFragMax_Impl
  type t
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone HeapsortGeneric_Parent as Parent0
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, function Parent0.parent = Parent0.parent,
  predicate LeLog0.le_log = LeLog0.le_log
  let rec ghost function heap_frag_max (s : Seq.seq t) (i : int) (end' : int) : ()
    requires {[#"../heapsort_generic.rs" 19 11 19 31] HeapFrag0.heap_frag s 0 end'}
    requires {[#"../heapsort_generic.rs" 20 11 20 28] 0 <= i && i < end'}
    ensures { [#"../heapsort_generic.rs" 21 10 21 22] LeLog0.le_log (Seq.get s i) (Seq.get s 0) }
    variant {[#"../heapsort_generic.rs" 22 10 22 11] i}
    
   =
    [#"../heapsort_generic.rs" 24 4 26 5] if i > 0 then let b' = Parent0.parent i in heap_frag_max s b' end' else ()
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) =
    Permut.permut self o 0 (Seq.length self)
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Std1_Cmp_Ord_Lt_Interface
  type self
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  val lt [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module CreusotContracts_Std1_Cmp_Ord_Lt
  type self
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  val lt [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LtLog0.lt_log self o }
    
end
module CreusotContracts_Std1_Cmp_Ord_Le_Interface
  type self
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  val le [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module CreusotContracts_Std1_Cmp_Ord_Le
  type self
  use prelude.Prelude
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  val le [@cfg:stackify] (self : self) (o : self) : bool
    ensures { result = LeLog0.le_log self o }
    
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Prelude.id self && Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module Alloc_Vec_Impl11
  type t
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module HeapsortGeneric_SiftDown_Interface
  type t
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone HeapsortGeneric_HeapFrag_Interface as HeapFrag0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val sift_down [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))) (start : usize) (end' : usize) : ()
    requires {[#"../heapsort_generic.rs" 29 11 29 43] HeapFrag0.heap_frag (Model0.model ( * v)) (UInt64.to_int start + 1) (UInt64.to_int end')}
    requires {[#"../heapsort_generic.rs" 30 11 30 24] UInt64.to_int start < UInt64.to_int end'}
    requires {[#"../heapsort_generic.rs" 31 11 31 30] UInt64.to_int end' <= Seq.length (Model0.model ( * v))}
    ensures { [#"../heapsort_generic.rs" 32 10 32 38] HeapFrag0.heap_frag (Model0.model ( ^ v)) (UInt64.to_int start) (UInt64.to_int end') }
    ensures { [#"../heapsort_generic.rs" 33 10 33 34] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { [#"../heapsort_generic.rs" 34 0 35 47] forall i : (int) . 0 <= i && i < UInt64.to_int start || UInt64.to_int end' <= i && i < Seq.length (Model1.model v) -> Seq.get (Model1.model v) i = Seq.get (Model0.model ( ^ v)) i }
    ensures { [#"../heapsort_generic.rs" 36 0 38 68] forall m : (t) . (forall j : (int) . UInt64.to_int start <= j && j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model1.model v) j) m) -> (forall j : (int) . UInt64.to_int start <= j && j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model0.model ( ^ v)) j) m) }
    
end
module HeapsortGeneric_SiftDown
  type t
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone HeapsortGeneric_Parent as Parent0
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, function Parent0.parent = Parent0.parent,
  predicate LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = t, axiom .
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq t,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = t, function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))
  clone CreusotContracts_Std1_Cmp_Ord_Lt_Interface as Lt0 with type self = t, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Std1_Cmp_Ord_Le_Interface as Le0 with type self = t, predicate LeLog0.le_log = LeLog0.le_log
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model, function Model1.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model, predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  let rec cfg sift_down [@cfg:stackify] [#"../heapsort_generic.rs" 39 0 39 62] (v : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))) (start : usize) (end' : usize) : ()
    requires {[#"../heapsort_generic.rs" 29 11 29 43] HeapFrag0.heap_frag (Model0.model ( * v)) (UInt64.to_int start + 1) (UInt64.to_int end')}
    requires {[#"../heapsort_generic.rs" 30 11 30 24] UInt64.to_int start < UInt64.to_int end'}
    requires {[#"../heapsort_generic.rs" 31 11 31 30] UInt64.to_int end' <= Seq.length (Model0.model ( * v))}
    ensures { [#"../heapsort_generic.rs" 32 10 32 38] HeapFrag0.heap_frag (Model0.model ( ^ v)) (UInt64.to_int start) (UInt64.to_int end') }
    ensures { [#"../heapsort_generic.rs" 33 10 33 34] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { [#"../heapsort_generic.rs" 34 0 35 47] forall i : (int) . 0 <= i && i < UInt64.to_int start || UInt64.to_int end' <= i && i < Seq.length (Model1.model v) -> Seq.get (Model1.model v) i = Seq.get (Model0.model ( ^ v)) i }
    ensures { [#"../heapsort_generic.rs" 36 0 38 68] forall m : (t) . (forall j : (int) . UInt64.to_int start <= j && j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model1.model v) j) m) -> (forall j : (int) . UInt64.to_int start <= j && j < UInt64.to_int end' -> LeLog0.le_log (Seq.get (Model0.model ( ^ v)) j) m) }
    
   =
  var _0 : ();
  var v_1 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var start_2 : usize;
  var end'_3 : usize;
  ghost var old_v_11 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _14 : ();
  var i_15 : usize;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  var _27 : bool;
  var _28 : usize;
  var _29 : usize;
  var _30 : usize;
  var _31 : bool;
  var _32 : ();
  var child_33 : usize;
  var _34 : usize;
  var _35 : usize;
  var _36 : ();
  var _37 : bool;
  var _38 : bool;
  var _39 : usize;
  var _40 : usize;
  var _41 : usize;
  var _42 : bool;
  var _43 : t;
  var _44 : t;
  var _45 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _46 : usize;
  var _47 : t;
  var _48 : t;
  var _49 : t;
  var _50 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _51 : usize;
  var _52 : usize;
  var _53 : ();
  var _54 : bool;
  var _55 : t;
  var _56 : t;
  var _57 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _58 : usize;
  var _59 : t;
  var _60 : t;
  var _61 : t;
  var _62 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _63 : usize;
  var _64 : ();
  var _65 : ();
  var _66 : borrowed (seq t);
  var _67 : borrowed (seq t);
  var _68 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _69 : usize;
  var _70 : usize;
  var _71 : usize;
  {
    v_1 <- v;
    start_2 <- start;
    end'_3 <- end';
    goto BB0
  }
  BB0 {
    _14 <- ();
    old_v_11 <- ghost ([#"../heapsort_generic.rs" 40 16 40 28] v_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_v_11 };
    i_15 <- start_2;
    goto BB2
  }
  BB2 {
    invariant proph_const { [#"../heapsort_generic.rs" 43 29 43 49]  ^ v_1 =  ^ old_v_11 };
    invariant permutation { [#"../heapsort_generic.rs" 44 29 44 64] PermutationOf0.permutation_of (Model1.model v_1) (Model1.model old_v_11) };
    invariant i_bounds { [#"../heapsort_generic.rs" 45 26 45 51] UInt64.to_int start_2 <= UInt64.to_int i_15 && UInt64.to_int i_15 < UInt64.to_int end'_3 };
    invariant unchanged { [#"../heapsort_generic.rs" 43 4 43 51] forall j : (int) . 0 <= j && j < UInt64.to_int start_2 || UInt64.to_int end'_3 <= j && j < Seq.length (Model1.model v_1) -> Seq.get (Model1.model old_v_11) j = Seq.get (Model1.model v_1) j };
    invariant keep_bound { [#"../heapsort_generic.rs" 43 4 43 51] forall m : (t) . (forall j : (int) . UInt64.to_int start_2 <= j && j < UInt64.to_int end'_3 -> LeLog0.le_log (Seq.get (Model1.model old_v_11) j) m) -> (forall j : (int) . UInt64.to_int start_2 <= j && j < UInt64.to_int end'_3 -> LeLog0.le_log (Seq.get (Model1.model v_1) j) m) };
    invariant heap { [#"../heapsort_generic.rs" 43 4 43 51] forall j : (int) . UInt64.to_int start_2 <= Parent0.parent j && j < UInt64.to_int end'_3 && UInt64.to_int i_15 <> Parent0.parent j -> LeLog0.le_log (Seq.get (Model1.model v_1) j) (Seq.get (Model1.model v_1) (Parent0.parent j)) };
    invariant hole_left { [#"../heapsort_generic.rs" 43 4 43 51] let c = 2 * UInt64.to_int i_15 + 1 in c < UInt64.to_int end'_3 && UInt64.to_int start_2 <= Parent0.parent (UInt64.to_int i_15) -> LeLog0.le_log (Seq.get (Model1.model v_1) c) (Seq.get (Model1.model v_1) (Parent0.parent (Parent0.parent c))) };
    invariant hole_right { [#"../heapsort_generic.rs" 43 4 43 51] let c = 2 * UInt64.to_int i_15 + 2 in c < UInt64.to_int end'_3 && UInt64.to_int start_2 <= Parent0.parent (UInt64.to_int i_15) -> LeLog0.le_log (Seq.get (Model1.model v_1) c) (Seq.get (Model1.model v_1) (Parent0.parent (Parent0.parent c))) };
    _28 <- i_15;
    _30 <- end'_3;
    _31 <- ([#"../heapsort_generic.rs" 56 16 56 23] (2 : usize) = (0 : usize));
    assert { not _31 };
    goto BB3
  }
  BB3 {
    _29 <- ([#"../heapsort_generic.rs" 56 16 56 23] _30 / (2 : usize));
    _27 <- ([#"../heapsort_generic.rs" 56 11 56 23] _28 >= _29);
    switch (_27)
      | False -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    goto BB22
  }
  BB5 {
    _26 <- ();
    _35 <- i_15;
    _34 <- ([#"../heapsort_generic.rs" 60 24 60 29] (2 : usize) * _35);
    child_33 <- ([#"../heapsort_generic.rs" 60 24 60 33] _34 + (1 : usize));
    _40 <- child_33;
    _39 <- ([#"../heapsort_generic.rs" 61 11 61 20] _40 + (1 : usize));
    _41 <- end'_3;
    _38 <- ([#"../heapsort_generic.rs" 61 11 61 26] _39 < _41);
    switch (_38)
      | False -> goto BB6
      | _ -> goto BB7
      end
  }
  BB6 {
    _37 <- false;
    goto BB8
  }
  BB7 {
    _45 <-  * v_1;
    _46 <- child_33;
    _44 <- ([#"../heapsort_generic.rs" 61 30 61 38] Index0.index _45 _46);
    goto BB9
  }
  BB8 {
    switch (_37)
      | False -> goto BB13
      | _ -> goto BB12
      end
  }
  BB9 {
    _43 <- _44;
    assume { Resolve2.resolve _44 };
    _50 <-  * v_1;
    _52 <- child_33;
    _51 <- ([#"../heapsort_generic.rs" 61 45 61 54] _52 + (1 : usize));
    _49 <- ([#"../heapsort_generic.rs" 61 43 61 55] Index0.index _50 _51);
    goto BB10
  }
  BB10 {
    _48 <- _49;
    assume { Resolve2.resolve _49 };
    _47 <- _48;
    assume { Resolve2.resolve _48 };
    _42 <- ([#"../heapsort_generic.rs" 61 30 61 56] Lt0.lt _43 _47);
    goto BB11
  }
  BB11 {
    _37 <- _42;
    goto BB8
  }
  BB12 {
    child_33 <- ([#"../heapsort_generic.rs" 62 12 62 22] child_33 + (1 : usize));
    _36 <- ();
    goto BB14
  }
  BB13 {
    _36 <- ();
    goto BB14
  }
  BB14 {
    _57 <-  * v_1;
    _58 <- child_33;
    _56 <- ([#"../heapsort_generic.rs" 64 11 64 19] Index0.index _57 _58);
    goto BB15
  }
  BB15 {
    _55 <- _56;
    assume { Resolve2.resolve _56 };
    _62 <-  * v_1;
    _63 <- i_15;
    _61 <- ([#"../heapsort_generic.rs" 64 24 64 28] Index0.index _62 _63);
    goto BB16
  }
  BB16 {
    _60 <- _61;
    assume { Resolve2.resolve _61 };
    _59 <- _60;
    assume { Resolve2.resolve _60 };
    _54 <- ([#"../heapsort_generic.rs" 64 11 64 29] Le0.le _55 _59);
    goto BB17
  }
  BB17 {
    switch (_54)
      | False -> goto BB19
      | _ -> goto BB18
      end
  }
  BB18 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    goto BB22
  }
  BB19 {
    _53 <- ();
    _68 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _68) };
    _67 <- ([#"../heapsort_generic.rs" 67 8 67 24] DerefMut0.deref_mut _68);
    goto BB20
  }
  BB20 {
    _66 <- borrow_mut ( * _67);
    _67 <- { _67 with current = ( ^ _66) };
    _69 <- i_15;
    _70 <- child_33;
    _65 <- ([#"../heapsort_generic.rs" 67 8 67 24] Swap0.swap _66 _69 _70);
    goto BB21
  }
  BB21 {
    assume { Resolve3.resolve _67 };
    _71 <- child_33;
    i_15 <- _71;
    _25 <- ();
    goto BB2
  }
  BB22 {
    return _0
  }
  
end
module HeapsortGeneric_SortedRange_Interface
  type t
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module HeapsortGeneric_SortedRange
  type t
  use seq.Seq
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = t
  predicate sorted_range [#"../heapsort_generic.rs" 73 0 73 58] (s : Seq.seq t) (l : int) (u : int) =
    [#"../heapsort_generic.rs" 74 4 76 5] forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> LeLog0.le_log (Seq.get s i) (Seq.get s j)
end
module HeapsortGeneric_Sorted_Interface
  type t
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module HeapsortGeneric_Sorted
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone HeapsortGeneric_SortedRange_Interface as SortedRange0 with type t = t
  predicate sorted [#"../heapsort_generic.rs" 80 0 80 36] (s : Seq.seq t) =
    [#"../heapsort_generic.rs" 82 8 82 35] SortedRange0.sorted_range s 0 (Seq.length s)
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module HeapsortGeneric_HeapSort_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface as PermutationOf0 with type t = t
  clone HeapsortGeneric_Sorted_Interface as Sorted0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val heap_sort [@cfg:stackify] (v : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))) : ()
    requires {[#"../heapsort_generic.rs" 86 11 86 42] Seq.length (Model0.model v) < div 18446744073709551615 2}
    ensures { [#"../heapsort_generic.rs" 87 10 87 21] Sorted0.sorted (Model1.model ( ^ v)) }
    ensures { [#"../heapsort_generic.rs" 88 10 88 34] PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model0.model v) }
    
end
module HeapsortGeneric_HeapSort
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int32
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = t,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = t,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = t,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = t,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = t,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone HeapsortGeneric_SortedRange as SortedRange0 with type t = t, predicate LeLog0.le_log = LeLog0.le_log
  clone HeapsortGeneric_Sorted as Sorted0 with type t = t,
  predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone HeapsortGeneric_Parent as Parent0
  clone HeapsortGeneric_HeapFrag as HeapFrag0 with type t = t, function Parent0.parent = Parent0.parent,
  predicate LeLog0.le_log = LeLog0.le_log
  clone HeapsortGeneric_HeapFragMax as HeapFragMax0 with type t = t,
  predicate HeapFrag0.heap_frag = HeapFrag0.heap_frag, predicate LeLog0.le_log = LeLog0.le_log,
  function Parent0.parent = Parent0.parent, axiom .
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.alloc_vec_vec t (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq t,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = t, function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model, function Model1.model = Model1.model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Type.alloc_alloc_global,
  function Model0.model = Model1.model
  clone HeapsortGeneric_SiftDown_Interface as SiftDown0 with type t = t, function Model0.model = Model1.model,
  predicate HeapFrag0.heap_frag = HeapFrag0.heap_frag, function Model1.model = Model0.model,
  predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of, predicate LeLog0.le_log = LeLog0.le_log
  let rec cfg heap_sort [@cfg:stackify] [#"../heapsort_generic.rs" 89 0 89 40] (v : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global))) : ()
    requires {[#"../heapsort_generic.rs" 86 11 86 42] Seq.length (Model0.model v) < div 18446744073709551615 2}
    ensures { [#"../heapsort_generic.rs" 87 10 87 21] Sorted0.sorted (Model1.model ( ^ v)) }
    ensures { [#"../heapsort_generic.rs" 88 10 88 34] PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model0.model v) }
    
   =
  var _0 : ();
  var v_1 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  ghost var old_v_5 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _8 : ();
  var start_9 : usize;
  var _10 : usize;
  var _11 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _12 : bool;
  var _13 : ();
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : ();
  var _22 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _23 : usize;
  var _24 : usize;
  var _25 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _26 : ();
  var _27 : ();
  var _28 : ();
  var end'_29 : usize;
  var _30 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _37 : bool;
  var _38 : usize;
  var _39 : ();
  var _40 : borrowed (seq t);
  var _41 : borrowed (seq t);
  var _42 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _43 : usize;
  var _44 : ();
  var _46 : ();
  var _47 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _48 : usize;
  var _49 : ();
  var _50 : ();
  var _51 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _8 <- ();
    old_v_5 <- ghost ([#"../heapsort_generic.rs" 90 16 90 28] v_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_v_5 };
    _11 <-  * v_1;
    _10 <- ([#"../heapsort_generic.rs" 92 20 92 27] Len0.len _11);
    goto BB2
  }
  BB2 {
    _12 <- ([#"../heapsort_generic.rs" 92 20 92 31] (2 : usize) = (0 : usize));
    assert { not _12 };
    goto BB3
  }
  BB3 {
    start_9 <- ([#"../heapsort_generic.rs" 92 20 92 31] _10 / (2 : usize));
    goto BB4
  }
  BB4 {
    invariant permutation { [#"../heapsort_generic.rs" 93 29 93 64] PermutationOf0.permutation_of (Model0.model v_1) (Model0.model old_v_5) };
    invariant proph_const { [#"../heapsort_generic.rs" 94 29 94 49]  ^ v_1 =  ^ old_v_5 };
    invariant heap { [#"../heapsort_generic.rs" 95 22 95 55] HeapFrag0.heap_frag (Model0.model v_1) (UInt64.to_int start_9) (Seq.length (Model0.model v_1)) };
    invariant start_bound { [#"../heapsort_generic.rs" 96 29 96 51] UInt64.to_int start_9 <= div (Seq.length (Model0.model v_1)) 2 };
    _20 <- start_9;
    _19 <- ([#"../heapsort_generic.rs" 97 10 97 19] _20 > (0 : usize));
    switch (_19)
      | False -> goto BB8
      | _ -> goto BB5
      end
  }
  BB5 {
    start_9 <- ([#"../heapsort_generic.rs" 98 8 98 18] start_9 - (1 : usize));
    _22 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _22) };
    _23 <- start_9;
    _25 <-  * _22;
    _24 <- ([#"../heapsort_generic.rs" 99 28 99 35] Len0.len _25);
    goto BB6
  }
  BB6 {
    _21 <- ([#"../heapsort_generic.rs" 99 8 99 36] SiftDown0.sift_down _22 _23 _24);
    goto BB7
  }
  BB7 {
    _18 <- ();
    goto BB4
  }
  BB8 {
    _13 <- ();
    _30 <-  * v_1;
    end'_29 <- ([#"../heapsort_generic.rs" 102 18 102 25] Len0.len _30);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant end_bound { [#"../heapsort_generic.rs" 103 27 103 45] UInt64.to_int end'_29 <= Seq.length (Model0.model v_1) };
    invariant permutation { [#"../heapsort_generic.rs" 104 29 104 64] PermutationOf0.permutation_of (Model0.model v_1) (Model0.model old_v_5) };
    invariant proph_const { [#"../heapsort_generic.rs" 105 29 105 49]  ^ v_1 =  ^ old_v_5 };
    invariant heap { [#"../heapsort_generic.rs" 106 22 106 44] HeapFrag0.heap_frag (Model0.model v_1) 0 (UInt64.to_int end'_29) };
    invariant sorted { [#"../heapsort_generic.rs" 107 24 107 58] SortedRange0.sorted_range (Model0.model v_1) (UInt64.to_int end'_29) (Seq.length (Model0.model v_1)) };
    invariant heap_le { [#"../heapsort_generic.rs" 103 4 103 47] forall j : (int) . forall i : (int) . 0 <= i && i < UInt64.to_int end'_29 && UInt64.to_int end'_29 <= j && j < Seq.length (Model0.model v_1) -> LeLog0.le_log (Seq.get (Model0.model v_1) i) (Seq.get (Model0.model v_1) j) };
    _38 <- end'_29;
    _37 <- ([#"../heapsort_generic.rs" 110 10 110 17] _38 > (1 : usize));
    switch (_37)
      | False -> goto BB15
      | _ -> goto BB11
      end
  }
  BB11 {
    end'_29 <- ([#"../heapsort_generic.rs" 111 8 111 16] end'_29 - (1 : usize));
    _42 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _42) };
    _41 <- ([#"../heapsort_generic.rs" 112 8 112 22] DerefMut0.deref_mut _42);
    goto BB12
  }
  BB12 {
    _40 <- borrow_mut ( * _41);
    _41 <- { _41 with current = ( ^ _40) };
    _43 <- end'_29;
    _39 <- ([#"../heapsort_generic.rs" 112 8 112 22] Swap0.swap _40 (0 : usize) _43);
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve _41 };
    assert { [#"../heapsort_generic.rs" 114 12 114 47] let _ = HeapFragMax0.heap_frag_max (Model0.model v_1) 0 (UInt64.to_int end'_29) in forall j : (int) . forall i : (int) . 0 <= i && i < UInt64.to_int end'_29 && UInt64.to_int end'_29 <= j && j < Seq.length (Model0.model v_1) -> LeLog0.le_log (Seq.get (Model0.model v_1) i) (Seq.get (Model0.model v_1) j) };
    _44 <- ();
    _47 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _47) };
    _48 <- end'_29;
    _46 <- ([#"../heapsort_generic.rs" 118 8 118 28] SiftDown0.sift_down _47 (0 : usize) _48);
    goto BB14
  }
  BB14 {
    _18 <- ();
    goto BB10
  }
  BB15 {
    assume { Resolve2.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
