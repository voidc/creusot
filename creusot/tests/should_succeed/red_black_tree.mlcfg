module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type redblacktree_color  =
    | RedBlackTree_Color_Red
    | RedBlackTree_Color_Black
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type redblacktree_node 'k 'v =
    | RedBlackTree_Node (redblacktree_tree 'k 'v) (redblacktree_color) 'k 'v (redblacktree_tree 'k 'v)
    with redblacktree_tree 'k 'v =
    | RedBlackTree_Tree (core_option_option (redblacktree_node 'k 'v))
    
  let function redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v =
    match (self) with
      | RedBlackTree_Node a _ _ _ _ -> a
      end
  let function redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k =
    match (self) with
      | RedBlackTree_Node _ _ a _ _ -> a
      end
  let function redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v =
    match (self) with
      | RedBlackTree_Node _ _ _ _ a -> a
      end
  let function redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v =
    match (self) with
      | RedBlackTree_Node _ _ _ a _ -> a
      end
  let function redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color =
    match (self) with
      | RedBlackTree_Node _ a _ _ _ -> a
      end
  let function redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
    
   =
    match (self) with
      | RedBlackTree_Tree a -> a
      end
  type core_cmp_ordering  =
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
end
module RedBlackTree_Impl14_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
end
module RedBlackTree_Impl14_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] [#"../red_black_tree.rs" 8 9 8 14] (self : Type.redblacktree_color) : Type.redblacktree_color
    
   =
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMapping_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  predicate has_mapping (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl0_HasMapping
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping [#"../red_black_tree.rs" 31 4 31 53] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> false
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> has_mapping left k v || has_mapping right k v || k = Model0.model key && v = val'
      end
end
module RedBlackTree_Impl0_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl0_SameMappings
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate same_mappings [#"../red_black_tree.rs" 42 4 42 43] (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 43 8 45 9] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl0_ModelAcc_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
end
module RedBlackTree_Impl0_ModelAcc
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc [#"../red_black_tree.rs" 49 4 49 82] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 51 12 58 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> accu
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc right accu2
      end
end
module RedBlackTree_Impl0_ModelAccHasMapping_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_ModelAccHasMapping
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 65 4 65 81] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 67 12 75 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
  axiom model_acc_has_mapping_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . [#"../red_black_tree.rs" 63 4 64 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k || (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v && HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  let rec ghost function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    ensures { [#"../red_black_tree.rs" 63 4 64 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k || (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v && HasMapping0.has_mapping self k v) }
    
   =
    [#"../red_black_tree.rs" 67 12 75 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module RedBlackTree_Impl4_BstInvariantHere_Interface
  type k
  type v
  use Type
  predicate bst_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl4_BstInvariantHere
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate bst_invariant_here [#"../red_black_tree.rs" 170 4 170 39] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 172 12 173 88] (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left self) k v -> LtLog0.lt_log k (Model0.model (Type.redblacktree_node_Node_key self))) && (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right self) k v -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key self)) k)
end
module RedBlackTree_Impl5_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl5_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 190 4 190 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 192 12 198 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in BstInvariantHere0.bst_invariant_here node && bst_invariant left && bst_invariant right
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_HasMappingModelAcc
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model_acc [#"../red_black_tree.rs" 82 4 84 29] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 87 12 96 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
  axiom has_mapping_model_acc_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 80 15 80 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 81 4 81 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  let rec ghost function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 80 15 80 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 81 4 81 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v }
    
   =
    [#"../red_black_tree.rs" 87 12 96 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
end
module RedBlackTree_Impl3_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl3_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 158 4 158 35] (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 159 20 159 54] ModelAcc0.model_acc self (Const.const (Type.Core_Option_Option_None))
end
module RedBlackTree_Impl3_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl3
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl3_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_tree k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_tree k v,
  type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMappingModel_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
end
module RedBlackTree_Impl0_HasMappingModel
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc_Interface as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model [#"../red_black_tree.rs" 103 4 105 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 108 12 108 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
  axiom has_mapping_model_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 101 15 101 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 102 4 102 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v))
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  type v
  use map.Map
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  let rec ghost function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 101 15 101 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 102 4 102 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v) }
    
   =
    [#"../red_black_tree.rs" 108 12 108 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
end
module RedBlackTree_Impl0_HasMappingInj_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_inj (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
end
module RedBlackTree_Impl0_HasMappingInj
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Map
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMappingModel_Interface as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_inj [#"../red_black_tree.rs" 118 4 120 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    
   =
    [#"../red_black_tree.rs" 122 8 127 9] if Map.get (Model0.model self) k = Type.Core_Option_Option_Some v1 && Map.get (Model0.model self) k = Type.Core_Option_Option_Some v2 then
      ()
    else
      HasMappingModel0.has_mapping_model self k
    
  axiom has_mapping_inj_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 114 15 114 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 115 15 115 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 116 15 116 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 117 14 117 22] v1 = v2)
end
module RedBlackTree_Impl0_HasMappingInj_Impl
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  let rec ghost function has_mapping_inj (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 114 15 114 35] BstInvariant0.bst_invariant self}
    requires {[#"../red_black_tree.rs" 115 15 115 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 116 15 116 38] HasMapping0.has_mapping self k v2}
    ensures { [#"../red_black_tree.rs" 117 14 117 22] v1 = v2 }
    
   =
    [#"../red_black_tree.rs" 122 8 127 9] if (let a = let a' = Model0.model self in Map.get a' k in pure {a = Type.Core_Option_Option_Some v1}) && (let a = let a' = Model0.model self in Map.get a' k in pure {a = Type.Core_Option_Option_Some v2}) then
      ()
    else
      HasMappingModel0.has_mapping_model self k
    
end
module RedBlackTree_Impl1_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
end
module RedBlackTree_Impl1_SameMappings
  type k
  type v
  use Type
  clone RedBlackTree_Impl0_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  predicate same_mappings [#"../red_black_tree.rs" 133 4 133 43] (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 134 8 139 9] forall ot : (Type.redblacktree_tree k v) . forall st : (Type.redblacktree_tree k v) . match (st) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> self = x
      | _ -> false
      end && match (ot) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> o = x
      | _ -> false
      end -> SameMappings0.same_mappings st ot
end
module RedBlackTree_Impl2_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl2_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 147 4 147 35] (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 148 8 150 9] ModelAcc0.model_acc (Type.redblacktree_node_Node_right self) (Map.set (Model0.model (Type.redblacktree_node_Node_left self)) (Model1.model (Type.redblacktree_node_Node_key self)) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)))
end
module RedBlackTree_Impl4_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl4_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 178 4 178 34] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 179 8 181 9] BstInvariantHere0.bst_invariant_here self && BstInvariant0.bst_invariant (Type.redblacktree_node_Node_left self) && BstInvariant0.bst_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl6_Color_Interface
  type k
  type v
  use Type
  function color (self : Type.redblacktree_tree k v) : Type.redblacktree_color
end
module RedBlackTree_Impl6_Color
  type k
  type v
  use Type
  function color [#"../red_black_tree.rs" 207 4 207 27] (self : Type.redblacktree_tree k v) : Type.redblacktree_color =
    [#"../red_black_tree.rs" 208 8 211 9] match (Type.redblacktree_tree_Tree_node self) with
      | Type.Core_Option_Option_Some (Type.RedBlackTree_Node _ color _ _ _) -> color
      | _ -> Type.RedBlackTree_Color_Black
      end
end
module RedBlackTree_Impl7_ColorInvariantHere_Interface
  type k
  type v
  use Type
  predicate color_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl7_ColorInvariantHere
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  predicate color_invariant_here [#"../red_black_tree.rs" 230 4 230 41] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 231 20 231 101] Color0.color (Type.redblacktree_node_Node_right self) = Type.RedBlackTree_Color_Black && (Type.redblacktree_node_Node_color self = Type.RedBlackTree_Color_Red -> Color0.color (Type.redblacktree_node_Node_left self) = Type.RedBlackTree_Color_Black)
end
module RedBlackTree_Impl6_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl6_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl7_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 215 4 215 36] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 217 12 223 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in ColorInvariantHere0.color_invariant_here node && color_invariant left && color_invariant right
      end
end
module RedBlackTree_Impl7_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl7_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 235 4 235 36] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 234 4 234 16] ColorInvariantHere0.color_invariant_here self && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left self) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl9_HasHeightRec_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  predicate has_height_rec (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl9_HasHeightRec
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  predicate has_height_rec [#"../red_black_tree.rs" 262 4 262 43] (self : Type.redblacktree_tree k v) (h : int) =
    [#"../red_black_tree.rs" 264 12 270 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> h = 0
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color _ _ right)) -> let h = if color = Type.RedBlackTree_Color_Red then
        h
      else
        h - 1
       in has_height_rec left h && has_height_rec right h
      end
  axiom has_height_rec_spec : forall self : Type.redblacktree_tree k v, h : int . [#"../red_black_tree.rs" 261 4 261 33] has_height_rec self h -> h >= 0
end
module RedBlackTree_Impl9_HasHeightRec_Impl
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  let rec ghost function has_height_rec (self : Type.redblacktree_tree k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 261 4 261 33] result -> h >= 0 }
    
   =
    [#"../red_black_tree.rs" 264 12 270 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> pure {h = 0}
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color _ _ right)) -> let h = if pure {color = Type.RedBlackTree_Color_Red} then
        h
      else
        h - 1
       in has_height_rec left h && has_height_rec right h
      end
end
module RedBlackTree_Impl8_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  predicate has_height (self : Type.redblacktree_node k v) (h : int)
end
module RedBlackTree_Impl8_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  use mach.int.Int32
  predicate has_height [#"../red_black_tree.rs" 247 4 247 39] (self : Type.redblacktree_node k v) (h : int) =
    [#"../red_black_tree.rs" 249 12 254 13] match (self) with
      | Type.RedBlackTree_Node left color _ _ right -> let h = if color = Type.RedBlackTree_Color_Red then
        h
      else
        h - 1
       in HasHeightRec0.has_height_rec left h && HasHeightRec0.has_height_rec right h
      end
  axiom has_height_spec : forall self : Type.redblacktree_node k v, h : int . [#"../red_black_tree.rs" 244 4 246 48] forall node : (Type.redblacktree_node k v) . forall tree : (Type.redblacktree_tree k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node && self = node -> has_height self h = HasHeightRec0.has_height_rec tree h
end
module RedBlackTree_Impl8_HasHeight_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  let rec ghost function has_height (self : Type.redblacktree_node k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 244 4 246 48] forall node : (Type.redblacktree_node k v) . forall tree : (Type.redblacktree_tree k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node && self = node -> result = HasHeightRec0.has_height_rec tree h }
    
   =
    [#"../red_black_tree.rs" 249 12 254 13] match (self) with
      | Type.RedBlackTree_Node left color _ _ right -> let h = if pure {color = Type.RedBlackTree_Color_Red} then
        h
      else
        h - 1
       in HasHeightRec0.has_height_rec left h && HasHeightRec0.has_height_rec right h
      end
end
module RedBlackTree_Impl9_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  predicate has_height (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl9_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  predicate has_height [#"../red_black_tree.rs" 277 4 277 39] (self : Type.redblacktree_tree k v) (h : int) =
    [#"../red_black_tree.rs" 278 8 278 30] HasHeightRec0.has_height_rec self h
  axiom has_height_spec : forall self : Type.redblacktree_tree k v, h : int . ([#"../red_black_tree.rs" 276 4 276 102] forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node -> has_height self h = HasHeight0.has_height node h) && ([#"../red_black_tree.rs" 275 4 275 56] Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> has_height self h = (h = 0))
end
module RedBlackTree_Impl9_HasHeight_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  let rec ghost function has_height (self : Type.redblacktree_tree k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 275 4 275 56] Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> result = (h = 0) }
    ensures { [#"../red_black_tree.rs" 276 4 276 102] forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node -> result = HasHeight0.has_height node h }
    
   =
    [#"../red_black_tree.rs" 278 8 278 30] HasHeightRec0.has_height_rec self h
end
module RedBlackTree_Impl10_Invariant_Interface
  type k
  type v
  use Type
  predicate invariant' (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl10_Invariant
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  predicate invariant' [#"../red_black_tree.rs" 289 4 289 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 290 8 293 9] BstInvariant0.bst_invariant self && ColorInvariant0.color_invariant self && Color0.color self = Type.RedBlackTree_Color_Black && (exists h : (int) . HasHeight0.has_height self h)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module RedBlackTree_Impl11_IsRed_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 300 14 300 45] result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
end
module RedBlackTree_Impl11_IsRed
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg is_red [@cfg:stackify] [#"../red_black_tree.rs" 301 4 301 28] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 300 14 300 45] result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
   =
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _3 : isize;
  var _4 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Type.redblacktree_tree_Tree_node self_1)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (Type.redblacktree_node_Node_color (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node self_1)))
      | Type.RedBlackTree_Color_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface
  type self
  function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog
  type self
  function default_log (_ : ()) : self
end
module Core_Mem_Take_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module Core_Mem_Take
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog_Interface
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t =
    Type.Core_Option_Option_None
end
module CreusotContracts_Std1_Option_Impl0
  type t
end
module RedBlackTree_Impl12_RotateRight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 313 15 313 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 314 15 314 42] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 315 14 315 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 316 14 316 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 317 14 317 42] Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 318 14 318 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 319 4 321 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { [#"../red_black_tree.rs" 322 4 322 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 323 14 323 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) }
    
end
module RedBlackTree_Impl12_RotateRight
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  let rec cfg rotate_right [@cfg:stackify] [#"../red_black_tree.rs" 324 4 324 30] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 313 15 313 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 314 15 314 42] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 315 14 315 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 316 14 316 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 317 14 317 42] Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 318 14 318 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 319 4 321 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { [#"../red_black_tree.rs" 322 4 322 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 323 14 323 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_11 : borrowed (Type.redblacktree_node k v);
  var _14 : ();
  var x_15 : Type.redblacktree_node k v;
  var _16 : Type.core_option_option (Type.redblacktree_node k v);
  var _17 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _18 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _19 : isize;
  var x_20 : Type.redblacktree_node k v;
  var _21 : ();
  var _22 : ();
  var _23 : borrowed (Type.redblacktree_tree k v);
  var _24 : borrowed (Type.redblacktree_tree k v);
  var _25 : borrowed (Type.redblacktree_tree k v);
  var _26 : borrowed (Type.redblacktree_tree k v);
  var _27 : ();
  var _28 : borrowed (Type.redblacktree_node k v);
  var _29 : borrowed (Type.redblacktree_node k v);
  var _30 : borrowed (Type.redblacktree_node k v);
  var _31 : Type.redblacktree_color;
  var _32 : Type.redblacktree_color;
  var _33 : ();
  var _35 : ();
  var _37 : Type.redblacktree_tree k v;
  var _38 : Type.core_option_option (Type.redblacktree_node k v);
  var _39 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _14 <- ();
    old_self_11 <- ghost ([#"../red_black_tree.rs" 325 23 325 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_11 };
    _18 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _18)) b c d e) };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _16 <- ([#"../red_black_tree.rs" 333 34 333 69] Take0.take _17);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _18 };
    switch (_16)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _16 };
    absurd
  }
  BB5 {
    assume { Resolve4.resolve x_20 };
    x_20 <- Type.core_option_option_Some_0 _16;
    assume { Resolve4.resolve x_15 };
    x_15 <- x_20;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _16 };
    _24 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _24) b c d e) };
    _23 <- borrow_mut ( * _24);
    _24 <- { _24 with current = ( ^ _23) };
    _26 <- borrow_mut (Type.redblacktree_node_Node_right x_15);
    x_15 <- (let Type.RedBlackTree_Node a b c d e = x_15 in Type.RedBlackTree_Node a b c d ( ^ _26));
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _22 <- ([#"../red_black_tree.rs" 343 8 343 52] Swap0.swap _23 _25);
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve _24 };
    assume { Resolve5.resolve _26 };
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _30 <- borrow_mut x_15;
    x_15 <-  ^ _30;
    _29 <- borrow_mut ( * _30);
    _30 <- { _30 with current = ( ^ _29) };
    _27 <- ([#"../red_black_tree.rs" 349 8 349 36] Swap1.swap _28 _29);
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve _30 };
    _31 <- Type.redblacktree_node_Node_color x_15;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _31 c d e) };
    _32 <- Type.RedBlackTree_Color_Red;
    x_15 <- (let Type.RedBlackTree_Node a b c d e = x_15 in Type.RedBlackTree_Node a _32 c d e);
    assert { [#"../red_black_tree.rs" 357 8 357 78] HasMapping0.has_mapping (Type.redblacktree_node_Node_left ( * old_self_11)) (Model0.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _33 <- ();
    assert { [#"../red_black_tree.rs" 358 8 358 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left x_15) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_left ( * old_self_11)) k v };
    goto BB10
  }
  BB10 {
    _35 <- ();
    assume { Resolve4.resolve _39 };
    _39 <- x_15;
    _38 <- Type.Core_Option_Option_Some _39;
    goto BB11
  }
  BB11 {
    _37 <- Type.RedBlackTree_Tree _38;
    goto BB12
  }
  BB12 {
    assume { Resolve7.resolve (Type.redblacktree_node_Node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d _37) };
    goto BB13
  }
  BB13 {
    assume { Resolve2.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl12_RotateLeft_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 367 15 367 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 368 15 368 43] Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 369 14 369 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 370 14 370 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 371 14 371 41] Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 372 14 372 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 373 4 375 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { [#"../red_black_tree.rs" 376 4 376 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 377 14 377 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    
end
module RedBlackTree_Impl12_RotateLeft
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  let rec cfg rotate_left [@cfg:stackify] [#"../red_black_tree.rs" 378 4 378 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 367 15 367 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 368 15 368 43] Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 369 14 369 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 370 14 370 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 371 14 371 41] Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 372 14 372 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 373 4 375 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { [#"../red_black_tree.rs" 376 4 376 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 377 14 377 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_11 : borrowed (Type.redblacktree_node k v);
  var _14 : ();
  var x_15 : Type.redblacktree_node k v;
  var _16 : Type.core_option_option (Type.redblacktree_node k v);
  var _17 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _18 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _19 : isize;
  var x_20 : Type.redblacktree_node k v;
  var _21 : ();
  var _22 : ();
  var _23 : borrowed (Type.redblacktree_tree k v);
  var _24 : borrowed (Type.redblacktree_tree k v);
  var _25 : borrowed (Type.redblacktree_tree k v);
  var _26 : borrowed (Type.redblacktree_tree k v);
  var _27 : ();
  var _28 : borrowed (Type.redblacktree_node k v);
  var _29 : borrowed (Type.redblacktree_node k v);
  var _30 : borrowed (Type.redblacktree_node k v);
  var _31 : Type.redblacktree_color;
  var _32 : Type.redblacktree_color;
  var _33 : ();
  var _35 : ();
  var _37 : Type.redblacktree_tree k v;
  var _38 : Type.core_option_option (Type.redblacktree_node k v);
  var _39 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _14 <- ();
    old_self_11 <- ghost ([#"../red_black_tree.rs" 379 23 379 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_11 };
    _18 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _18))) };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _16 <- ([#"../red_black_tree.rs" 381 34 381 70] Take0.take _17);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _18 };
    switch (_16)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _16 };
    absurd
  }
  BB5 {
    assume { Resolve4.resolve x_20 };
    x_20 <- Type.core_option_option_Some_0 _16;
    assume { Resolve4.resolve x_15 };
    x_15 <- x_20;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _16 };
    _24 <- borrow_mut (Type.redblacktree_node_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d ( ^ _24)) };
    _23 <- borrow_mut ( * _24);
    _24 <- { _24 with current = ( ^ _23) };
    _26 <- borrow_mut (Type.redblacktree_node_Node_left x_15);
    x_15 <- (let Type.RedBlackTree_Node a b c d e = x_15 in Type.RedBlackTree_Node ( ^ _26) b c d e);
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _22 <- ([#"../red_black_tree.rs" 385 8 385 52] Swap0.swap _23 _25);
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve _24 };
    assume { Resolve5.resolve _26 };
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _30 <- borrow_mut x_15;
    x_15 <-  ^ _30;
    _29 <- borrow_mut ( * _30);
    _30 <- { _30 with current = ( ^ _29) };
    _27 <- ([#"../red_black_tree.rs" 386 8 386 36] Swap1.swap _28 _29);
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve _30 };
    _31 <- Type.redblacktree_node_Node_color x_15;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _31 c d e) };
    _32 <- Type.RedBlackTree_Color_Red;
    x_15 <- (let Type.RedBlackTree_Node a b c d e = x_15 in Type.RedBlackTree_Node a _32 c d e);
    assert { [#"../red_black_tree.rs" 389 8 389 79] HasMapping0.has_mapping (Type.redblacktree_node_Node_right ( * old_self_11)) (Model0.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _33 <- ();
    assert { [#"../red_black_tree.rs" 390 8 390 116] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right x_15) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_right ( * old_self_11)) k v };
    goto BB10
  }
  BB10 {
    _35 <- ();
    assume { Resolve4.resolve _39 };
    _39 <- x_15;
    _38 <- Type.Core_Option_Option_Some _39;
    goto BB11
  }
  BB11 {
    _37 <- Type.RedBlackTree_Tree _38;
    goto BB12
  }
  BB12 {
    assume { Resolve7.resolve (Type.redblacktree_node_Node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node _37 b c d e) };
    goto BB13
  }
  BB13 {
    assume { Resolve2.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None &&  ^ self = Type.Core_Option_Option_None }
    ensures {  * self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r &&  * self = Type.Core_Option_Option_Some ( * r) &&  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    
end
module Core_Option_Impl0_AsMut
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None &&  ^ self = Type.Core_Option_Option_None }
    ensures {  * self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r &&  * self = Type.Core_Option_Option_Some ( * r) &&  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module RedBlackTree_Impl12_FlipColors_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val flip_colors [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 394 15 394 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 395 15 395 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 396 15 396 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 397 15 397 60] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 398 4 398 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 399 14 399 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 400 14 400 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 401 4 403 70] exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 && Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 && Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 404 4 406 70] exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 && Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 && Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 }
    ensures { [#"../red_black_tree.rs" 407 14 407 40] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( ^ self) }
    
end
module RedBlackTree_Impl12_FlipColors
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_color
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg flip_colors [@cfg:stackify] [#"../red_black_tree.rs" 408 4 408 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 394 15 394 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 395 15 395 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 396 15 396 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 397 15 397 60] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 398 4 398 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 399 14 399 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 400 14 400 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 401 4 403 70] exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 && Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 && Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 404 4 406 70] exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 && Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 && Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 }
    ensures { [#"../red_black_tree.rs" 407 14 407 40] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.redblacktree_color;
  var _13 : borrowed (Type.redblacktree_node k v);
  var _14 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _15 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _16 : ();
  var _17 : borrowed (Type.redblacktree_color);
  var _18 : borrowed (Type.redblacktree_color);
  var _19 : borrowed (Type.redblacktree_color);
  var _20 : borrowed (Type.redblacktree_color);
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _23 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _24 : ();
  var _26 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _12 <- Type.redblacktree_node_Node_color ( * self_1);
    _15 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _15)) b c d e) };
    _14 <- ([#"../red_black_tree.rs" 409 8 409 31] AsMut0.as_mut _15);
    goto BB1
  }
  BB1 {
    _13 <- ([#"../red_black_tree.rs" 409 8 409 40] Unwrap0.unwrap _14);
    goto BB2
  }
  BB2 {
    _13 <- { _13 with current = (let Type.RedBlackTree_Node a b c d e =  * _13 in Type.RedBlackTree_Node a _12 c d e) };
    assume { Resolve0.resolve _13 };
    _18 <- borrow_mut (Type.redblacktree_node_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a ( ^ _18) c d e) };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _23 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _23))) };
    _22 <- ([#"../red_black_tree.rs" 410 45 410 69] AsMut0.as_mut _23);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    _21 <- ([#"../red_black_tree.rs" 410 45 410 78] Unwrap0.unwrap _22);
    goto BB4
  }
  BB4 {
    _20 <- borrow_mut (Type.redblacktree_node_Node_color ( * _21));
    _21 <- { _21 with current = (let Type.RedBlackTree_Node a b c d e =  * _21 in Type.RedBlackTree_Node a ( ^ _20) c d e) };
    assume { Resolve0.resolve _21 };
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _16 <- ([#"../red_black_tree.rs" 410 8 410 85] Swap0.swap _17 _19);
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _18 };
    assume { Resolve2.resolve _20 };
    assert { [#"../red_black_tree.rs" 411 23 411 51] BstInvariantHere0.bst_invariant_here ( * self_1) };
    _24 <- ();
    assert { [#"../red_black_tree.rs" 412 8 412 64] SameMappings1.same_mappings (Type.redblacktree_node_Node_left ( * self_1)) (Type.redblacktree_node_Node_left ( ^ self_1)) };
    _26 <- ();
    assert { [#"../red_black_tree.rs" 413 8 413 66] SameMappings1.same_mappings (Type.redblacktree_node_Node_right ( * self_1)) (Type.redblacktree_node_Node_right ( ^ self_1)) };
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    ensures { self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    
end
module Core_Option_Impl0_AsRef
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    ensures { self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    
end
module RedBlackTree_Impl12_Balance_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl7_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val balance [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 416 15 416 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 417 4 418 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 419 4 420 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 421 4 421 110] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    ensures { [#"../red_black_tree.rs" 422 14 422 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 423 14 423 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 424 4 425 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 426 4 431 65] forall l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left l) && Color0.color (Type.redblacktree_node_Node_right l) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right l) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 432 4 436 46] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 437 4 440 65] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 441 4 441 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl12_Balance
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl12_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  let rec cfg balance [@cfg:stackify] [#"../red_black_tree.rs" 442 4 442 25] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 416 15 416 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 417 4 418 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 419 4 420 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 421 4 421 110] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    ensures { [#"../red_black_tree.rs" 422 14 422 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 423 14 423 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 424 4 425 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 426 4 431 65] forall l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left l) && Color0.color (Type.redblacktree_node_Node_right l) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right l) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 432 4 436 46] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 437 4 440 65] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 441 4 441 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _13 : ();
  var _14 : bool;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : bool;
  var _18 : bool;
  var _19 : Type.redblacktree_tree k v;
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : ();
  var _23 : bool;
  var _24 : bool;
  var _25 : Type.redblacktree_tree k v;
  var _26 : bool;
  var _27 : Type.redblacktree_tree k v;
  var _28 : Type.redblacktree_node k v;
  var _29 : Type.core_option_option (Type.redblacktree_node k v);
  var _30 : Type.core_option_option (Type.redblacktree_node k v);
  var _31 : ();
  var _32 : borrowed (Type.redblacktree_node k v);
  var _33 : bool;
  var _34 : bool;
  var _35 : Type.redblacktree_tree k v;
  var _36 : bool;
  var _37 : Type.redblacktree_tree k v;
  var _38 : ();
  var _39 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _16 <- Type.redblacktree_node_Node_right ( * self_1);
    _15 <- ([#"../red_black_tree.rs" 443 11 443 30] IsRed0.is_red _16);
    goto BB4
  }
  BB1 {
    _14 <- false;
    goto BB3
  }
  BB2 {
    _19 <- Type.redblacktree_node_Node_left ( * self_1);
    _18 <- ([#"../red_black_tree.rs" 443 35 443 53] IsRed0.is_red _19);
    goto BB5
  }
  BB3 {
    switch (_14)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB4 {
    switch (_15)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB5 {
    _17 <- not _18;
    _14 <- _17;
    goto BB3
  }
  BB6 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 445 12 445 30] RotateLeft0.rotate_left _21);
    goto BB7
  }
  BB7 {
    _13 <- ();
    goto BB9
  }
  BB8 {
    _13 <- ();
    goto BB9
  }
  BB9 {
    _25 <- Type.redblacktree_node_Node_left ( * self_1);
    _24 <- ([#"../red_black_tree.rs" 449 11 449 29] IsRed0.is_red _25);
    goto BB13
  }
  BB10 {
    _23 <- false;
    goto BB12
  }
  BB11 {
    _30 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1));
    _29 <- ([#"../red_black_tree.rs" 449 33 449 56] AsRef0.as_ref _30);
    goto BB14
  }
  BB12 {
    switch (_23)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    switch (_24)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _28 <- ([#"../red_black_tree.rs" 449 33 449 65] Unwrap0.unwrap _29);
    goto BB15
  }
  BB15 {
    _27 <- Type.redblacktree_node_Node_left _28;
    assume { Resolve0.resolve _28 };
    _26 <- ([#"../red_black_tree.rs" 449 33 449 79] IsRed0.is_red _27);
    goto BB16
  }
  BB16 {
    _23 <- _26;
    goto BB12
  }
  BB17 {
    _32 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _32) };
    _31 <- ([#"../red_black_tree.rs" 450 12 450 31] RotateRight0.rotate_right _32);
    goto BB18
  }
  BB18 {
    _22 <- ();
    goto BB20
  }
  BB19 {
    _22 <- ();
    goto BB20
  }
  BB20 {
    _35 <- Type.redblacktree_node_Node_left ( * self_1);
    _34 <- ([#"../red_black_tree.rs" 453 11 453 29] IsRed0.is_red _35);
    goto BB24
  }
  BB21 {
    _33 <- false;
    goto BB23
  }
  BB22 {
    _37 <- Type.redblacktree_node_Node_right ( * self_1);
    _36 <- ([#"../red_black_tree.rs" 453 33 453 52] IsRed0.is_red _37);
    goto BB25
  }
  BB23 {
    switch (_33)
      | False -> goto BB28
      | _ -> goto BB26
      end
  }
  BB24 {
    switch (_34)
      | False -> goto BB21
      | _ -> goto BB22
      end
  }
  BB25 {
    _33 <- _36;
    goto BB23
  }
  BB26 {
    _39 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _39) };
    _38 <- ([#"../red_black_tree.rs" 454 12 454 30] FlipColors0.flip_colors _39);
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB28 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl12_MoveRedLeft_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val move_red_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 458 15 458 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 459 15 459 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 460 15 460 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 461 15 461 35] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 462 4 462 93] exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Black}
    ensures { [#"../red_black_tree.rs" 463 4 463 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 464 14 464 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 465 14 465 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 466 4 468 90] Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant ( ^ self) && (exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red) }
    ensures { [#"../red_black_tree.rs" 469 4 471 79] Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 472 14 472 42] LeLog0.le_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    
end
module RedBlackTree_Impl12_MoveRedLeft
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  clone RedBlackTree_Impl12_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl12_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg move_red_left [@cfg:stackify] [#"../red_black_tree.rs" 475 4 475 31] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 458 15 458 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 459 15 459 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 460 15 460 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 461 15 461 35] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 462 4 462 93] exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Black}
    ensures { [#"../red_black_tree.rs" 463 4 463 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 464 14 464 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 465 14 465 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 466 4 468 90] Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant ( ^ self) && (exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red) }
    ensures { [#"../red_black_tree.rs" 469 4 471 79] Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 472 14 472 42] LeLog0.le_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_13 : borrowed (Type.redblacktree_node k v);
  var _16 : ();
  var _17 : ();
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : bool;
  var _20 : Type.redblacktree_tree k v;
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _23 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _24 : ();
  var _25 : borrowed (Type.redblacktree_node k v);
  var _26 : borrowed (Type.redblacktree_node k v);
  var _27 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _28 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _29 : ();
  var _31 : ();
  var _33 : ();
  var _34 : borrowed (Type.redblacktree_node k v);
  var _35 : ();
  var _36 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _16 <- ();
    old_self_13 <- ghost ([#"../red_black_tree.rs" 476 23 476 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_13 };
    _18 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _18) };
    _17 <- ([#"../red_black_tree.rs" 477 8 477 26] FlipColors0.flip_colors _18);
    goto BB2
  }
  BB2 {
    _23 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _23))) };
    _22 <- ([#"../red_black_tree.rs" 478 11 478 35] AsMut0.as_mut _23);
    goto BB3
  }
  BB3 {
    _21 <- ([#"../red_black_tree.rs" 478 11 478 44] Unwrap0.unwrap _22);
    goto BB4
  }
  BB4 {
    _20 <- Type.redblacktree_node_Node_left ( * _21);
    assume { Resolve1.resolve _21 };
    _19 <- ([#"../red_black_tree.rs" 478 11 478 58] IsRed0.is_red _20);
    goto BB5
  }
  BB5 {
    switch (_19)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    _28 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _28))) };
    _27 <- ([#"../red_black_tree.rs" 479 12 479 36] AsMut0.as_mut _28);
    goto BB7
  }
  BB7 {
    _26 <- ([#"../red_black_tree.rs" 479 12 479 45] Unwrap0.unwrap _27);
    goto BB8
  }
  BB8 {
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _24 <- ([#"../red_black_tree.rs" 479 12 479 60] RotateRight0.rotate_right _25);
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve _26 };
    assert { [#"../red_black_tree.rs" 480 28 480 57] SameMappings0.same_mappings ( * old_self_13) ( * self_1) };
    _29 <- ();
    assert { [#"../red_black_tree.rs" 481 12 481 94] forall h : (int) . HasHeight0.has_height ( * old_self_13) h -> HasHeight0.has_height ( * self_1) h };
    _31 <- ();
    _34 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _34) };
    _33 <- ([#"../red_black_tree.rs" 482 12 482 30] RotateLeft0.rotate_left _34);
    goto BB10
  }
  BB10 {
    _36 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _36) };
    _35 <- ([#"../red_black_tree.rs" 483 12 483 30] FlipColors0.flip_colors _36);
    goto BB11
  }
  BB11 {
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB13
  }
  BB12 {
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module RedBlackTree_Impl12_MoveRedRight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val move_red_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : bool
    requires {[#"../red_black_tree.rs" 487 15 487 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 488 15 488 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 489 15 489 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 490 15 490 35] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 491 4 491 94] exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Color0.color (Type.redblacktree_node_Node_left r) = Type.RedBlackTree_Color_Black}
    ensures { [#"../red_black_tree.rs" 492 4 492 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 493 14 493 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 14 494 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 495 4 495 46] ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 496 4 496 47] ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 497 4 499 91] not result -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) && Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && (exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && Color0.color (Type.redblacktree_node_Node_left r) = Type.RedBlackTree_Color_Red) }
    ensures { [#"../red_black_tree.rs" 500 4 501 75] result -> Type.redblacktree_node_Node_key ( ^ self) = Type.redblacktree_node_Node_key ( * self) && Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    
end
module RedBlackTree_Impl12_MoveRedRight
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl12_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl12_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg move_red_right [@cfg:stackify] [#"../red_black_tree.rs" 504 4 504 40] (self : borrowed (Type.redblacktree_node k v)) : bool
    requires {[#"../red_black_tree.rs" 487 15 487 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 488 15 488 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 489 15 489 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 490 15 490 35] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 491 4 491 94] exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Color0.color (Type.redblacktree_node_Node_left r) = Type.RedBlackTree_Color_Black}
    ensures { [#"../red_black_tree.rs" 492 4 492 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 493 14 493 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 14 494 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 495 4 495 46] ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 496 4 496 47] ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 497 4 499 91] not result -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) && Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && (exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && Color0.color (Type.redblacktree_node_Node_left r) = Type.RedBlackTree_Color_Red) }
    ensures { [#"../red_black_tree.rs" 500 4 501 75] result -> Type.redblacktree_node_Node_key ( ^ self) = Type.redblacktree_node_Node_key ( * self) && Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    
   =
  var _0 : bool;
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _15 : ();
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : ();
  var _18 : bool;
  var _19 : Type.redblacktree_tree k v;
  var _20 : borrowed (Type.redblacktree_node k v);
  var _21 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _22 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _23 : ();
  var _24 : ();
  var _25 : borrowed (Type.redblacktree_node k v);
  var _26 : ();
  var _27 : borrowed (Type.redblacktree_node k v);
  var _28 : ();
  var _29 : borrowed (Type.redblacktree_node k v);
  var _30 : borrowed (Type.redblacktree_node k v);
  var _31 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _32 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _16 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 505 8 505 26] FlipColors0.flip_colors _16);
    goto BB1
  }
  BB1 {
    _22 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _22)) b c d e) };
    _21 <- ([#"../red_black_tree.rs" 508 11 508 34] AsMut0.as_mut _22);
    goto BB2
  }
  BB2 {
    _20 <- ([#"../red_black_tree.rs" 508 11 508 43] Unwrap0.unwrap _21);
    goto BB3
  }
  BB3 {
    _19 <- Type.redblacktree_node_Node_left ( * _20);
    assume { Resolve0.resolve _20 };
    _18 <- ([#"../red_black_tree.rs" 508 11 508 57] IsRed0.is_red _19);
    goto BB4
  }
  BB4 {
    switch (_18)
      | False -> goto BB11
      | _ -> goto BB5
      end
  }
  BB5 {
    _25 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _25) };
    _24 <- ([#"../red_black_tree.rs" 510 12 510 31] RotateRight0.rotate_right _25);
    goto BB6
  }
  BB6 {
    _27 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _27) };
    _26 <- ([#"../red_black_tree.rs" 512 12 512 30] FlipColors0.flip_colors _27);
    goto BB7
  }
  BB7 {
    _32 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _32))) };
    _31 <- ([#"../red_black_tree.rs" 514 12 514 36] AsMut0.as_mut _32);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    _30 <- ([#"../red_black_tree.rs" 514 12 514 45] Unwrap0.unwrap _31);
    goto BB9
  }
  BB9 {
    _29 <- borrow_mut ( * _30);
    _30 <- { _30 with current = ( ^ _29) };
    _28 <- ([#"../red_black_tree.rs" 514 12 514 59] RotateLeft0.rotate_left _29);
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve _30 };
    _0 <- false;
    goto BB12
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _17 <- ();
    _0 <- true;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl13_New_Interface
  type k
  type v
  use Type
  use map.Const
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val new [@cfg:stackify] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 527 14 527 43] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 528 14 528 32] Invariant0.invariant' result }
    
end
module RedBlackTree_Impl13_New
  type k
  type v
  use Type
  use map.Const
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec cfg new [@cfg:stackify] [#"../red_black_tree.rs" 529 4 529 30] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 527 14 527 43] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 528 14 528 32] Invariant0.invariant' result }
    
   =
  var _0 : Type.redblacktree_tree k v;
  var _3 : Type.core_option_option (Type.redblacktree_node k v);
  {
    goto BB0
  }
  BB0 {
    _3 <- Type.Core_Option_Option_None;
    _0 <- Type.RedBlackTree_Tree _3;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module RedBlackTree_Impl13_InsertRec_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val insert_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 533 15 533 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 534 15 534 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 535 14 535 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 536 4 537 75] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( ^ self) = Type.Core_Option_Option_Some node && Color0.color (Type.redblacktree_node_Node_right node) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right node) }
    ensures { [#"../red_black_tree.rs" 538 4 538 70] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 539 14 539 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 540 4 540 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 541 4 541 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl13_InsertRec
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model1.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl12_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg insert_rec [@cfg:stackify] [#"../red_black_tree.rs" 542 4 542 44] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 533 15 533 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 534 15 534 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 535 14 535 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 536 4 537 75] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( ^ self) = Type.Core_Option_Option_Some node && Color0.color (Type.redblacktree_node_Node_right node) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right node) }
    ensures { [#"../red_black_tree.rs" 538 4 538 70] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 539 14 539 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 540 4 540 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 541 4 541 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _12 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _13 : isize;
  var _14 : ();
  var _15 : Type.core_option_option (Type.redblacktree_node k v);
  var _16 : Type.redblacktree_node k v;
  var _17 : Type.redblacktree_node k v;
  var _18 : Type.redblacktree_tree k v;
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var _20 : Type.redblacktree_color;
  var _21 : k;
  var _22 : v;
  var _23 : Type.redblacktree_tree k v;
  var _24 : Type.core_option_option (Type.redblacktree_node k v);
  var node_25 : borrowed (Type.redblacktree_node k v);
  var _26 : ();
  var _27 : Type.core_cmp_ordering;
  var _28 : k;
  var _29 : k;
  var _30 : k;
  var _31 : int8;
  var _32 : borrowed (Type.redblacktree_tree k v);
  var _33 : k;
  var _34 : v;
  var _35 : ();
  var _36 : v;
  var _37 : borrowed (Type.redblacktree_tree k v);
  var _38 : k;
  var _39 : v;
  var _40 : ();
  var _41 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _12)) };
    switch ( * _12)
      | Type.Core_Option_Option_None -> goto BB5
      | Type.Core_Option_Option_Some _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    node_25 <- borrow_mut (Type.core_option_option_Some_0 ( * _12));
    _12 <- { _12 with current = (let Type.Core_Option_Option_Some a =  * _12 in Type.Core_Option_Option_Some ( ^ node_25)) };
    assume { Resolve3.resolve _12 };
    _28 <- key_2;
    _30 <- Type.redblacktree_node_Node_key ( * node_25);
    _29 <- _30;
    assume { Resolve4.resolve _30 };
    _27 <- ([#"../red_black_tree.rs" 555 22 555 40] Cmp0.cmp _28 _29);
    goto BB16
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve3.resolve _12 };
    absurd
  }
  BB5 {
    assume { Resolve3.resolve _12 };
    _19 <- Type.Core_Option_Option_None;
    _18 <- Type.RedBlackTree_Tree _19;
    goto BB6
  }
  BB6 {
    _20 <- Type.RedBlackTree_Color_Red;
    assume { Resolve1.resolve _21 };
    _21 <- key_2;
    assume { Resolve2.resolve _22 };
    _22 <- val'_3;
    _24 <- Type.Core_Option_Option_None;
    _23 <- Type.RedBlackTree_Tree _24;
    goto BB7
  }
  BB7 {
    _17 <- Type.RedBlackTree_Node _18 _20 _21 _22 _23;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    _16 <- _17;
    goto BB12
  }
  BB12 {
    _15 <- Type.Core_Option_Option_Some _16;
    goto BB13
  }
  BB13 {
    assume { Resolve6.resolve (Type.redblacktree_tree_Tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree _15) };
    goto BB14
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    goto BB15
  }
  BB15 {
    _0 <- ();
    goto BB28
  }
  BB16 {
    switch (_27)
      | Type.Core_Cmp_Ordering_Less -> goto BB19
      | Type.Core_Cmp_Ordering_Equal -> goto BB21
      | Type.Core_Cmp_Ordering_Greater -> goto BB17
      end
  }
  BB17 {
    _37 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_25));
    node_25 <- { node_25 with current = (let Type.RedBlackTree_Node a b c d e =  * node_25 in Type.RedBlackTree_Node a b c d ( ^ _37)) };
    assume { Resolve1.resolve _38 };
    _38 <- key_2;
    assume { Resolve2.resolve _39 };
    _39 <- val'_3;
    _26 <- ([#"../red_black_tree.rs" 561 31 561 62] insert_rec _37 _38 _39);
    goto BB24
  }
  BB18 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve5.resolve node_25 };
    absurd
  }
  BB19 {
    _32 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_25));
    node_25 <- { node_25 with current = (let Type.RedBlackTree_Node a b c d e =  * node_25 in Type.RedBlackTree_Node ( ^ _32) b c d e) };
    assume { Resolve1.resolve _33 };
    _33 <- key_2;
    assume { Resolve2.resolve _34 };
    _34 <- val'_3;
    _26 <- ([#"../red_black_tree.rs" 556 28 556 58] insert_rec _32 _33 _34);
    goto BB20
  }
  BB20 {
    goto BB25
  }
  BB21 {
    assume { Resolve2.resolve _36 };
    _36 <- val'_3;
    assume { Resolve2.resolve (Type.redblacktree_node_Node_val ( * node_25)) };
    node_25 <- { node_25 with current = (let Type.RedBlackTree_Node a b c d e =  * node_25 in Type.RedBlackTree_Node a b c _36 e) };
    goto BB22
  }
  BB22 {
    assume { Resolve5.resolve node_25 };
    goto BB23
  }
  BB23 {
    _0 <- ();
    goto BB28
  }
  BB24 {
    goto BB25
  }
  BB25 {
    _41 <- borrow_mut ( * node_25);
    node_25 <- { node_25 with current = ( ^ _41) };
    _40 <- ([#"../red_black_tree.rs" 563 16 563 30] Balance0.balance _41);
    goto BB26
  }
  BB26 {
    assume { Resolve5.resolve node_25 };
    _0 <- ();
    goto BB27
  }
  BB27 {
    goto BB30
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module RedBlackTree_Impl13_Insert_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 568 15 568 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 569 14 569 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 570 14 570 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    
end
module RedBlackTree_Impl13_Insert
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl13_InsertRec_Interface as InsertRec0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg insert [@cfg:stackify] [#"../red_black_tree.rs" 571 4 571 44] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 568 15 568 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 569 14 569 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 570 14 570 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  ghost var old_self_7 : borrowed (Type.redblacktree_tree k v);
  var _10 : ();
  var _11 : ();
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : k;
  var _14 : v;
  var _15 : Type.redblacktree_color;
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _18 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _19 : ();
  ghost var _21 : ();
  var _24 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _10 <- ();
    old_self_7 <- ghost ([#"../red_black_tree.rs" 572 23 572 38] self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_self_7 };
    _12 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _12) };
    assume { Resolve1.resolve _13 };
    _13 <- key_2;
    assume { Resolve2.resolve _14 };
    _14 <- val'_3;
    _11 <- ([#"../red_black_tree.rs" 573 8 573 33] InsertRec0.insert_rec _12 _13 _14);
    goto BB3
  }
  BB3 {
    _15 <- Type.RedBlackTree_Color_Black;
    _18 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _18)) };
    _17 <- ([#"../red_black_tree.rs" 574 8 574 26] AsMut0.as_mut _18);
    goto BB4
  }
  BB4 {
    assume { Resolve3.resolve self_1 };
    _16 <- ([#"../red_black_tree.rs" 574 8 574 35] Unwrap0.unwrap _17);
    goto BB5
  }
  BB5 {
    _16 <- { _16 with current = (let Type.RedBlackTree_Node a b c d e =  * _16 in Type.RedBlackTree_Node a _15 c d e) };
    assume { Resolve4.resolve _16 };
    assert { [#"../red_black_tree.rs" 575 8 576 58] forall h : (int) . HasHeight0.has_height ( * old_self_7) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h + 1) };
    _19 <- ();
    _24 <- ();
    _21 <- ghost ([#"../red_black_tree.rs" 577 8 577 42] ());
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module RedBlackTree_Impl13_DeleteMinRec_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val delete_min_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 580 15 580 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 581 15 581 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 582 4 583 64] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some node && (Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Red || Color0.color (Type.redblacktree_node_Node_left node) = Type.RedBlackTree_Color_Red)}
    requires {[#"../red_black_tree.rs" 584 4 584 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    ensures { [#"../red_black_tree.rs" 585 14 585 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 586 14 586 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 587 4 587 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 588 4 589 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model (let (a, _) = result in a) = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 590 4 591 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model (let (a, _) = result in a) <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 592 4 592 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 593 14 593 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 594 4 594 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
end
module RedBlackTree_Impl13_DeleteMinRec
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl12_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate ColorInvariant1.color_invariant = ColorInvariant0.color_invariant, function Model0.model = Model0.model,
  predicate LeLog0.le_log = LeLog0.le_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg delete_min_rec [@cfg:stackify] [#"../red_black_tree.rs" 595 4 595 42] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 580 15 580 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 581 15 581 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 582 4 583 64] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some node && (Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Red || Color0.color (Type.redblacktree_node_Node_left node) = Type.RedBlackTree_Color_Red)}
    requires {[#"../red_black_tree.rs" 584 4 584 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    ensures { [#"../red_black_tree.rs" 585 14 585 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 586 14 586 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 587 4 587 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 588 4 589 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model (let (a, _) = result in a) = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 590 4 591 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model (let (a, _) = result in a) <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 592 4 592 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 593 14 593 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 594 4 594 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
   =
  var _0 : (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  ghost var old_self_14 : borrowed (Type.redblacktree_tree k v);
  var _17 : ();
  var node_18 : borrowed (Type.redblacktree_node k v);
  var _19 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _20 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _21 : ();
  var _22 : isize;
  var _23 : ();
  var node_24 : Type.redblacktree_node k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _27 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _28 : k;
  var _29 : v;
  var _30 : ();
  var _31 : bool;
  var _32 : bool;
  var _33 : bool;
  var _34 : Type.redblacktree_tree k v;
  var _35 : bool;
  var _36 : bool;
  var _37 : Type.redblacktree_tree k v;
  var _38 : Type.redblacktree_node k v;
  var _39 : Type.core_option_option (Type.redblacktree_node k v);
  var _40 : Type.core_option_option (Type.redblacktree_node k v);
  var _41 : ();
  var _42 : borrowed (Type.redblacktree_node k v);
  var _43 : ();
  var r_45 : (k, v);
  var _46 : borrowed (Type.redblacktree_tree k v);
  var _47 : ();
  var _49 : ();
  var _50 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _17 <- ();
    old_self_14 <- ghost ([#"../red_black_tree.rs" 596 23 596 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_14 };
    _20 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _20)) };
    _19 <- ([#"../red_black_tree.rs" 597 19 597 37] AsMut0.as_mut _20);
    goto BB2
  }
  BB2 {
    node_18 <- ([#"../red_black_tree.rs" 597 19 597 46] Unwrap0.unwrap _19);
    goto BB3
  }
  BB3 {
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_18)))
      | Type.Core_Option_Option_None -> goto BB4
      | _ -> goto BB9
      end
  }
  BB4 {
    assume { Resolve3.resolve node_18 };
    _27 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _27)) };
    assume { Resolve1.resolve self_1 };
    _26 <- borrow_mut ( * _27);
    _27 <- { _27 with current = ( ^ _26) };
    _25 <- ([#"../red_black_tree.rs" 599 23 599 53] Take0.take _26);
    goto BB5
  }
  BB5 {
    assume { Resolve5.resolve _27 };
    node_24 <- ([#"../red_black_tree.rs" 599 23 599 62] Unwrap2.unwrap _25);
    goto BB6
  }
  BB6 {
    assume { Resolve6.resolve _28 };
    _28 <- Type.redblacktree_node_Node_key node_24;
    assume { Resolve7.resolve _29 };
    _29 <- Type.redblacktree_node_Node_val node_24;
    _0 <- (_28, _29);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB24
  }
  BB9 {
    assume { Resolve1.resolve self_1 };
    _21 <- ();
    _34 <- Type.redblacktree_node_Node_left ( * node_18);
    _33 <- ([#"../red_black_tree.rs" 602 12 602 30] IsRed0.is_red _34);
    goto BB13
  }
  BB10 {
    _31 <- false;
    goto BB12
  }
  BB11 {
    _40 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_18));
    _39 <- ([#"../red_black_tree.rs" 602 35 602 58] AsRef0.as_ref _40);
    goto BB14
  }
  BB12 {
    switch (_31)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _32 <- not _33;
    switch (_32)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _38 <- ([#"../red_black_tree.rs" 602 35 602 67] Unwrap1.unwrap _39);
    goto BB15
  }
  BB15 {
    _37 <- Type.redblacktree_node_Node_left _38;
    assume { Resolve2.resolve _38 };
    _36 <- ([#"../red_black_tree.rs" 602 35 602 81] IsRed0.is_red _37);
    goto BB16
  }
  BB16 {
    _35 <- not _36;
    _31 <- _35;
    goto BB12
  }
  BB17 {
    _42 <- borrow_mut ( * node_18);
    node_18 <- { node_18 with current = ( ^ _42) };
    _41 <- ([#"../red_black_tree.rs" 603 12 603 32] MoveRedLeft0.move_red_left _42);
    goto BB18
  }
  BB18 {
    _30 <- ();
    goto BB20
  }
  BB19 {
    _30 <- ();
    goto BB20
  }
  BB20 {
    assert { [#"../red_black_tree.rs" 605 8 605 87] forall h : (int) . HasHeight0.has_height ( * old_self_14) h -> HasHeight1.has_height ( * node_18) h };
    _43 <- ();
    _46 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_18));
    node_18 <- { node_18 with current = (let Type.RedBlackTree_Node a b c d e =  * node_18 in Type.RedBlackTree_Node ( ^ _46) b c d e) };
    r_45 <- ([#"../red_black_tree.rs" 606 16 606 42] delete_min_rec _46);
    goto BB21
  }
  BB21 {
    assert { [#"../red_black_tree.rs" 607 8 607 87] forall h : (int) . HasHeight0.has_height ( * old_self_14) h -> HasHeight1.has_height ( * node_18) h };
    _47 <- ();
    _50 <- borrow_mut ( * node_18);
    node_18 <- { node_18 with current = ( ^ _50) };
    _49 <- ([#"../red_black_tree.rs" 608 8 608 22] Balance0.balance _50);
    goto BB22
  }
  BB22 {
    assume { Resolve3.resolve node_18 };
    assume { Resolve4.resolve _0 };
    _0 <- r_45;
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    assume { Resolve8.resolve node_24 };
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module RedBlackTree_Impl13_DeleteMin_Interface
  type k
  type v
  use Type
  use map.Const
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete_min [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 612 15 612 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 613 14 613 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 614 4 614 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) && Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 615 4 618 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v && (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None || LeLog0.le_log (Model1.model k) k2) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl13_DeleteMin
  type k
  type v
  use Type
  use map.Const
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve6.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl13_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_min [@cfg:stackify] [#"../red_black_tree.rs" 619 4 619 50] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 612 15 612 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 613 14 613 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 614 4 614 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) && Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 615 4 618 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v && (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None || LeLog0.le_log (Model1.model k) k2) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    
   =
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  ghost var old_self_6 : borrowed (Type.redblacktree_tree k v);
  var _9 : ();
  var _10 : ();
  var _11 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _12 : isize;
  var _13 : ();
  var node_14 : borrowed (Type.redblacktree_node k v);
  var _15 : bool;
  var _16 : bool;
  var _17 : bool;
  var _18 : Type.redblacktree_tree k v;
  var _19 : bool;
  var _20 : bool;
  var _21 : Type.redblacktree_tree k v;
  var _22 : Type.redblacktree_color;
  var _23 : ();
  var _25 : ();
  var r_27 : (k, v);
  var _28 : borrowed (Type.redblacktree_tree k v);
  var _29 : ();
  var _30 : bool;
  var _31 : Type.redblacktree_tree k v;
  var _32 : Type.redblacktree_color;
  var _33 : borrowed (Type.redblacktree_node k v);
  var _34 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _35 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _36 : ();
  ghost var _38 : ();
  var _41 : ();
  var _42 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _9 <- ();
    old_self_6 <- ghost ([#"../red_black_tree.rs" 620 23 620 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_6 };
    _11 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _11)) };
    switch ( * _11)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    node_14 <- borrow_mut (Type.core_option_option_Some_0 ( * _11));
    _11 <- { _11 with current = (let Type.Core_Option_Option_Some a =  * _11 in Type.Core_Option_Option_Some ( ^ node_14)) };
    assume { Resolve2.resolve _11 };
    _18 <- Type.redblacktree_node_Node_left ( * node_14);
    _17 <- ([#"../red_black_tree.rs" 624 20 624 38] IsRed0.is_red _18);
    goto BB8
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _11 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _11 };
    _0 <- Type.Core_Option_Option_None;
    goto BB23
  }
  BB5 {
    _15 <- false;
    goto BB7
  }
  BB6 {
    _21 <- Type.redblacktree_node_Node_right ( * node_14);
    _20 <- ([#"../red_black_tree.rs" 624 43 624 62] IsRed0.is_red _21);
    goto BB9
  }
  BB7 {
    switch (_15)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB8 {
    _16 <- not _17;
    switch (_16)
      | False -> goto BB5
      | _ -> goto BB6
      end
  }
  BB9 {
    _19 <- not _20;
    _15 <- _19;
    goto BB7
  }
  BB10 {
    _22 <- Type.RedBlackTree_Color_Red;
    node_14 <- { node_14 with current = (let Type.RedBlackTree_Node a b c d e =  * node_14 in Type.RedBlackTree_Node a _22 c d e) };
    assume { Resolve3.resolve node_14 };
    _10 <- ();
    goto BB12
  }
  BB11 {
    assume { Resolve3.resolve node_14 };
    _10 <- ();
    goto BB12
  }
  BB12 {
    assert { [#"../red_black_tree.rs" 629 8 630 61] forall h : (int) . HasHeight0.has_height ( * old_self_6) h -> Color0.color ( * self_1) = Type.RedBlackTree_Color_Black || HasHeight0.has_height ( * self_1) (h - 1) };
    _23 <- ();
    assert { [#"../red_black_tree.rs" 631 24 631 53] SameMappings0.same_mappings ( * old_self_6) ( * self_1) };
    _25 <- ();
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    r_27 <- ([#"../red_black_tree.rs" 632 16 632 37] DeleteMinRec0.delete_min_rec _28);
    goto BB13
  }
  BB13 {
    _31 <-  * self_1;
    _30 <- ([#"../red_black_tree.rs" 633 11 633 24] IsRed0.is_red _31);
    goto BB14
  }
  BB14 {
    switch (_30)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _32 <- Type.RedBlackTree_Color_Black;
    _35 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _35)) };
    _34 <- ([#"../red_black_tree.rs" 634 12 634 30] AsMut0.as_mut _35);
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve self_1 };
    _33 <- ([#"../red_black_tree.rs" 634 12 634 39] Unwrap0.unwrap _34);
    goto BB17
  }
  BB17 {
    _33 <- { _33 with current = (let Type.RedBlackTree_Node a b c d e =  * _33 in Type.RedBlackTree_Node a _32 c d e) };
    assume { Resolve3.resolve _33 };
    _29 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve1.resolve self_1 };
    _29 <- ();
    goto BB19
  }
  BB19 {
    assert { [#"../red_black_tree.rs" 636 8 637 58] forall h : (int) . HasHeight0.has_height ( * old_self_6) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h - 1) };
    _36 <- ();
    _41 <- ();
    _38 <- ghost ([#"../red_black_tree.rs" 638 8 638 42] ());
    goto BB20
  }
  BB20 {
    assume { Resolve4.resolve _42 };
    _42 <- r_27;
    _0 <- Type.Core_Option_Option_Some _42;
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use Type
  use prelude.Prelude
  val is_none [@cfg:stackify] (self : Type.core_option_option t) : bool
    ensures { result = (self = Type.Core_Option_Option_None) }
    
end
module Core_Option_Impl0_IsNone
  type t
  use Type
  use prelude.Prelude
  val is_none [@cfg:stackify] (self : Type.core_option_option t) : bool
    ensures { result = (self = Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl13_DeleteRec_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val delete_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 642 15 642 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 643 15 643 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 644 4 645 92] Color0.color ( * self) = Type.RedBlackTree_Color_Red || (exists n : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some n && Color0.color (Type.redblacktree_node_Node_left n) = Type.RedBlackTree_Color_Red)}
    requires {[#"../red_black_tree.rs" 646 4 646 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    ensures { [#"../red_black_tree.rs" 647 14 647 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 648 4 648 78] forall v : (v) . result = Type.Core_Option_Option_None -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 649 4 650 57] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Model0.model key = Model0.model k && HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 651 4 652 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model key = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 653 4 654 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model key <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 655 4 655 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 656 14 656 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 657 4 657 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
end
module RedBlackTree_Impl13_DeleteRec
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl3_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl0_HasMappingInj as HasMappingInj0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model,
  function HasMappingModel0.has_mapping_model = HasMappingModel0.has_mapping_model, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve12 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve11 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve8 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve10 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve7 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve9.resolve, predicate Resolve1.resolve = Resolve10.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = v
  clone Core_Mem_Swap_Interface as Swap1 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = k
  clone Core_Mem_Swap_Interface as Swap0 with type t = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (k, v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight1.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl12_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate ColorInvariant1.color_invariant = ColorInvariant0.color_invariant, function Model0.model = Model0.model,
  predicate LeLog0.le_log = LeLog0.le_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_MoveRedRight_Interface as MoveRedRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate ColorInvariant1.color_invariant = ColorInvariant0.color_invariant, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl13_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_rec [@cfg:stackify] [#"../red_black_tree.rs" 658 4 658 55] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 642 15 642 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 643 15 643 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 644 4 645 92] Color0.color ( * self) = Type.RedBlackTree_Color_Red || (exists n : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some n && Color0.color (Type.redblacktree_node_Node_left n) = Type.RedBlackTree_Color_Red)}
    requires {[#"../red_black_tree.rs" 646 4 646 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    ensures { [#"../red_black_tree.rs" 647 14 647 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 648 4 648 78] forall v : (v) . result = Type.Core_Option_Option_None -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 649 4 650 57] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Model0.model key = Model0.model k && HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 651 4 652 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model key = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 653 4 654 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model key <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 655 4 655 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 656 14 656 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 657 4 657 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
   =
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var r_15 : Type.core_option_option (k, v);
  var node_16 : borrowed (Type.redblacktree_node k v);
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _19 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _20 : ();
  var _21 : Type.core_cmp_ordering;
  var _22 : k;
  var _23 : k;
  var _24 : k;
  var _25 : int8;
  var _26 : ();
  var _27 : bool;
  var _28 : Type.core_option_option (Type.redblacktree_node k v);
  var _29 : ();
  var _30 : ();
  var _31 : bool;
  var _32 : bool;
  var _33 : bool;
  var _34 : Type.redblacktree_tree k v;
  var _35 : bool;
  var _36 : bool;
  var _37 : Type.redblacktree_tree k v;
  var _38 : Type.redblacktree_node k v;
  var _39 : Type.core_option_option (Type.redblacktree_node k v);
  var _40 : Type.core_option_option (Type.redblacktree_node k v);
  var _41 : ();
  var _42 : borrowed (Type.redblacktree_node k v);
  var _43 : Type.core_option_option (k, v);
  var _44 : borrowed (Type.redblacktree_tree k v);
  var _45 : k;
  var ord_46 : Type.core_cmp_ordering;
  var _47 : ();
  var _48 : bool;
  var _49 : Type.redblacktree_tree k v;
  var _50 : ();
  var _51 : borrowed (Type.redblacktree_node k v);
  var _52 : Type.core_cmp_ordering;
  var _53 : ();
  var _54 : bool;
  var _55 : Type.core_option_option (Type.redblacktree_node k v);
  var _56 : ();
  var _57 : ();
  var _58 : int8;
  var _59 : ();
  var node_60 : Type.redblacktree_node k v;
  var _61 : Type.core_option_option (Type.redblacktree_node k v);
  var _62 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _63 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _64 : (k, v);
  var _65 : k;
  var _66 : v;
  var _67 : bool;
  var _68 : bool;
  var _69 : bool;
  var _70 : Type.redblacktree_tree k v;
  var _71 : Type.redblacktree_node k v;
  var _72 : Type.core_option_option (Type.redblacktree_node k v);
  var _73 : Type.core_option_option (Type.redblacktree_node k v);
  var _74 : bool;
  var _75 : bool;
  var _76 : borrowed (Type.redblacktree_node k v);
  var _77 : Type.core_cmp_ordering;
  var _78 : int8;
  var kv_79 : (k, v);
  var _80 : borrowed (Type.redblacktree_tree k v);
  ghost var _81 : ();
  var _84 : ();
  var _85 : ();
  var _86 : borrowed k;
  var _87 : borrowed k;
  var _88 : borrowed k;
  var _89 : borrowed k;
  var _90 : ();
  var _91 : borrowed v;
  var _92 : borrowed v;
  var _93 : borrowed v;
  var _94 : borrowed v;
  var _95 : Type.core_option_option (k, v);
  var _96 : (k, v);
  var _97 : Type.core_option_option (k, v);
  var _98 : borrowed (Type.redblacktree_tree k v);
  var _99 : k;
  var _100 : ();
  var _101 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _19 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _19)) };
    _18 <- ([#"../red_black_tree.rs" 660 26 660 44] AsMut0.as_mut _19);
    goto BB1
  }
  BB1 {
    _17 <- ([#"../red_black_tree.rs" 660 26 660 53] Unwrap0.unwrap _18);
    goto BB2
  }
  BB2 {
    node_16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ node_16) };
    assume { Resolve0.resolve _17 };
    _22 <- key_2;
    _24 <- Type.redblacktree_node_Node_key ( * node_16);
    _23 <- _24;
    assume { Resolve1.resolve _24 };
    _21 <- ([#"../red_black_tree.rs" 661 14 661 32] Cmp0.cmp _22 _23);
    goto BB3
  }
  BB3 {
    switch (_21)
      | Type.Core_Cmp_Ordering_Less -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    ord_46 <- _21;
    _49 <- Type.redblacktree_node_Node_left ( * node_16);
    _48 <- ([#"../red_black_tree.rs" 672 19 672 37] IsRed0.is_red _49);
    goto BB23
  }
  BB5 {
    assume { Resolve2.resolve self_1 };
    _28 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_16));
    _27 <- ([#"../red_black_tree.rs" 663 19 663 43] IsNone0.is_none _28);
    goto BB6
  }
  BB6 {
    switch (_27)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve4.resolve node_16 };
    _0 <- Type.Core_Option_Option_None;
    goto BB67
  }
  BB8 {
    _26 <- ();
    _34 <- Type.redblacktree_node_Node_left ( * node_16);
    _33 <- ([#"../red_black_tree.rs" 666 20 666 38] IsRed0.is_red _34);
    goto BB12
  }
  BB9 {
    _31 <- false;
    goto BB11
  }
  BB10 {
    _40 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_16));
    _39 <- ([#"../red_black_tree.rs" 666 43 666 66] AsRef0.as_ref _40);
    goto BB13
  }
  BB11 {
    switch (_31)
      | False -> goto BB18
      | _ -> goto BB16
      end
  }
  BB12 {
    _32 <- not _33;
    switch (_32)
      | False -> goto BB9
      | _ -> goto BB10
      end
  }
  BB13 {
    _38 <- ([#"../red_black_tree.rs" 666 43 666 75] Unwrap2.unwrap _39);
    goto BB14
  }
  BB14 {
    _37 <- Type.redblacktree_node_Node_left _38;
    assume { Resolve12.resolve _38 };
    _36 <- ([#"../red_black_tree.rs" 666 43 666 89] IsRed0.is_red _37);
    goto BB15
  }
  BB15 {
    _35 <- not _36;
    _31 <- _35;
    goto BB11
  }
  BB16 {
    _42 <- borrow_mut ( * node_16);
    node_16 <- { node_16 with current = ( ^ _42) };
    _41 <- ([#"../red_black_tree.rs" 667 20 667 40] MoveRedLeft0.move_red_left _42);
    goto BB17
  }
  BB17 {
    _30 <- ();
    goto BB19
  }
  BB18 {
    _30 <- ();
    goto BB19
  }
  BB19 {
    _44 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_16));
    node_16 <- { node_16 with current = (let Type.RedBlackTree_Node a b c d e =  * node_16 in Type.RedBlackTree_Node ( ^ _44) b c d e) };
    _45 <- key_2;
    assume { Resolve1.resolve key_2 };
    _43 <- ([#"../red_black_tree.rs" 669 20 669 45] delete_rec _44 _45);
    goto BB20
  }
  BB20 {
    assume { Resolve3.resolve r_15 };
    r_15 <- _43;
    goto BB21
  }
  BB21 {
    _20 <- ();
    goto BB22
  }
  BB22 {
    goto BB62
  }
  BB23 {
    switch (_48)
      | False -> goto BB26
      | _ -> goto BB24
      end
  }
  BB24 {
    assume { Resolve2.resolve self_1 };
    _51 <- borrow_mut ( * node_16);
    node_16 <- { node_16 with current = ( ^ _51) };
    _50 <- ([#"../red_black_tree.rs" 673 20 673 39] RotateRight0.rotate_right _51);
    goto BB25
  }
  BB25 {
    _52 <- Type.Core_Cmp_Ordering_Greater;
    ord_46 <- _52;
    _47 <- ();
    goto BB47
  }
  BB26 {
    _55 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_16));
    _54 <- ([#"../red_black_tree.rs" 676 23 676 48] IsNone0.is_none _55);
    goto BB27
  }
  BB27 {
    switch (_54)
      | False -> goto BB36
      | _ -> goto BB28
      end
  }
  BB28 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve4.resolve node_16 };
    switch (ord_46)
      | Type.Core_Cmp_Ordering_Greater -> goto BB29
      | _ -> goto BB30
      end
  }
  BB29 {
    assume { Resolve2.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB66
  }
  BB30 {
    _57 <- ();
    _63 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _63)) };
    assume { Resolve2.resolve self_1 };
    _62 <- borrow_mut ( * _63);
    _63 <- { _63 with current = ( ^ _62) };
    _61 <- ([#"../red_black_tree.rs" 680 35 680 65] Take0.take _62);
    goto BB31
  }
  BB31 {
    assume { Resolve8.resolve _63 };
    node_60 <- ([#"../red_black_tree.rs" 680 35 680 74] Unwrap1.unwrap _61);
    goto BB32
  }
  BB32 {
    assume { Resolve9.resolve _65 };
    _65 <- Type.redblacktree_node_Node_key node_60;
    assume { Resolve10.resolve _66 };
    _66 <- Type.redblacktree_node_Node_val node_60;
    _64 <- (_65, _66);
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    _0 <- Type.Core_Option_Option_Some _64;
    goto BB35
  }
  BB35 {
    goto BB65
  }
  BB36 {
    assume { Resolve2.resolve self_1 };
    _53 <- ();
    _73 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_16));
    _72 <- ([#"../red_black_tree.rs" 683 24 683 48] AsRef0.as_ref _73);
    goto BB40
  }
  BB37 {
    _67 <- false;
    goto BB39
  }
  BB38 {
    _76 <- borrow_mut ( * node_16);
    node_16 <- { node_16 with current = ( ^ _76) };
    _75 <- ([#"../red_black_tree.rs" 683 76 683 97] MoveRedRight0.move_red_right _76);
    goto BB43
  }
  BB39 {
    switch (_67)
      | False -> goto BB45
      | _ -> goto BB44
      end
  }
  BB40 {
    _71 <- ([#"../red_black_tree.rs" 683 24 683 57] Unwrap2.unwrap _72);
    goto BB41
  }
  BB41 {
    _70 <- Type.redblacktree_node_Node_left _71;
    assume { Resolve12.resolve _71 };
    _69 <- ([#"../red_black_tree.rs" 683 24 683 71] IsRed0.is_red _70);
    goto BB42
  }
  BB42 {
    _68 <- not _69;
    switch (_68)
      | False -> goto BB37
      | _ -> goto BB38
      end
  }
  BB43 {
    _74 <- not _75;
    _67 <- _74;
    goto BB39
  }
  BB44 {
    _77 <- Type.Core_Cmp_Ordering_Greater;
    ord_46 <- _77;
    _47 <- ();
    goto BB46
  }
  BB45 {
    _47 <- ();
    goto BB46
  }
  BB46 {
    goto BB47
  }
  BB47 {
    switch (ord_46)
      | Type.Core_Cmp_Ordering_Equal -> goto BB48
      | _ -> goto BB57
      end
  }
  BB48 {
    assume { Resolve1.resolve key_2 };
    _80 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_16));
    node_16 <- { node_16 with current = (let Type.RedBlackTree_Node a b c d e =  * node_16 in Type.RedBlackTree_Node a b c d ( ^ _80)) };
    kv_79 <- ([#"../red_black_tree.rs" 688 33 688 60] DeleteMinRec0.delete_min_rec _80);
    goto BB49
  }
  BB49 {
    _84 <- ();
    _81 <- ghost ([#"../red_black_tree.rs" 689 20 689 52] ());
    goto BB50
  }
  BB50 {
    _87 <- borrow_mut (Type.redblacktree_node_Node_key ( * node_16));
    node_16 <- { node_16 with current = (let Type.RedBlackTree_Node a b c d e =  * node_16 in Type.RedBlackTree_Node a b ( ^ _87) d e) };
    _86 <- borrow_mut ( * _87);
    _87 <- { _87 with current = ( ^ _86) };
    _89 <- borrow_mut (let (a, _) = kv_79 in a);
    kv_79 <- (let (a, b) = kv_79 in ( ^ _89, b));
    _88 <- borrow_mut ( * _89);
    _89 <- { _89 with current = ( ^ _88) };
    _85 <- ([#"../red_black_tree.rs" 690 20 690 60] Swap0.swap _86 _88);
    goto BB51
  }
  BB51 {
    assume { Resolve5.resolve _87 };
    assume { Resolve5.resolve _89 };
    _92 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_16));
    node_16 <- { node_16 with current = (let Type.RedBlackTree_Node a b c d e =  * node_16 in Type.RedBlackTree_Node a b c ( ^ _92) e) };
    _91 <- borrow_mut ( * _92);
    _92 <- { _92 with current = ( ^ _91) };
    _94 <- borrow_mut (let (_, a) = kv_79 in a);
    kv_79 <- (let (a, b) = kv_79 in (a,  ^ _94));
    _93 <- borrow_mut ( * _94);
    _94 <- { _94 with current = ( ^ _93) };
    _90 <- ([#"../red_black_tree.rs" 691 20 691 60] Swap1.swap _91 _93);
    goto BB52
  }
  BB52 {
    assume { Resolve6.resolve _92 };
    assume { Resolve6.resolve _94 };
    assume { Resolve7.resolve _96 };
    _96 <- kv_79;
    _95 <- Type.Core_Option_Option_Some _96;
    goto BB53
  }
  BB53 {
    assume { Resolve3.resolve r_15 };
    r_15 <- _95;
    goto BB54
  }
  BB54 {
    _20 <- ();
    goto BB55
  }
  BB55 {
    goto BB56
  }
  BB56 {
    goto BB61
  }
  BB57 {
    _98 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_16));
    node_16 <- { node_16 with current = (let Type.RedBlackTree_Node a b c d e =  * node_16 in Type.RedBlackTree_Node a b c d ( ^ _98)) };
    _99 <- key_2;
    assume { Resolve1.resolve key_2 };
    _97 <- ([#"../red_black_tree.rs" 694 24 694 50] delete_rec _98 _99);
    goto BB58
  }
  BB58 {
    assume { Resolve3.resolve r_15 };
    r_15 <- _97;
    goto BB59
  }
  BB59 {
    _20 <- ();
    goto BB60
  }
  BB60 {
    goto BB61
  }
  BB61 {
    goto BB62
  }
  BB62 {
    _101 <- borrow_mut ( * node_16);
    node_16 <- { node_16 with current = ( ^ _101) };
    _100 <- ([#"../red_black_tree.rs" 698 8 698 22] Balance0.balance _101);
    goto BB63
  }
  BB63 {
    assume { Resolve4.resolve node_16 };
    assume { Resolve3.resolve _0 };
    _0 <- r_15;
    goto BB64
  }
  BB64 {
    goto BB69
  }
  BB65 {
    assume { Resolve11.resolve node_60 };
    goto BB66
  }
  BB66 {
    goto BB67
  }
  BB67 {
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module RedBlackTree_Impl13_Delete_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 702 15 702 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 703 14 703 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 704 14 704 63] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 705 4 706 46] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) && Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 707 14 707 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl13_Delete
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl3_ModelTy as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.redblacktree_tree k v,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_option_option (k, v)
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl13_DeleteRec_Interface as DeleteRec0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete [@cfg:stackify] [#"../red_black_tree.rs" 708 4 708 55] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 702 15 702 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 703 14 703 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 704 14 704 63] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 705 4 706 46] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) && Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 707 14 707 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_None) }
    
   =
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  ghost var old_self_8 : borrowed (Type.redblacktree_tree k v);
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : isize;
  var _15 : ();
  var node_16 : borrowed (Type.redblacktree_node k v);
  var _17 : bool;
  var _18 : bool;
  var _19 : bool;
  var _20 : Type.redblacktree_tree k v;
  var _21 : bool;
  var _22 : bool;
  var _23 : Type.redblacktree_tree k v;
  var _24 : Type.redblacktree_color;
  var _25 : ();
  var r_27 : Type.core_option_option (k, v);
  var _28 : borrowed (Type.redblacktree_tree k v);
  var _29 : k;
  var _30 : ();
  var _32 : ();
  var _33 : bool;
  var _34 : Type.redblacktree_tree k v;
  var _35 : Type.redblacktree_color;
  var _36 : borrowed (Type.redblacktree_node k v);
  var _37 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _38 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _39 : ();
  ghost var _41 : ();
  var _44 : ();
  ghost var _45 : ();
  var _48 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _11 <- ();
    old_self_8 <- ghost ([#"../red_black_tree.rs" 709 23 709 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_8 };
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _13)) };
    switch ( * _13)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    node_16 <- borrow_mut (Type.core_option_option_Some_0 ( * _13));
    _13 <- { _13 with current = (let Type.Core_Option_Option_Some a =  * _13 in Type.Core_Option_Option_Some ( ^ node_16)) };
    assume { Resolve3.resolve _13 };
    _20 <- Type.redblacktree_node_Node_left ( * node_16);
    _19 <- ([#"../red_black_tree.rs" 713 20 713 38] IsRed0.is_red _20);
    goto BB8
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _13 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _13 };
    _0 <- Type.Core_Option_Option_None;
    goto BB23
  }
  BB5 {
    _17 <- false;
    goto BB7
  }
  BB6 {
    _23 <- Type.redblacktree_node_Node_right ( * node_16);
    _22 <- ([#"../red_black_tree.rs" 713 43 713 62] IsRed0.is_red _23);
    goto BB9
  }
  BB7 {
    switch (_17)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB8 {
    _18 <- not _19;
    switch (_18)
      | False -> goto BB5
      | _ -> goto BB6
      end
  }
  BB9 {
    _21 <- not _22;
    _17 <- _21;
    goto BB7
  }
  BB10 {
    _24 <- Type.RedBlackTree_Color_Red;
    node_16 <- { node_16 with current = (let Type.RedBlackTree_Node a b c d e =  * node_16 in Type.RedBlackTree_Node a _24 c d e) };
    assume { Resolve4.resolve node_16 };
    _12 <- ();
    goto BB12
  }
  BB11 {
    assume { Resolve4.resolve node_16 };
    _12 <- ();
    goto BB12
  }
  BB12 {
    assert { [#"../red_black_tree.rs" 719 8 720 61] forall h : (int) . HasHeight0.has_height ( * old_self_8) h -> Color0.color ( * self_1) = Type.RedBlackTree_Color_Black || HasHeight0.has_height ( * self_1) (h - 1) };
    _25 <- ();
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _29 <- key_2;
    assume { Resolve2.resolve key_2 };
    r_27 <- ([#"../red_black_tree.rs" 721 16 721 36] DeleteRec0.delete_rec _28 _29);
    goto BB13
  }
  BB13 {
    assert { [#"../red_black_tree.rs" 722 24 722 62] Model0.model ( * self_1) = Map.set (Model2.model old_self_8) (Model1.model key_2) (Type.Core_Option_Option_None) };
    _30 <- ();
    _34 <-  * self_1;
    _33 <- ([#"../red_black_tree.rs" 723 11 723 24] IsRed0.is_red _34);
    goto BB14
  }
  BB14 {
    switch (_33)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _35 <- Type.RedBlackTree_Color_Black;
    _38 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _38)) };
    _37 <- ([#"../red_black_tree.rs" 724 12 724 30] AsMut0.as_mut _38);
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve self_1 };
    _36 <- ([#"../red_black_tree.rs" 724 12 724 39] Unwrap0.unwrap _37);
    goto BB17
  }
  BB17 {
    _36 <- { _36 with current = (let Type.RedBlackTree_Node a b c d e =  * _36 in Type.RedBlackTree_Node a _35 c d e) };
    assume { Resolve4.resolve _36 };
    _32 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve1.resolve self_1 };
    _32 <- ();
    goto BB19
  }
  BB19 {
    assert { [#"../red_black_tree.rs" 726 8 727 58] forall h : (int) . HasHeight0.has_height ( * old_self_8) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h - 1) };
    _39 <- ();
    _44 <- ();
    _41 <- ghost ([#"../red_black_tree.rs" 728 8 728 55] match (r_27) with
      | Type.Core_Option_Option_None -> ()
      | Type.Core_Option_Option_Some _ -> ()
      end);
    goto BB20
  }
  BB20 {
    _48 <- ();
    _45 <- ghost ([#"../red_black_tree.rs" 729 8 729 42] ());
    goto BB21
  }
  BB21 {
    assume { Resolve5.resolve _0 };
    _0 <- r_27;
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module RedBlackTree_Impl13_Get_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 733 15 733 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 734 4 734 83] forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 735 4 735 62] result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl13_Get
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get [@cfg:stackify] [#"../red_black_tree.rs" 736 4 736 44] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 733 15 733 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 734 4 734 83] forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 735 4 735 62] result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    
   =
  var _0 : Type.core_option_option v;
  var self_1 : Type.redblacktree_tree k v;
  var key_2 : k;
  var _3 : ();
  ghost var _7 : ();
  var _10 : ();
  var tree_11 : Type.redblacktree_tree k v;
  var _12 : ();
  var _15 : ();
  var _16 : Type.core_option_option (Type.redblacktree_node k v);
  var _17 : isize;
  var node_18 : Type.redblacktree_node k v;
  var _19 : Type.core_cmp_ordering;
  var _20 : k;
  var _21 : k;
  var _22 : k;
  var _23 : int8;
  var _24 : Type.redblacktree_tree k v;
  var _25 : Type.redblacktree_tree k v;
  var _26 : ();
  var _27 : v;
  var _28 : v;
  var _29 : Type.redblacktree_tree k v;
  var _30 : Type.redblacktree_tree k v;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _10 <- ();
    _7 <- ghost ([#"../red_black_tree.rs" 737 8 737 42] ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve tree_11 };
    tree_11 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB2
  }
  BB2 {
    invariant bst_inv { [#"../red_black_tree.rs" 740 29 740 52] BstInvariant0.bst_invariant tree_11 };
    invariant has_mapping { [#"../red_black_tree.rs" 740 8 740 54] forall v : (v) . HasMapping0.has_mapping self_1 (Model1.model key_2) v = HasMapping0.has_mapping tree_11 (Model1.model key_2) v };
    _16 <- Type.redblacktree_tree_Tree_node tree_11;
    assume { Resolve0.resolve tree_11 };
    switch (_16)
      | Type.Core_Option_Option_Some _ -> goto BB3
      | _ -> goto BB10
      end
  }
  BB3 {
    node_18 <- Type.core_option_option_Some_0 _16;
    assume { Resolve2.resolve _16 };
    _20 <- key_2;
    _22 <- Type.redblacktree_node_Node_key node_18;
    _21 <- _22;
    assume { Resolve1.resolve _22 };
    _19 <- ([#"../red_black_tree.rs" 743 18 743 36] Cmp0.cmp _20 _21);
    goto BB4
  }
  BB4 {
    switch (_19)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB8
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _30 <- Type.redblacktree_node_Node_right node_18;
    assume { Resolve3.resolve node_18 };
    _29 <- _30;
    assume { Resolve0.resolve _30 };
    assume { Resolve0.resolve tree_11 };
    tree_11 <- _29;
    _15 <- ();
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_18 };
    absurd
  }
  BB7 {
    _25 <- Type.redblacktree_node_Node_left node_18;
    assume { Resolve3.resolve node_18 };
    _24 <- _25;
    assume { Resolve0.resolve _25 };
    assume { Resolve0.resolve tree_11 };
    tree_11 <- _24;
    _15 <- ();
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    _28 <- Type.redblacktree_node_Node_val node_18;
    assume { Resolve3.resolve node_18 };
    _27 <- _28;
    assume { Resolve4.resolve _28 };
    _0 <- Type.Core_Option_Option_Some _27;
    goto BB11
  }
  BB9 {
    goto BB2
  }
  BB10 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _16 };
    _12 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module RedBlackTree_Impl13_GetMut_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 752 15 752 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 753 14 753 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 754 4 755 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 756 4 756 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None && Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl13_GetMut
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  use mach.int.Int
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get_mut [@cfg:stackify] [#"../red_black_tree.rs" 757 4 757 56] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 752 15 752 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 753 14 753 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 754 4 755 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 756 4 756 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None && Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    
   =
  var _0 : Type.core_option_option (borrowed v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var _3 : ();
  ghost var _8 : ();
  var _11 : ();
  var tree_12 : borrowed (Type.redblacktree_tree k v);
  var _13 : ();
  var _23 : ();
  var _24 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _25 : isize;
  var node_26 : borrowed (Type.redblacktree_node k v);
  var _27 : Type.core_cmp_ordering;
  var _28 : k;
  var _29 : k;
  var _30 : k;
  var _31 : int8;
  var _32 : borrowed (Type.redblacktree_tree k v);
  var _33 : borrowed (Type.redblacktree_tree k v);
  var _34 : ();
  var _35 : borrowed v;
  var _36 : borrowed v;
  var _37 : borrowed (Type.redblacktree_tree k v);
  var _38 : borrowed (Type.redblacktree_tree k v);
  var _39 : ();
  var _40 : ();
  var _41 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _11 <- ();
    _8 <- ghost ([#"../red_black_tree.rs" 758 8 758 42] ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve tree_12 };
    tree_12 <- self_1;
    goto BB2
  }
  BB2 {
    invariant bst_inv { [#"../red_black_tree.rs" 762 29 762 52] BstInvariant0.bst_invariant ( * tree_12) };
    invariant color_inv { [#"../red_black_tree.rs" 763 31 763 56] ColorInvariant0.color_invariant ( * tree_12) };
    invariant mapping_prof_key { [#"../red_black_tree.rs" 762 8 762 54] forall v : (v) . HasMapping0.has_mapping ( ^ tree_12) (Model2.model key_2) v = HasMapping0.has_mapping ( ^ self_1) (Model2.model key_2) v };
    invariant mapping_cur_key { [#"../red_black_tree.rs" 762 8 762 54] forall v : (v) . HasMapping0.has_mapping ( * tree_12) (Model2.model key_2) v = HasMapping0.has_mapping ( * self_1) (Model2.model key_2) v };
    invariant bst_inv_proph { [#"../red_black_tree.rs" 762 8 762 54] (forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model2.model key_2 || HasMapping0.has_mapping ( * tree_12) k v = HasMapping0.has_mapping ( ^ tree_12) k v) -> BstInvariant0.bst_invariant ( ^ tree_12) -> BstInvariant0.bst_invariant ( ^ self_1) };
    invariant color_inv_proph { [#"../red_black_tree.rs" 762 8 762 54] ColorInvariant0.color_invariant ( ^ tree_12) && Color0.color ( ^ tree_12) = Color0.color ( * tree_12) -> ColorInvariant0.color_invariant ( ^ self_1) };
    invariant color_proph { [#"../red_black_tree.rs" 762 8 762 54] Color0.color ( ^ tree_12) = Color0.color ( * tree_12) -> Color0.color ( ^ self_1) = Color0.color ( * self_1) };
    invariant mapping_proph { [#"../red_black_tree.rs" 762 8 762 54] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * tree_12) k v = HasMapping0.has_mapping ( ^ tree_12) k v -> HasMapping0.has_mapping ( * self_1) k v = HasMapping0.has_mapping ( ^ self_1) k v };
    invariant height { [#"../red_black_tree.rs" 762 8 762 54] Color0.color ( ^ tree_12) = Color0.color ( * tree_12) && (forall h : (int) . HasHeight0.has_height ( * tree_12) h -> HasHeight0.has_height ( ^ tree_12) h) -> (forall h : (int) . HasHeight0.has_height ( * self_1) h -> HasHeight0.has_height ( ^ self_1) h) };
    _24 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * tree_12));
    tree_12 <- { tree_12 with current = (let Type.RedBlackTree_Tree a =  * tree_12 in Type.RedBlackTree_Tree ( ^ _24)) };
    assume { Resolve0.resolve tree_12 };
    switch ( * _24)
      | Type.Core_Option_Option_Some _ -> goto BB3
      | _ -> goto BB10
      end
  }
  BB3 {
    node_26 <- borrow_mut (Type.core_option_option_Some_0 ( * _24));
    _24 <- { _24 with current = (let Type.Core_Option_Option_Some a =  * _24 in Type.Core_Option_Option_Some ( ^ node_26)) };
    assume { Resolve2.resolve _24 };
    _28 <- key_2;
    _30 <- Type.redblacktree_node_Node_key ( * node_26);
    _29 <- _30;
    assume { Resolve1.resolve _30 };
    _27 <- ([#"../red_black_tree.rs" 776 18 776 36] Cmp0.cmp _28 _29);
    goto BB4
  }
  BB4 {
    switch (_27)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB8
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _38 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_26));
    node_26 <- { node_26 with current = (let Type.RedBlackTree_Node a b c d e =  * node_26 in Type.RedBlackTree_Node a b c d ( ^ _38)) };
    assume { Resolve3.resolve node_26 };
    _37 <- borrow_mut ( * _38);
    _38 <- { _38 with current = ( ^ _37) };
    assume { Resolve0.resolve _38 };
    assume { Resolve0.resolve tree_12 };
    tree_12 <- _37;
    _23 <- ();
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_26 };
    absurd
  }
  BB7 {
    _33 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_26));
    node_26 <- { node_26 with current = (let Type.RedBlackTree_Node a b c d e =  * node_26 in Type.RedBlackTree_Node ( ^ _33) b c d e) };
    assume { Resolve3.resolve node_26 };
    _32 <- borrow_mut ( * _33);
    _33 <- { _33 with current = ( ^ _32) };
    assume { Resolve0.resolve _33 };
    assume { Resolve0.resolve tree_12 };
    tree_12 <- _32;
    _23 <- ();
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    _36 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_26));
    node_26 <- { node_26 with current = (let Type.RedBlackTree_Node a b c d e =  * node_26 in Type.RedBlackTree_Node a b c ( ^ _36) e) };
    assume { Resolve3.resolve node_26 };
    _35 <- borrow_mut ( * _36);
    _36 <- { _36 with current = ( ^ _35) };
    _0 <- Type.Core_Option_Option_Some _35;
    assume { Resolve4.resolve _36 };
    goto BB11
  }
  BB9 {
    goto BB2
  }
  BB10 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _24 };
    _13 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module RedBlackTree_Impl14
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.redblacktree_color
  clone RedBlackTree_Impl14_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.redblacktree_color, val clone' = Clone0.clone'
end
module RedBlackTree_Impl15
  
end
module RedBlackTree_Impl2_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl2
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone RedBlackTree_Impl3_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_node k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_node k v,
  type modelTy = ModelTy0.modelTy
end
