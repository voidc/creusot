module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type splitborrow_myint  =
    | SplitBorrow_MyInt usize
    
  let function splitborrow_myint_MyInt_0 (self : splitborrow_myint) : usize =
    match (self) with
      | SplitBorrow_MyInt a -> a
      end
end
module SplitBorrow_Z_Interface
  val z [@cfg:stackify] (_ : ()) : bool
end
module SplitBorrow_Z
  let rec cfg z [@cfg:stackify] [#"../split_borrow.rs" 5 0 5 14] (_ : ()) : bool =
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- true;
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module SplitBorrow_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module SplitBorrow_F
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = (Type.splitborrow_myint, Type.splitborrow_myint)
  clone SplitBorrow_Z_Interface as Z0
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = Type.splitborrow_myint
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = Type.splitborrow_myint,
  type t2 = Type.splitborrow_myint, predicate Resolve0.resolve = Resolve2.resolve,
  predicate Resolve1.resolve = Resolve2.resolve
  let rec cfg f [@cfg:stackify] [#"../split_borrow.rs" 9 0 9 10] (_ : ()) : () =
  var _0 : ();
  var x_1 : (Type.splitborrow_myint, Type.splitborrow_myint);
  var _2 : Type.splitborrow_myint;
  var _3 : Type.splitborrow_myint;
  var y_4 : borrowed (Type.splitborrow_myint, Type.splitborrow_myint);
  var _5 : ();
  var _6 : bool;
  var _7 : Type.splitborrow_myint;
  var _8 : Type.splitborrow_myint;
  var _9 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.SplitBorrow_MyInt (1 : usize);
    _3 <- Type.SplitBorrow_MyInt (2 : usize);
    x_1 <- (_2, _3);
    y_4 <- borrow_mut x_1;
    x_1 <-  ^ y_4;
    assume { Resolve0.resolve x_1 };
    _6 <- ([#"../split_borrow.rs" 13 7 13 10] Z0.z ());
    goto BB1
  }
  BB1 {
    switch (_6)
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    _7 <- Type.SplitBorrow_MyInt (4 : usize);
    y_4 <- { y_4 with current = (let (a, b) =  * y_4 in (a, _7)) };
    _5 <- ();
    goto BB4
  }
  BB3 {
    _8 <- Type.SplitBorrow_MyInt (10 : usize);
    y_4 <- { y_4 with current = (let (a, b) =  * y_4 in (_8, b)) };
    _5 <- ();
    goto BB4
  }
  BB4 {
    _9 <- Type.splitborrow_myint_MyInt_0 (let (a, _) =  * y_4 in a);
    assume { Resolve1.resolve y_4 };
    _0 <- ();
    return _0
  }
  
end
