module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_cell_unsafecell 't =
    | Core_Cell_UnsafeCell 't
    
  type core_cell_cell 't =
    | Core_Cell_Cell (core_cell_unsafecell 't)
    
  type c02_cell 't 'i =
    | C02_Cell (core_cell_cell 't) 'i
    
  let function c02_cell_Cell_ghost_inv (self : c02_cell 't 'i) : 'i =
    match (self) with
      | C02_Cell _ a -> a
      end
  type c02_fib  =
    | C02_Fib usize
    
  let function c02_fib_Fib_ix (self : c02_fib) : usize =
    match (self) with
      | C02_Fib a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module C02_Inv_Inv_Interface
  type self
  type t
  use prelude.Prelude
  predicate inv (self : self) (x : t)
end
module C02_Inv_Inv
  type self
  type t
  use prelude.Prelude
  predicate inv [#"../02.rs" 7 4 7 32] (self : self) (x : t)
end
module C02_Impl0_Get_Interface
  type t
  type i
  use prelude.Prelude
  use Type
  clone C02_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val get [@cfg:stackify] (self : Type.c02_cell t i) : t
    ensures { [#"../02.rs" 18 4 18 42] Inv0.inv (Type.c02_cell_Cell_ghost_inv self) result }
    
end
module C02_Impl0_Get
  type t
  type i
  use prelude.Prelude
  use Type
  clone C02_Inv_Inv as Inv0 with type self = i, type t = t
  val get [@cfg:stackify] (self : Type.c02_cell t i) : t
    ensures { [#"../02.rs" 18 4 18 42] Inv0.inv (Type.c02_cell_Cell_ghost_inv self) result }
    
end
module C02_Impl0_Set_Interface
  type t
  type i
  use prelude.Prelude
  use Type
  clone C02_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val set [@cfg:stackify] (self : Type.c02_cell t i) (v : t) : ()
    requires {[#"../02.rs" 24 4 24 38] Inv0.inv (Type.c02_cell_Cell_ghost_inv self) v}
    
end
module C02_Impl0_Set
  type t
  type i
  use prelude.Prelude
  use Type
  clone C02_Inv_Inv as Inv0 with type self = i, type t = t
  val set [@cfg:stackify] (self : Type.c02_cell t i) (v : t) : ()
    requires {[#"../02.rs" 24 4 24 38] Inv0.inv (Type.c02_cell_Cell_ghost_inv self) v}
    
end
module C02_Fib_Interface
  use mach.int.Int
  function fib (i : int) : int
end
module C02_Fib
  use mach.int.Int
  use mach.int.Int32
  function fib [#"../02.rs" 32 0 32 25] (i : int) : int
  axiom def : forall i : int . fib i = ([#"../02.rs" 30 0 30 8] if i <= 0 then
    0
  else
    if i = 1 then 1 else fib (i - 1) + fib (i - 2)
  )
  axiom fib_spec : forall i : int . true
end
module C02_Fib_Impl
  use mach.int.Int
  use mach.int.Int32
  let rec ghost function fib (i : int) : int
    variant {[#"../02.rs" 31 10 31 11] i}
    
   =
    [#"../02.rs" 30 0 30 8] if i <= 0 then 0 else if pure {i = 1} then 1 else fib (i - 1) + fib (i - 2)
end
module C02_LemmaFibBound_Interface
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  clone C02_Fib_Interface as Fib0 with axiom .
  function lemma_fib_bound (i : int) : ()
end
module C02_LemmaFibBound
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  clone C02_Fib_Interface as Fib0 with axiom .
  function lemma_fib_bound [#"../02.rs" 46 0 46 30] (i : int) : ()
  axiom def : forall i : int . lemma_fib_bound i = ([#"../02.rs" 42 0 42 8] if i = 0 then
    ()
  else
    if i = 1 then () else let _ = lemma_fib_bound (i - 2) in lemma_fib_bound (i - 1)
  )
  axiom lemma_fib_bound_spec : forall i : int . ([#"../02.rs" 43 11 43 17] 0 <= i) -> ([#"../02.rs" 44 10 44 28] Fib0.fib i <= Power.power 2 i)
end
module C02_LemmaFibBound_Impl
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  clone C02_Fib as Fib0 with axiom .
  let rec ghost function lemma_fib_bound (i : int) : ()
    requires {[#"../02.rs" 43 11 43 17] 0 <= i}
    ensures { [#"../02.rs" 44 10 44 28] Fib0.fib i <= Power.power 2 i }
    variant {[#"../02.rs" 45 10 45 11] i}
    
   =
    [#"../02.rs" 42 0 42 8] if pure {i = 0} then
      ()
    else
      if pure {i = 1} then () else let _ = lemma_fib_bound (i - 2) in lemma_fib_bound (i - 1)
    
end
module C02_LemmaMaxInt_Interface
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  use prelude.Prelude
  use mach.int.UInt64
  function lemma_max_int (_ : ()) : ()
end
module C02_LemmaMaxInt
  use mach.int.Int
  use mach.int.Int32
  use int.Power
  use prelude.Prelude
  use mach.int.UInt64
  function lemma_max_int [#"../02.rs" 60 0 60 22] (_ : ()) : ()
  axiom lemma_max_int_spec : [#"../02.rs" 59 10 59 49] Power.power 2 63 < 18446744073709551615
end
module C02_Impl1_Inv_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  predicate inv (self : Type.c02_fib) (v : Type.core_option_option usize)
end
module C02_Impl1_Inv
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone C02_Fib_Interface as Fib0 with axiom .
  predicate inv [#"../02.rs" 67 4 67 43] (self : Type.c02_fib) (v : Type.core_option_option usize) =
    [#"../02.rs" 69 12 72 13] match (v) with
      | Type.Core_Option_Option_None -> true
      | Type.Core_Option_Option_Some i -> UInt64.to_int i = Fib0.fib (UInt64.to_int (Type.c02_fib_Fib_ix self))
      end
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module C02_FibCell_Interface
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate fib_cell (v : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global))
    
end
module C02_FibCell
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib),
  type a = Type.alloc_alloc_global, axiom .
  predicate fib_cell [#"../02.rs" 80 0 80 32] (v : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global))
    
   =
    [#"../02.rs" 81 4 83 5] forall i : (int) . UInt64.to_int (Type.c02_fib_Fib_ix (Type.c02_cell_Cell_ghost_inv (Seq.get (Model0.model v) i))) = i
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module C02_Impl1
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone C02_Fib as Fib0 with axiom .
  clone C02_Impl1_Inv as Inv0 with function Fib0.fib = Fib0.fib
  clone C02_Inv_Inv_Interface as Inv1 with type self = Type.c02_fib, type t = Type.core_option_option usize,
  predicate inv = Inv0.inv
end
module C02_FibMemo_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone C02_Fib_Interface as Fib0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone C02_FibCell_Interface as FibCell0
  val fib_memo [@cfg:stackify] (mem : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global)) (i : usize) : usize
    requires {[#"../02.rs" 86 11 86 25] FibCell0.fib_cell mem}
    requires {[#"../02.rs" 87 11 87 28] UInt64.to_int i < Seq.length (Model0.model mem)}
    requires {[#"../02.rs" 89 11 89 19] UInt64.to_int i <= 63}
    ensures { [#"../02.rs" 88 10 88 28] UInt64.to_int result = Fib0.fib (UInt64.to_int i) }
    
end
module C02_FibMemo
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone C02_LemmaMaxInt as LemmaMaxInt0 with axiom .
  clone C02_Fib as Fib0 with axiom .
  clone C02_LemmaFibBound as LemmaFibBound0 with function Fib0.fib = Fib0.fib, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib),
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib),
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone C02_FibCell as FibCell0 with function Model0.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)
  clone C02_Impl1_Inv as Inv0 with function Fib0.fib = Fib0.fib
  clone C02_Impl0_Set_Interface as Set0 with type t = Type.core_option_option usize, type i = Type.c02_fib,
  predicate Inv0.inv = Inv0.inv
  clone C02_Impl0_Get_Interface as Get0 with type t = Type.core_option_option usize, type i = Type.c02_fib,
  predicate Inv0.inv = Inv0.inv
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.c02_cell (Type.core_option_option usize) (Type.c02_fib),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg fib_memo [@cfg:stackify] [#"../02.rs" 90 0 90 50] (mem : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global)) (i : usize) : usize
    requires {[#"../02.rs" 86 11 86 25] FibCell0.fib_cell mem}
    requires {[#"../02.rs" 87 11 87 28] UInt64.to_int i < Seq.length (Model0.model mem)}
    requires {[#"../02.rs" 89 11 89 19] UInt64.to_int i <= 63}
    ensures { [#"../02.rs" 88 10 88 28] UInt64.to_int result = Fib0.fib (UInt64.to_int i) }
    
   =
  var _0 : usize;
  var mem_1 : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global);
  var i_2 : usize;
  var _7 : Type.core_option_option usize;
  var _8 : Type.c02_cell (Type.core_option_option usize) (Type.c02_fib);
  var _9 : Type.c02_cell (Type.core_option_option usize) (Type.c02_fib);
  var _10 : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global);
  var _11 : usize;
  var _12 : isize;
  var v_13 : usize;
  var fib_i_14 : usize;
  var _15 : bool;
  var _16 : usize;
  var _17 : bool;
  var _18 : usize;
  ghost var _19 : ();
  var _22 : ();
  ghost var _23 : ();
  var _26 : ();
  var _27 : usize;
  var _28 : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global);
  var _29 : usize;
  var _30 : usize;
  var _31 : usize;
  var _32 : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global);
  var _33 : usize;
  var _34 : usize;
  var _35 : ();
  var _37 : ();
  var _38 : Type.c02_cell (Type.core_option_option usize) (Type.c02_fib);
  var _39 : Type.c02_cell (Type.core_option_option usize) (Type.c02_fib);
  var _40 : Type.alloc_vec_vec (Type.c02_cell (Type.core_option_option usize) (Type.c02_fib)) (Type.alloc_alloc_global);
  var _41 : usize;
  var _42 : Type.core_option_option usize;
  var _43 : usize;
  {
    mem_1 <- mem;
    i_2 <- i;
    goto BB0
  }
  BB0 {
    _10 <- mem_1;
    _11 <- i_2;
    _9 <- ([#"../02.rs" 91 10 91 16] Index0.index _10 _11);
    goto BB1
  }
  BB1 {
    _8 <- _9;
    _7 <- ([#"../02.rs" 91 10 91 22] Get0.get _8);
    goto BB2
  }
  BB2 {
    switch (_7)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    _16 <- i_2;
    _15 <- ([#"../02.rs" 94 27 94 33] _16 = (0 : usize));
    switch (_15)
      | False -> goto BB7
      | _ -> goto BB6
      end
  }
  BB4 {
    absurd
  }
  BB5 {
    v_13 <- Type.core_option_option_Some_0 _7;
    _0 <- v_13;
    goto BB18
  }
  BB6 {
    fib_i_14 <- (0 : usize);
    goto BB15
  }
  BB7 {
    _18 <- i_2;
    _17 <- ([#"../02.rs" 96 22 96 28] _18 = (1 : usize));
    switch (_17)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    fib_i_14 <- (1 : usize);
    goto BB14
  }
  BB9 {
    _22 <- ();
    _19 <- ghost ([#"../02.rs" 99 16 99 42] LemmaMaxInt0.lemma_max_int ());
    goto BB10
  }
  BB10 {
    _26 <- ();
    _23 <- ghost ([#"../02.rs" 100 16 100 52] LemmaFibBound0.lemma_fib_bound 0);
    goto BB11
  }
  BB11 {
    _28 <- mem_1;
    _30 <- i_2;
    _29 <- ([#"../02.rs" 101 30 101 35] _30 - (1 : usize));
    _27 <- ([#"../02.rs" 101 16 101 36] fib_memo _28 _29);
    goto BB12
  }
  BB12 {
    _32 <- mem_1;
    _34 <- i_2;
    _33 <- ([#"../02.rs" 101 53 101 58] _34 - (2 : usize));
    _31 <- ([#"../02.rs" 101 39 101 59] fib_memo _32 _33);
    goto BB13
  }
  BB13 {
    fib_i_14 <- ([#"../02.rs" 101 16 101 59] _27 + _31);
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    assert { [#"../02.rs" 103 28 103 45] UInt64.to_int fib_i_14 = Fib0.fib (UInt64.to_int i_2) };
    _35 <- ();
    _40 <- mem_1;
    _41 <- i_2;
    _39 <- ([#"../02.rs" 104 12 104 18] Index0.index _40 _41);
    goto BB16
  }
  BB16 {
    _38 <- _39;
    _43 <- fib_i_14;
    _42 <- Type.Core_Option_Option_Some _43;
    _37 <- ([#"../02.rs" 104 12 104 35] Set0.set _38 _42);
    goto BB17
  }
  BB17 {
    _0 <- fib_i_14;
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
