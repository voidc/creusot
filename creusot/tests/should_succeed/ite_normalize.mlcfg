module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type itenormalize_expr  =
    | IteNormalize_Expr_IfThenElse (itenormalize_expr) (itenormalize_expr) (itenormalize_expr)
    | IteNormalize_Expr_Var usize
    | IteNormalize_Expr_True
    | IteNormalize_Expr_False
    
  let function itenormalize_expr_Var_v (self : itenormalize_expr) : usize =
    match (self) with
      | IteNormalize_Expr_IfThenElse _ _ _ -> any usize
      | IteNormalize_Expr_Var a -> a
      | IteNormalize_Expr_True -> any usize
      | IteNormalize_Expr_False -> any usize
      end
  let function itenormalize_expr_IfThenElse_c (self : itenormalize_expr) : itenormalize_expr =
    match (self) with
      | IteNormalize_Expr_IfThenElse a _ _ -> a
      | IteNormalize_Expr_Var _ -> any itenormalize_expr
      | IteNormalize_Expr_True -> any itenormalize_expr
      | IteNormalize_Expr_False -> any itenormalize_expr
      end
  let function itenormalize_expr_IfThenElse_t (self : itenormalize_expr) : itenormalize_expr =
    match (self) with
      | IteNormalize_Expr_IfThenElse _ a _ -> a
      | IteNormalize_Expr_Var _ -> any itenormalize_expr
      | IteNormalize_Expr_True -> any itenormalize_expr
      | IteNormalize_Expr_False -> any itenormalize_expr
      end
  let function itenormalize_expr_IfThenElse_e (self : itenormalize_expr) : itenormalize_expr =
    match (self) with
      | IteNormalize_Expr_IfThenElse _ _ a -> a
      | IteNormalize_Expr_Var _ -> any itenormalize_expr
      | IteNormalize_Expr_True -> any itenormalize_expr
      | IteNormalize_Expr_False -> any itenormalize_expr
      end
  type itenormalize_btreemap 'k 'v
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module IteNormalize_Impl7_Variable_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  val variable [@cfg:stackify] (v : usize) : Type.itenormalize_expr
end
module IteNormalize_Impl7_Variable
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  let rec cfg variable [@cfg:stackify] [#"../ite_normalize.rs" 110 4 110 37] (v : usize) : Type.itenormalize_expr =
  var _0 : Type.itenormalize_expr;
  var v_1 : usize;
  var _2 : usize;
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _2 <- v_1;
    _0 <- Type.IteNormalize_Expr_Var _2;
    return _0
  }
  
end
module IteNormalize_Impl5_From_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  val from [@cfg:stackify] (a : usize) : Type.itenormalize_expr
end
module IteNormalize_Impl5_From
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone IteNormalize_Impl7_Variable_Interface as Variable0
  let rec cfg from [@cfg:stackify] [#"../ite_normalize.rs" 89 4 89 29] (a : usize) : Type.itenormalize_expr =
  var _0 : Type.itenormalize_expr;
  var a_1 : usize;
  var _2 : usize;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    _0 <- ([#"../ite_normalize.rs" 90 8 90 25] Variable0.variable _2);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module IteNormalize_Impl6_From_Interface
  use Type
  val from [@cfg:stackify] (b : bool) : Type.itenormalize_expr
end
module IteNormalize_Impl6_From
  use Type
  let rec cfg from [@cfg:stackify] [#"../ite_normalize.rs" 95 4 95 28] (b : bool) : Type.itenormalize_expr =
  var _0 : Type.itenormalize_expr;
  var b_1 : bool;
  var _2 : bool;
  {
    b_1 <- b;
    goto BB0
  }
  BB0 {
    _2 <- b_1;
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _0 <- Type.IteNormalize_Expr_True;
    goto BB3
  }
  BB2 {
    _0 <- Type.IteNormalize_Expr_False;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module IteNormalize_Impl0_New_Interface
  type k
  type v
  use Type
  val new [@cfg:stackify] (_ : ()) : Type.itenormalize_btreemap k v
end
module IteNormalize_Impl0_New
  type k
  type v
  use Type
  val new [@cfg:stackify] (_ : ()) : Type.itenormalize_btreemap k v
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl5_Model_Interface
  type t
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : Type.core_option_option t) : Type.core_option_option ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl5_Model
  type t
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : Type.core_option_option t) : Type.core_option_option ModelTy0.modelTy =
    match (self) with
      | Type.Core_Option_Option_Some t -> Type.Core_Option_Option_Some (Model0.model t)
      | Type.Core_Option_Option_None -> Type.Core_Option_Option_None
      end
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module IteNormalize_Impl2_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option ModelTy1.modelTy)
end
module IteNormalize_Impl2_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.itenormalize_btreemap k v) : Map.map ModelTy0.modelTy (Type.core_option_option ModelTy1.modelTy)
    
end
module IteNormalize_Impl2_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model [#"../ite_normalize.rs" 48 4 48 35] (self : Type.itenormalize_btreemap k v) : Map.map ModelTy0.modelTy (Type.core_option_option ModelTy1.modelTy)
    
end
module IteNormalize_Impl0_Get_Interface
  type k
  type v
  use map.Map
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy3 with type self = v
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = v, type ModelTy0.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl5_Model_Interface as Model0 with type t = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone IteNormalize_Impl2_ModelTy as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Type.itenormalize_btreemap k v,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
  type ModelTy0.modelTy = ModelTy2.modelTy
  val get [@cfg:stackify] (self : Type.itenormalize_btreemap k v) (key : k) : Type.core_option_option v
    ensures { [#"../ite_normalize.rs" 17 14 17 42] Model0.model result = Map.get (Model1.model self) (Model2.model key) }
    
end
module IteNormalize_Impl0_Get
  type k
  type v
  use map.Map
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy3 with type self = v
  clone CreusotContracts_Logic_Model_Model_Model as Model6 with type self = v, type ModelTy0.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = v, type ModelTy0.modelTy = ModelTy3.modelTy,
  function Model0.model = Model6.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = v, type ModelTy0.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl5_Model as Model0 with type t = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model5 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model5.model
  clone IteNormalize_Impl2_Model as Model4 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy
  clone IteNormalize_Impl2_ModelTy as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = Type.itenormalize_btreemap k v,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  val get [@cfg:stackify] (self : Type.itenormalize_btreemap k v) (key : k) : Type.core_option_option v
    ensures { [#"../ite_normalize.rs" 17 14 17 42] Model0.model result = Map.get (Model1.model self) (Model2.model key) }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module IteNormalize_Impl0_Insert_Interface
  type k
  type v
  use map.Map
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = v
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model2 with type self = v,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone IteNormalize_Impl2_ModelTy as ModelTy2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  type ModelTy1.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model3 with type t = Type.itenormalize_btreemap k v,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone IteNormalize_Impl2_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  val insert [@cfg:stackify] (self : borrowed (Type.itenormalize_btreemap k v)) (key : k) (value : v) : Type.core_option_option v
    ensures { [#"../ite_normalize.rs" 26 4 26 106] forall i : (k) . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Type.Core_Option_Option_Some (Model2.model value)
    else
      Map.get (Model3.model self) (Model1.model i)
    ) }
    
end
module IteNormalize_Impl0_Insert
  type k
  type v
  use map.Map
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = v
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = v, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone IteNormalize_Impl2_ModelTy as ModelTy2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  type ModelTy1.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone IteNormalize_Impl2_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  type ModelTy1.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Type.itenormalize_btreemap k v,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model0.model
  val insert [@cfg:stackify] (self : borrowed (Type.itenormalize_btreemap k v)) (key : k) (value : v) : Type.core_option_option v
    ensures { [#"../ite_normalize.rs" 26 4 26 106] forall i : (k) . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Type.Core_Option_Option_Some (Model2.model value)
    else
      Map.get (Model3.model self) (Model1.model i)
    ) }
    
end
module IteNormalize_Impl1_Clone_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = k
  clone IteNormalize_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.itenormalize_btreemap k v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone IteNormalize_Impl2_Model_Interface as Model1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy1.modelTy, type ModelTy1.modelTy = ModelTy2.modelTy
  val clone' [@cfg:stackify] (self : Type.itenormalize_btreemap k v) : Type.itenormalize_btreemap k v
    ensures { [#"../ite_normalize.rs" 37 14 37 30] Model0.model self = Model1.model result }
    
end
module IteNormalize_Impl1_Clone
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = k
  clone IteNormalize_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone IteNormalize_Impl2_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.itenormalize_btreemap k v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val clone' [@cfg:stackify] (self : Type.itenormalize_btreemap k v) : Type.itenormalize_btreemap k v
    ensures { [#"../ite_normalize.rs" 37 14 37 30] Model0.model self = Model1.model result }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : t) : t
    ensures { result = self }
    
end
module Alloc_Boxed_Impl12_Clone
  type t
  type a
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : t) : t
    ensures { result = self }
    
end
module Alloc_Boxed_Impl12
  type t
  type a
end
module IteNormalize_Impl4_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 75 14 75 29] self = result }
    
end
module IteNormalize_Impl4_Clone
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.UInt64
  clone Alloc_Boxed_Impl12_Clone_Interface as Clone0 with type t = Type.itenormalize_expr,
  type a = Type.alloc_alloc_global
  let rec cfg clone' [@cfg:stackify] [#"../ite_normalize.rs" 76 4 76 27] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 75 14 75 29] self = result }
    
   =
  var _0 : Type.itenormalize_expr;
  var self_1 : Type.itenormalize_expr;
  var _3 : isize;
  var c_4 : Type.itenormalize_expr;
  var t_5 : Type.itenormalize_expr;
  var e_6 : Type.itenormalize_expr;
  var _7 : Type.itenormalize_expr;
  var _8 : Type.itenormalize_expr;
  var _9 : Type.itenormalize_expr;
  var _10 : Type.itenormalize_expr;
  var _11 : Type.itenormalize_expr;
  var _12 : Type.itenormalize_expr;
  var v_13 : usize;
  var _14 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.IteNormalize_Expr_IfThenElse _ _ _ -> goto BB3
      | Type.IteNormalize_Expr_Var _ -> goto BB10
      | Type.IteNormalize_Expr_True -> goto BB11
      | Type.IteNormalize_Expr_False -> goto BB1
      end
  }
  BB1 {
    _0 <- Type.IteNormalize_Expr_False;
    goto BB12
  }
  BB2 {
    absurd
  }
  BB3 {
    c_4 <- Type.itenormalize_expr_IfThenElse_c self_1;
    t_5 <- Type.itenormalize_expr_IfThenElse_t self_1;
    e_6 <- Type.itenormalize_expr_IfThenElse_e self_1;
    _8 <- c_4;
    _7 <- ([#"../ite_normalize.rs" 79 38 79 47] Clone0.clone' _8);
    goto BB4
  }
  BB4 {
    _10 <- t_5;
    _9 <- ([#"../ite_normalize.rs" 79 52 79 61] Clone0.clone' _10);
    goto BB5
  }
  BB5 {
    _12 <- e_6;
    _11 <- ([#"../ite_normalize.rs" 79 66 79 75] Clone0.clone' _12);
    goto BB6
  }
  BB6 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _7 _9 _11;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB12
  }
  BB10 {
    v_13 <- Type.itenormalize_expr_Var_v self_1;
    _14 <- v_13;
    _0 <- Type.IteNormalize_Expr_Var _14;
    goto BB12
  }
  BB11 {
    _0 <- Type.IteNormalize_Expr_True;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module IteNormalize_Impl7_Ite_Interface
  use Type
  val ite [@cfg:stackify] (c : Type.itenormalize_expr) (t : Type.itenormalize_expr) (e : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 105 14 105 91] result = Type.IteNormalize_Expr_IfThenElse c t e }
    
end
module IteNormalize_Impl7_Ite
  use Type
  let rec cfg ite [@cfg:stackify] [#"../ite_normalize.rs" 106 4 106 49] (c : Type.itenormalize_expr) (t : Type.itenormalize_expr) (e : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 105 14 105 91] result = Type.IteNormalize_Expr_IfThenElse c t e }
    
   =
  var _0 : Type.itenormalize_expr;
  var c_1 : Type.itenormalize_expr;
  var t_2 : Type.itenormalize_expr;
  var e_3 : Type.itenormalize_expr;
  var _5 : Type.itenormalize_expr;
  var _6 : Type.itenormalize_expr;
  var _7 : Type.itenormalize_expr;
  var _8 : Type.itenormalize_expr;
  var _9 : Type.itenormalize_expr;
  var _10 : Type.itenormalize_expr;
  {
    c_1 <- c;
    t_2 <- t;
    e_3 <- e;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _6 <- c_1;
    _5 <- _6;
    goto BB2
  }
  BB2 {
    _8 <- t_2;
    _7 <- _8;
    goto BB3
  }
  BB3 {
    _10 <- e_3;
    _9 <- _10;
    goto BB4
  }
  BB4 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _5 _7 _9;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module IteNormalize_Impl7_IsNormalized_Interface
  use Type
  predicate is_normalized (self : Type.itenormalize_expr)
end
module IteNormalize_Impl7_IsNormalized
  use Type
  predicate is_normalized [#"../ite_normalize.rs" 135 4 135 34] (self : Type.itenormalize_expr) =
    [#"../ite_normalize.rs" 136 8 149 9] match (self) with
      | Type.IteNormalize_Expr_IfThenElse c t e -> is_normalized c && is_normalized t && is_normalized e && match (c) with
        | Type.IteNormalize_Expr_IfThenElse _ _ _ -> false
        | _ -> true
        end
      | Type.IteNormalize_Expr_Var _ -> true
      | Type.IteNormalize_Expr_True -> true
      | Type.IteNormalize_Expr_False -> true
      end
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module IteNormalize_Impl4
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.itenormalize_expr
  clone IteNormalize_Impl4_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.itenormalize_expr, val clone' = Clone0.clone'
end
module IteNormalize_Impl7_Transpose_Interface
  use Type
  clone IteNormalize_Impl7_IsNormalized_Interface as IsNormalized0
  val transpose [@cfg:stackify] (self : Type.itenormalize_expr) (a : Type.itenormalize_expr) (b : Type.itenormalize_expr) : Type.itenormalize_expr
    requires {[#"../ite_normalize.rs" 114 15 114 35] IsNormalized0.is_normalized self}
    requires {[#"../ite_normalize.rs" 115 15 115 32] IsNormalized0.is_normalized a}
    requires {[#"../ite_normalize.rs" 116 15 116 32] IsNormalized0.is_normalized b}
    ensures { [#"../ite_normalize.rs" 117 14 117 36] IsNormalized0.is_normalized result }
    
end
module IteNormalize_Impl7_Transpose
  use Type
  clone IteNormalize_Impl7_IsNormalized as IsNormalized0
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone IteNormalize_Impl4_Clone_Interface as Clone0
  let rec cfg transpose [@cfg:stackify] [#"../ite_normalize.rs" 119 4 119 52] (self : Type.itenormalize_expr) (a : Type.itenormalize_expr) (b : Type.itenormalize_expr) : Type.itenormalize_expr
    requires {[#"../ite_normalize.rs" 114 15 114 35] IsNormalized0.is_normalized self}
    requires {[#"../ite_normalize.rs" 115 15 115 32] IsNormalized0.is_normalized a}
    requires {[#"../ite_normalize.rs" 116 15 116 32] IsNormalized0.is_normalized b}
    ensures { [#"../ite_normalize.rs" 117 14 117 36] IsNormalized0.is_normalized result }
    variant {[#"../ite_normalize.rs" 118 14 118 18] self}
    
   =
  var _0 : Type.itenormalize_expr;
  var self_1 : Type.itenormalize_expr;
  var a_2 : Type.itenormalize_expr;
  var b_3 : Type.itenormalize_expr;
  var _9 : isize;
  var c_10 : Type.itenormalize_expr;
  var t_11 : Type.itenormalize_expr;
  var e_12 : Type.itenormalize_expr;
  var _13 : Type.itenormalize_expr;
  var _14 : Type.itenormalize_expr;
  var _15 : Type.itenormalize_expr;
  var _16 : Type.itenormalize_expr;
  var _17 : Type.itenormalize_expr;
  var _18 : Type.itenormalize_expr;
  var _19 : Type.itenormalize_expr;
  var _20 : Type.itenormalize_expr;
  var _21 : Type.itenormalize_expr;
  var _22 : Type.itenormalize_expr;
  var _23 : Type.itenormalize_expr;
  var _24 : Type.itenormalize_expr;
  var _25 : Type.itenormalize_expr;
  var _26 : Type.itenormalize_expr;
  var _27 : Type.itenormalize_expr;
  var _28 : Type.itenormalize_expr;
  var _29 : Type.itenormalize_expr;
  var _30 : Type.itenormalize_expr;
  var _31 : Type.itenormalize_expr;
  {
    self_1 <- self;
    a_2 <- a;
    b_3 <- b;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    switch (self_1)
      | Type.IteNormalize_Expr_IfThenElse _ _ _ -> goto BB7
      | Type.IteNormalize_Expr_Var _ -> goto BB20
      | Type.IteNormalize_Expr_True -> goto BB27
      | Type.IteNormalize_Expr_False -> goto BB5
      end
  }
  BB5 {
    _0 <- b_3;
    goto BB28
  }
  BB6 {
    absurd
  }
  BB7 {
    c_10 <- Type.itenormalize_expr_IfThenElse_c self_1;
    t_11 <- Type.itenormalize_expr_IfThenElse_t self_1;
    e_12 <- Type.itenormalize_expr_IfThenElse_e self_1;
    _13 <- c_10;
    _16 <- t_11;
    _18 <- a_2;
    _17 <- ([#"../ite_normalize.rs" 123 40 123 49] Clone0.clone' _18);
    goto BB8
  }
  BB8 {
    _20 <- b_3;
    _19 <- ([#"../ite_normalize.rs" 123 51 123 60] Clone0.clone' _20);
    goto BB9
  }
  BB9 {
    _15 <- ([#"../ite_normalize.rs" 123 28 123 61] transpose _16 _17 _19);
    goto BB10
  }
  BB10 {
    _14 <- _15;
    goto BB11
  }
  BB11 {
    _23 <- e_12;
    _24 <- a_2;
    _25 <- b_3;
    _22 <- ([#"../ite_normalize.rs" 124 28 124 45] transpose _23 _24 _25);
    goto BB12
  }
  BB12 {
    _21 <- _22;
    goto BB13
  }
  BB13 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _13 _14 _21;
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB28
  }
  BB20 {
    _27 <- self_1;
    _26 <- _27;
    goto BB21
  }
  BB21 {
    _29 <- a_2;
    _28 <- _29;
    goto BB22
  }
  BB22 {
    _31 <- b_3;
    _30 <- _31;
    goto BB23
  }
  BB23 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _26 _28 _30;
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB28
  }
  BB27 {
    _0 <- a_2;
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    return _0
  }
  
end
module IteNormalize_Impl7_Normalize_Interface
  use prelude.Prelude
  use Type
  clone IteNormalize_Impl7_IsNormalized_Interface as IsNormalized0
  val normalize [@cfg:stackify] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 152 14 152 36] IsNormalized0.is_normalized result }
    
end
module IteNormalize_Impl7_Normalize
  use prelude.Prelude
  use Type
  clone IteNormalize_Impl7_IsNormalized as IsNormalized0
  use mach.int.Int
  use mach.int.Int64
  clone IteNormalize_Impl4_Clone_Interface as Clone0
  clone IteNormalize_Impl7_Transpose_Interface as Transpose0 with predicate IsNormalized0.is_normalized = IsNormalized0.is_normalized
  let rec cfg normalize [@cfg:stackify] [#"../ite_normalize.rs" 154 4 154 35] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 152 14 152 36] IsNormalized0.is_normalized result }
    variant {[#"../ite_normalize.rs" 153 14 153 18] self}
    
   =
  var _0 : Type.itenormalize_expr;
  var self_1 : Type.itenormalize_expr;
  var _4 : isize;
  var c_5 : Type.itenormalize_expr;
  var t_6 : Type.itenormalize_expr;
  var e_7 : Type.itenormalize_expr;
  var cp_8 : Type.itenormalize_expr;
  var _9 : Type.itenormalize_expr;
  var tp_10 : Type.itenormalize_expr;
  var _11 : Type.itenormalize_expr;
  var ep_12 : Type.itenormalize_expr;
  var _13 : Type.itenormalize_expr;
  var _14 : Type.itenormalize_expr;
  var _15 : Type.itenormalize_expr;
  var _16 : Type.itenormalize_expr;
  var e_17 : Type.itenormalize_expr;
  var _18 : Type.itenormalize_expr;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.IteNormalize_Expr_IfThenElse _ _ _ -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    e_17 <- self_1;
    _18 <- e_17;
    _0 <- ([#"../ite_normalize.rs" 162 17 162 26] Clone0.clone' _18);
    goto BB10
  }
  BB2 {
    c_5 <- Type.itenormalize_expr_IfThenElse_c self_1;
    t_6 <- Type.itenormalize_expr_IfThenElse_t self_1;
    e_7 <- Type.itenormalize_expr_IfThenElse_e self_1;
    _9 <- c_5;
    cp_8 <- ([#"../ite_normalize.rs" 157 25 157 38] normalize _9);
    goto BB3
  }
  BB3 {
    _11 <- t_6;
    tp_10 <- ([#"../ite_normalize.rs" 158 25 158 38] normalize _11);
    goto BB4
  }
  BB4 {
    _13 <- e_7;
    ep_12 <- ([#"../ite_normalize.rs" 159 25 159 38] normalize _13);
    goto BB5
  }
  BB5 {
    _14 <- cp_8;
    _15 <- tp_10;
    _16 <- ep_12;
    _0 <- ([#"../ite_normalize.rs" 160 16 160 36] Transpose0.transpose _14 _15 _16);
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB11
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module IteNormalize_Impl7_DoesNotContain_Interface
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate does_not_contain (self : Type.itenormalize_expr) (vp : usize)
end
module IteNormalize_Impl7_DoesNotContain
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  predicate does_not_contain [#"../ite_normalize.rs" 178 4 178 48] (self : Type.itenormalize_expr) (vp : usize) =
    [#"../ite_normalize.rs" 179 8 185 9] match (self) with
      | Type.IteNormalize_Expr_IfThenElse c t e -> does_not_contain c vp && does_not_contain t vp && does_not_contain e vp
      | Type.IteNormalize_Expr_Var v -> v <> vp
      | _ -> true
      end
end
module IteNormalize_Impl7_IsSimplified_Interface
  use Type
  predicate is_simplified (self : Type.itenormalize_expr)
end
module IteNormalize_Impl7_IsSimplified
  use Type
  clone IteNormalize_Impl7_DoesNotContain_Interface as DoesNotContain0
  predicate is_simplified [#"../ite_normalize.rs" 167 4 167 34] (self : Type.itenormalize_expr) =
    [#"../ite_normalize.rs" 168 8 174 9] match (self) with
      | Type.IteNormalize_Expr_IfThenElse c t e -> match (c) with
        | Type.IteNormalize_Expr_Var v -> DoesNotContain0.does_not_contain t v && DoesNotContain0.does_not_contain e v
        | c -> is_simplified c && is_simplified t && is_simplified e
        end
      | _ -> true
      end
end
module CreusotContracts_Logic_Model_Impl4_Model_Interface
  function model (self : bool) : bool
end
module CreusotContracts_Logic_Model_Impl4_Model
  function model (self : bool) : bool =
    self
end
module CreusotContracts_Logic_Int_Impl18_ModelTy
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Model_Impl4_ModelTy
  type modelTy  =
    bool
end
module IteNormalize_Impl2
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy3 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone IteNormalize_Impl2_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy
  clone IteNormalize_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  type ModelTy1.modelTy = ModelTy3.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.itenormalize_btreemap k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.itenormalize_btreemap k v,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl4
  
end
module CreusotContracts_Logic_Int_Impl18
  
end
module IteNormalize_Impl1
  type k
  type v
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.itenormalize_btreemap k v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = k
  clone IteNormalize_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone IteNormalize_Impl2_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy,
  type ModelTy1.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.itenormalize_btreemap k v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone IteNormalize_Impl1_Clone_Interface as Clone0 with type k = k, type v = v, function Model0.model = Model0.model,
  function Model1.model = Model1.model, type ModelTy1.modelTy = ModelTy1.modelTy,
  type ModelTy2.modelTy = ModelTy2.modelTy
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.itenormalize_btreemap k v,
  val clone' = Clone0.clone'
end
module CreusotContracts_Logic_Model_Impl5
  type t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Logic_Int_Impl18_Model_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_Model
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int =
    UInt64.to_int self
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module IteNormalize_Impl7_SimplifyHelper_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use map.Map
  use Type
  clone IteNormalize_Impl7_IsSimplified_Interface as IsSimplified0
  clone IteNormalize_Impl7_DoesNotContain_Interface as DoesNotContain0
  clone CreusotContracts_Logic_Model_Impl4_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl4_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Int_Impl18_ModelTy as ModelTy0
  clone IteNormalize_Impl2_Model_Interface as Model0 with type k = usize, type v = bool,
  type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  clone IteNormalize_Impl7_IsNormalized_Interface as IsNormalized0
  val simplify_helper [@cfg:stackify] (self : Type.itenormalize_expr) (state : Type.itenormalize_btreemap usize bool) : Type.itenormalize_expr
    requires {[#"../ite_normalize.rs" 194 15 194 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 195 4 195 110] forall i : (usize) . (exists v : (bool) . Map.get (Model0.model state) (UInt64.to_int i) = Type.Core_Option_Option_Some (Model1.model v)) -> DoesNotContain0.does_not_contain result i }
    ensures { [#"../ite_normalize.rs" 196 14 196 36] IsSimplified0.is_simplified result }
    
end
module IteNormalize_Impl7_SimplifyHelper
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use map.Map
  use Type
  clone IteNormalize_Impl7_DoesNotContain as DoesNotContain0
  clone IteNormalize_Impl7_IsSimplified as IsSimplified0 with predicate DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain
  clone CreusotContracts_Logic_Model_Impl4_Model as Model1
  clone CreusotContracts_Logic_Model_Impl4_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Int_Impl18_ModelTy as ModelTy0
  clone IteNormalize_Impl2_Model as Model0 with type k = usize, type v = bool, type ModelTy0.modelTy = ModelTy0.modelTy,
  type ModelTy1.modelTy = ModelTy1.modelTy
  clone IteNormalize_Impl7_IsNormalized as IsNormalized0
  use mach.int.Int64
  clone CreusotContracts_Logic_Int_Impl18_Model as Model5
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = bool, type ModelTy0.modelTy = ModelTy1.modelTy,
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy2 with type t = bool,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl5_Model as Model2 with type t = bool, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model7.model
  clone IteNormalize_Impl2_ModelTy as ModelTy3 with type k = usize, type v = bool,
  type ModelTy0.modelTy = ModelTy0.modelTy, type ModelTy1.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model5.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Type.itenormalize_btreemap usize bool,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model0.model
  clone IteNormalize_Impl0_Insert_Interface as Insert0 with type k = usize, type v = bool,
  function Model0.model = Model0.model, function Model1.model = Model5.model, function Model2.model = Model1.model,
  function Model3.model = Model6.model, type ModelTy0.modelTy = ModelTy0.modelTy,
  type ModelTy1.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.itenormalize_btreemap usize bool,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model0.model
  clone IteNormalize_Impl1_Clone_Interface as Clone0 with type k = usize, type v = bool,
  function Model0.model = Model3.model, function Model1.model = Model0.model, type ModelTy1.modelTy = ModelTy0.modelTy,
  type ModelTy2.modelTy = ModelTy1.modelTy
  clone IteNormalize_Impl0_Get_Interface as Get0 with type k = usize, type v = bool,
  function Model0.model = Model2.model, function Model1.model = Model3.model, function Model2.model = Model4.model,
  type ModelTy2.modelTy = ModelTy0.modelTy, type ModelTy3.modelTy = ModelTy1.modelTy
  let rec cfg simplify_helper [@cfg:stackify] [#"../ite_normalize.rs" 198 4 198 66] (self : Type.itenormalize_expr) (state : Type.itenormalize_btreemap usize bool) : Type.itenormalize_expr
    requires {[#"../ite_normalize.rs" 194 15 194 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 195 4 195 110] forall i : (usize) . (exists v : (bool) . Map.get (Model0.model state) (UInt64.to_int i) = Type.Core_Option_Option_Some (Model1.model v)) -> DoesNotContain0.does_not_contain result i }
    ensures { [#"../ite_normalize.rs" 196 14 196 36] IsSimplified0.is_simplified result }
    variant {[#"../ite_normalize.rs" 197 14 197 18] self}
    
   =
  var _0 : Type.itenormalize_expr;
  var self_1 : Type.itenormalize_expr;
  var state_2 : Type.itenormalize_btreemap usize bool;
  var _7 : isize;
  var c_8 : Type.itenormalize_expr;
  var t_9 : Type.itenormalize_expr;
  var e_10 : Type.itenormalize_expr;
  var _11 : isize;
  var v_12 : usize;
  var _13 : Type.core_option_option bool;
  var _14 : Type.itenormalize_btreemap usize bool;
  var _15 : usize;
  var _16 : usize;
  var _17 : isize;
  var b_18 : bool;
  var _19 : bool;
  var _20 : Type.itenormalize_expr;
  var _21 : Type.itenormalize_btreemap usize bool;
  var _22 : Type.itenormalize_expr;
  var _23 : Type.itenormalize_btreemap usize bool;
  var state_t_24 : Type.itenormalize_btreemap usize bool;
  var _25 : Type.itenormalize_btreemap usize bool;
  var _26 : Type.core_option_option bool;
  var _27 : borrowed (Type.itenormalize_btreemap usize bool);
  var _28 : usize;
  var tp_29 : Type.itenormalize_expr;
  var _30 : Type.itenormalize_expr;
  var _31 : Type.itenormalize_btreemap usize bool;
  var state_e_32 : Type.itenormalize_btreemap usize bool;
  var _33 : Type.itenormalize_btreemap usize bool;
  var _34 : Type.core_option_option bool;
  var _35 : borrowed (Type.itenormalize_btreemap usize bool);
  var _36 : usize;
  var ep_37 : Type.itenormalize_expr;
  var _38 : Type.itenormalize_expr;
  var _39 : Type.itenormalize_btreemap usize bool;
  var _40 : Type.itenormalize_expr;
  var _41 : Type.itenormalize_expr;
  var _42 : Type.itenormalize_expr;
  var _43 : Type.itenormalize_expr;
  var _44 : Type.itenormalize_expr;
  var c_45 : Type.itenormalize_expr;
  var _46 : Type.itenormalize_expr;
  var _47 : Type.itenormalize_btreemap usize bool;
  var v_48 : usize;
  var _49 : Type.core_option_option bool;
  var _50 : Type.itenormalize_btreemap usize bool;
  var _51 : usize;
  var _52 : usize;
  var _53 : isize;
  var b_54 : bool;
  var _55 : bool;
  var _56 : usize;
  var c_57 : Type.itenormalize_expr;
  {
    self_1 <- self;
    state_2 <- state;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    switch (self_1)
      | Type.IteNormalize_Expr_IfThenElse _ _ _ -> goto BB5
      | Type.IteNormalize_Expr_Var _ -> goto BB38
      | _ -> goto BB4
      end
  }
  BB4 {
    c_57 <- self_1;
    _0 <- c_57;
    goto BB46
  }
  BB5 {
    c_8 <- Type.itenormalize_expr_IfThenElse_c self_1;
    t_9 <- Type.itenormalize_expr_IfThenElse_t self_1;
    e_10 <- Type.itenormalize_expr_IfThenElse_e self_1;
    switch (c_8)
      | Type.IteNormalize_Expr_Var _ -> goto BB7
      | _ -> goto BB6
      end
  }
  BB6 {
    c_45 <- c_8;
    _46 <- c_45;
    _47 <- state_2;
    _0 <- ([#"../ite_normalize.rs" 224 25 224 49] simplify_helper _46 _47);
    goto BB32
  }
  BB7 {
    v_12 <- Type.itenormalize_expr_Var_v c_8;
    _14 <- state_2;
    _16 <- v_12;
    _15 <- _16;
    _13 <- ([#"../ite_normalize.rs" 203 41 203 54] Get0.get _14 _15);
    goto BB8
  }
  BB8 {
    switch (_13)
      | Type.Core_Option_Option_Some _ -> goto BB9
      | _ -> goto BB15
      end
  }
  BB9 {
    b_18 <- Type.core_option_option_Some_0 _13;
    _19 <- b_18;
    switch (_19)
      | False -> goto BB12
      | _ -> goto BB10
      end
  }
  BB10 {
    _20 <- t_9;
    _21 <- state_2;
    _0 <- ([#"../ite_normalize.rs" 205 32 205 56] simplify_helper _20 _21);
    goto BB11
  }
  BB11 {
    goto BB14
  }
  BB12 {
    _22 <- e_10;
    _23 <- state_2;
    _0 <- ([#"../ite_normalize.rs" 207 32 207 56] simplify_helper _22 _23);
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB31
  }
  BB15 {
    _25 <- state_2;
    state_t_24 <- ([#"../ite_normalize.rs" 211 46 211 59] Clone0.clone' _25);
    goto BB16
  }
  BB16 {
    _27 <- borrow_mut state_t_24;
    state_t_24 <-  ^ _27;
    _28 <- v_12;
    _26 <- ([#"../ite_normalize.rs" 212 28 212 51] Insert0.insert _27 _28 true);
    goto BB17
  }
  BB17 {
    _30 <- t_9;
    _31 <- state_t_24;
    tp_29 <- ([#"../ite_normalize.rs" 213 37 213 63] simplify_helper _30 _31);
    goto BB18
  }
  BB18 {
    _33 <- state_2;
    state_e_32 <- ([#"../ite_normalize.rs" 216 46 216 59] Clone0.clone' _33);
    goto BB19
  }
  BB19 {
    _35 <- borrow_mut state_e_32;
    state_e_32 <-  ^ _35;
    _36 <- v_12;
    _34 <- ([#"../ite_normalize.rs" 217 28 217 52] Insert0.insert _35 _36 false);
    goto BB20
  }
  BB20 {
    _38 <- e_10;
    _39 <- state_e_32;
    ep_37 <- ([#"../ite_normalize.rs" 218 37 218 63] simplify_helper _38 _39);
    goto BB21
  }
  BB21 {
    _40 <- c_8;
    _42 <- tp_29;
    _41 <- _42;
    goto BB22
  }
  BB22 {
    _44 <- ep_37;
    _43 <- _44;
    goto BB23
  }
  BB23 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _40 _41 _43;
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB34
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    goto BB47
  }
  BB38 {
    v_48 <- Type.itenormalize_expr_Var_v self_1;
    _50 <- state_2;
    _52 <- v_48;
    _51 <- _52;
    _49 <- ([#"../ite_normalize.rs" 228 33 228 46] Get0.get _50 _51);
    goto BB39
  }
  BB39 {
    switch (_49)
      | Type.Core_Option_Option_Some _ -> goto BB40
      | _ -> goto BB44
      end
  }
  BB40 {
    b_54 <- Type.core_option_option_Some_0 _49;
    _55 <- b_54;
    switch (_55)
      | False -> goto BB42
      | _ -> goto BB41
      end
  }
  BB41 {
    _0 <- Type.IteNormalize_Expr_True;
    goto BB43
  }
  BB42 {
    _0 <- Type.IteNormalize_Expr_False;
    goto BB43
  }
  BB43 {
    goto BB45
  }
  BB44 {
    _56 <- v_48;
    _0 <- Type.IteNormalize_Expr_Var _56;
    goto BB45
  }
  BB45 {
    goto BB47
  }
  BB46 {
    goto BB47
  }
  BB47 {
    goto BB48
  }
  BB48 {
    goto BB49
  }
  BB49 {
    return _0
  }
  
end
module IteNormalize_Impl7_Simplify_Interface
  use Type
  clone IteNormalize_Impl7_IsSimplified_Interface as IsSimplified0
  clone IteNormalize_Impl7_IsNormalized_Interface as IsNormalized0
  val simplify [@cfg:stackify] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    requires {[#"../ite_normalize.rs" 188 15 188 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 189 14 189 36] IsSimplified0.is_simplified result }
    
end
module IteNormalize_Impl7_Simplify
  use Type
  clone IteNormalize_Impl7_DoesNotContain as DoesNotContain0
  clone IteNormalize_Impl7_IsSimplified as IsSimplified0 with predicate DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain
  clone IteNormalize_Impl7_IsNormalized as IsNormalized0
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Impl4_ModelTy as ModelTy1
  clone CreusotContracts_Logic_Int_Impl18_ModelTy as ModelTy0
  clone IteNormalize_Impl2_Model as Model0 with type k = usize, type v = bool, type ModelTy0.modelTy = ModelTy0.modelTy,
  type ModelTy1.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl4_Model as Model1
  clone IteNormalize_Impl0_New_Interface as New0 with type k = usize, type v = bool
  clone IteNormalize_Impl7_SimplifyHelper_Interface as SimplifyHelper0 with predicate IsNormalized0.is_normalized = IsNormalized0.is_normalized,
  function Model0.model = Model0.model, function Model1.model = Model1.model,
  predicate DoesNotContain0.does_not_contain = DoesNotContain0.does_not_contain,
  predicate IsSimplified0.is_simplified = IsSimplified0.is_simplified
  let rec cfg simplify [@cfg:stackify] [#"../ite_normalize.rs" 190 4 190 33] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    requires {[#"../ite_normalize.rs" 188 15 188 35] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 189 14 189 36] IsSimplified0.is_simplified result }
    
   =
  var _0 : Type.itenormalize_expr;
  var self_1 : Type.itenormalize_expr;
  var _4 : Type.itenormalize_expr;
  var _5 : Type.itenormalize_btreemap usize bool;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- self_1;
    _5 <- ([#"../ite_normalize.rs" 191 29 191 44] New0.new ());
    goto BB2
  }
  BB2 {
    _0 <- ([#"../ite_normalize.rs" 191 8 191 45] SimplifyHelper0.simplify_helper _4 _5);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module IteNormalize_Impl3
  
end
module Core_Convert_From_From_Interface
  type self
  type t
  val from [@cfg:stackify] (_1' : t) : self
    requires {false}
    
end
module Core_Convert_From_From
  type self
  type t
  val from [@cfg:stackify] (_1' : t) : self
    requires {false}
    
end
module IteNormalize_Impl5
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone IteNormalize_Impl5_From_Interface as From0
  clone Core_Convert_From_From_Interface as From1 with type self = Type.itenormalize_expr, type t = usize,
  val from = From0.from
end
module IteNormalize_Impl6
  use Type
  clone IteNormalize_Impl6_From_Interface as From0
  clone Core_Convert_From_From_Interface as From1 with type self = Type.itenormalize_expr, type t = bool,
  val from = From0.from
end
