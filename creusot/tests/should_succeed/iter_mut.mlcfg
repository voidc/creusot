module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) int 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) int
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type itermut_vec 't =
    | IterMut_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
  type core_slice_iter_itermut 't =
    | Core_Slice_Iter_IterMut (core_ptr_nonnull_nonnull 't) opaque_ptr (core_marker_phantomdata (borrowed 't))
    
  type itermut_itermut 't =
    | IterMut_IterMut (core_slice_iter_itermut 't)
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
end
module IterMut_Impl0_Model_Interface
  type t
  use Type
  use seq.Seq
  function model (self : Type.itermut_vec t) : Seq.seq t
end
module IterMut_Impl0_Model
  type t
  use Type
  use seq.Seq
  function model [#"../iter_mut.rs" 15 4 15 35] (self : Type.itermut_vec t) : Seq.seq t
end
module IterMut_Impl2_Model_Interface
  type t
  use Type
  use seq.Seq
  use prelude.Prelude
  function model (self : Type.itermut_itermut t) : Seq.seq (borrowed t)
end
module IterMut_Impl2_Model
  type t
  use Type
  use seq.Seq
  use prelude.Prelude
  function model [#"../iter_mut.rs" 44 4 44 35] (self : Type.itermut_itermut t) : Seq.seq (borrowed t)
end
module IterMut_Impl1_IterMut_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone IterMut_Impl2_Model_Interface as Model1 with type t = t
  clone IterMut_Impl0_Model_Interface as Model0 with type t = t
  val iter_mut [@cfg:stackify] (self : borrowed (Type.itermut_vec t)) : Type.itermut_itermut t
    ensures { [#"../iter_mut.rs" 23 14 23 83] Seq.length (Model0.model ( * self)) = Seq.length (Model1.model result) && Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { [#"../iter_mut.rs" 24 4 24 94] forall i : (int) . 0 <= i && i <= Seq.length (Model0.model ( * self)) -> Seq.get (Model0.model ( * self)) i =  * Seq.get (Model1.model result) i }
    ensures { [#"../iter_mut.rs" 25 4 25 94] forall i : (int) . 0 <= i && i <= Seq.length (Model0.model ( ^ self)) -> Seq.get (Model0.model ( ^ self)) i =  ^ Seq.get (Model1.model result) i }
    
end
module IterMut_Impl1_IterMut
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone IterMut_Impl2_Model as Model1 with type t = t
  clone IterMut_Impl0_Model as Model0 with type t = t
  val iter_mut [@cfg:stackify] (self : borrowed (Type.itermut_vec t)) : Type.itermut_itermut t
    ensures { [#"../iter_mut.rs" 23 14 23 83] Seq.length (Model0.model ( * self)) = Seq.length (Model1.model result) && Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { [#"../iter_mut.rs" 24 4 24 94] forall i : (int) . 0 <= i && i <= Seq.length (Model0.model ( * self)) -> Seq.get (Model0.model ( * self)) i =  * Seq.get (Model1.model result) i }
    ensures { [#"../iter_mut.rs" 25 4 25 94] forall i : (int) . 0 <= i && i <= Seq.length (Model0.model ( ^ self)) -> Seq.get (Model0.model ( ^ self)) i =  ^ Seq.get (Model1.model result) i }
    
end
module IterMut_Impl1_Len_Interface
  type t
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone IterMut_Impl0_Model_Interface as Model0 with type t = t
  val len [@cfg:stackify] (self : Type.itermut_vec t) : int
    ensures { [#"../iter_mut.rs" 31 14 31 45] result = Seq.length (Model0.model self) }
    
end
module IterMut_Impl1_Len
  type t
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone IterMut_Impl0_Model as Model0 with type t = t
  val len [@cfg:stackify] (self : Type.itermut_vec t) : int
    ensures { [#"../iter_mut.rs" 31 14 31 45] result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Seq_Impl2_Get_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use Type
  function get (self : Seq.seq t) (ix : int) : Type.core_option_option t
end
module CreusotContracts_Logic_Seq_Impl2_Get
  type t
  use seq.Seq
  use mach.int.Int
  use Type
  function get (self : Seq.seq t) (ix : int) : Type.core_option_option t =
    if ix < Seq.length self then Type.Core_Option_Option_Some (Seq.get self ix) else Type.Core_Option_Option_None
end
module CreusotContracts_Logic_Seq_Impl2_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl2_Tail
  type t
  use seq.Seq
  use mach.int.Int
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    SeqExt.subsequence self 1 (Seq.length self)
end
module IterMut_Impl3_Next_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Seq_Impl2_Tail_Interface as Tail0 with type t = borrowed t
  clone CreusotContracts_Logic_Seq_Impl2_Get_Interface as Get0 with type t = borrowed t
  clone IterMut_Impl2_Model_Interface as Model0 with type t = t
  val next [@cfg:stackify] (self : borrowed (Type.itermut_itermut t)) : Type.core_option_option (borrowed t)
    ensures { [#"../iter_mut.rs" 51 14 51 39] result = Get0.get (Model0.model ( * self)) 0 }
    ensures { [#"../iter_mut.rs" 52 14 52 39] Model0.model ( ^ self) = Tail0.tail (Model0.model ( * self)) }
    
end
module IterMut_Impl3_Next
  type t
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Seq_Impl2_Tail as Tail0 with type t = borrowed t
  clone CreusotContracts_Logic_Seq_Impl2_Get as Get0 with type t = borrowed t
  clone IterMut_Impl2_Model as Model0 with type t = t
  val next [@cfg:stackify] (self : borrowed (Type.itermut_itermut t)) : Type.core_option_option (borrowed t)
    ensures { [#"../iter_mut.rs" 51 14 51 39] result = Get0.get (Model0.model ( * self)) 0 }
    ensures { [#"../iter_mut.rs" 52 14 52 39] Model0.model ( ^ self) = Tail0.tail (Model0.model ( * self)) }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module IterMut_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module IterMut_Impl0
  type t
  use Type
  clone IterMut_Impl0_Model as Model0 with type t = t
  clone IterMut_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.itermut_vec t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.itermut_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module IterMut_Impl2_ModelTy
  type t
  use seq.Seq
  use prelude.Prelude
  type modelTy  =
    Seq.seq (borrowed t)
end
module IterMut_Impl2
  type t
  use Type
  clone IterMut_Impl2_Model as Model0 with type t = t
  clone IterMut_Impl2_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.itermut_itermut t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.itermut_itermut t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module IterMut_IncVec_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone IterMut_Impl0_ModelTy as ModelTy0 with type t = int
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.itermut_vec int,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone IterMut_Impl0_Model_Interface as Model0 with type t = int
  val inc_vec [@cfg:stackify] (v : borrowed (Type.itermut_vec int)) : ()
    ensures { [#"../iter_mut.rs" 58 10 58 35] Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    ensures { [#"../iter_mut.rs" 59 0 59 83] forall i : (int) . 0 <= i && i < Seq.length (Model0.model ( ^ v)) -> Seq.get (Model0.model ( ^ v)) i = Seq.get (Model1.model v) i + 5 }
    
end
module IterMut_IncVec
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone IterMut_Impl2_Model as Model2 with type t = int
  clone IterMut_Impl0_ModelTy as ModelTy0 with type t = int
  clone IterMut_Impl0_Model as Model0 with type t = int
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.itermut_vec int,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = int
  clone CreusotContracts_Logic_Seq_Impl2_Tail as Tail0 with type t = borrowed int
  clone CreusotContracts_Logic_Seq_Impl2_Get as Get0 with type t = borrowed int
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.itermut_vec int
  clone IterMut_Impl3_Next_Interface as Next0 with type t = int, function Model0.model = Model2.model,
  function Get0.get = Get0.get, function Tail0.tail = Tail0.tail
  clone IterMut_Impl1_IterMut_Interface as IterMut0 with type t = int, function Model0.model = Model0.model,
  function Model1.model = Model2.model
  let rec cfg inc_vec [@cfg:stackify] [#"../iter_mut.rs" 60 0 60 32] (v : borrowed (Type.itermut_vec int)) : ()
    ensures { [#"../iter_mut.rs" 58 10 58 35] Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    ensures { [#"../iter_mut.rs" 59 0 59 83] forall i : (int) . 0 <= i && i < Seq.length (Model0.model ( ^ v)) -> Seq.get (Model0.model ( ^ v)) i = Seq.get (Model1.model v) i + 5 }
    
   =
  var _0 : ();
  var v_1 : borrowed (Type.itermut_vec int);
  ghost var old_v_4 : borrowed (Type.itermut_vec int);
  var _7 : ();
  var it_8 : Type.itermut_itermut int;
  var _9 : borrowed (Type.itermut_vec int);
  var _ghost_seen_10 : int;
  var _14 : ();
  var _15 : Type.core_option_option (borrowed int);
  var _16 : borrowed (Type.itermut_itermut int);
  var _17 : int;
  var r_18 : borrowed int;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_v_4 <- ghost ([#"../iter_mut.rs" 61 16 61 28] v_1);
    goto BB1
  }
  BB1 {
    _9 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _9) };
    it_8 <- ([#"../iter_mut.rs" 63 17 63 29] IterMut0.iter_mut _9);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve v_1 };
    _ghost_seen_10 <- (0 : int);
    goto BB3
  }
  BB3 {
    invariant incremented { [#"../iter_mut.rs" 65 4 68 6] forall i : (int) . 0 <= i && i < _ghost_seen_10 -> Seq.get (Model0.model ( ^ old_v_4)) i = Seq.get (Model1.model old_v_4) i + 5 };
    invariant to_come { [#"../iter_mut.rs" 65 4 68 6] forall i : (int) . 0 <= i && i < Seq.length (Model2.model it_8) ->  * Seq.get (Model2.model it_8) i = Seq.get (Model1.model old_v_4) (i + _ghost_seen_10) &&  ^ Seq.get (Model2.model it_8) i = Seq.get (Model0.model ( ^ old_v_4)) (i + _ghost_seen_10) };
    invariant _ghost_seen { [#"../iter_mut.rs" 72 29 72 81] _ghost_seen_10 + Seq.length (Model2.model it_8) = Seq.length (Model1.model old_v_4) };
    _16 <- borrow_mut it_8;
    it_8 <-  ^ _16;
    _15 <- ([#"../iter_mut.rs" 73 24 73 33] Next0.next _16);
    goto BB4
  }
  BB4 {
    switch (_15)
      | Type.Core_Option_Option_Some _ -> goto BB5
      | _ -> goto BB6
      end
  }
  BB5 {
    assume { Resolve1.resolve r_18 };
    r_18 <- Type.core_option_option_Some_0 _15;
    r_18 <- { r_18 with current = ([#"../iter_mut.rs" 74 8 74 15]  * r_18 + (5 : int)) };
    assume { Resolve1.resolve r_18 };
    _ghost_seen_10 <- ([#"../iter_mut.rs" 75 8 75 24] _ghost_seen_10 + (1 : int));
    _14 <- ();
    goto BB3
  }
  BB6 {
    _0 <- ();
    return _0
  }
  
end
