module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type knapsack_item 'name =
    | Knapsack_Item 'name usize usize
    
  let function knapsack_item_Item_weight (self : knapsack_item 'name) : usize =
    match (self) with
      | Knapsack_Item _ a _ -> a
      end
  let function knapsack_item_Item_value (self : knapsack_item 'name) : usize =
    match (self) with
      | Knapsack_Item _ _ a -> a
      end
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module Knapsack_MaxLog_Interface
  use mach.int.Int
  function max_log (a : int) (b : int) : int
end
module Knapsack_MaxLog
  use mach.int.Int
  function max_log [#"../knapsack.rs" 12 0 12 33] (a : int) (b : int) : int =
    [#"../knapsack.rs" 11 0 11 8] if a < b then b else a
end
module Knapsack_Max_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone Knapsack_MaxLog_Interface as MaxLog0
  val max [@cfg:stackify] (a : usize) (b : usize) : usize
    requires {[#"../knapsack.rs" 20 11 20 15] true}
    ensures { [#"../knapsack.rs" 21 10 21 36] UInt64.to_int result = MaxLog0.max_log (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Knapsack_Max
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone Knapsack_MaxLog as MaxLog0
  let rec cfg max [@cfg:stackify] [#"../knapsack.rs" 22 0 22 35] (a : usize) (b : usize) : usize
    requires {[#"../knapsack.rs" 20 11 20 15] true}
    ensures { [#"../knapsack.rs" 21 10 21 36] UInt64.to_int result = MaxLog0.max_log (UInt64.to_int a) (UInt64.to_int b) }
    
   =
  var _0 : usize;
  var a_1 : usize;
  var b_2 : usize;
  var _5 : bool;
  var _6 : usize;
  var _7 : usize;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _6 <- a_1;
    _7 <- b_2;
    _5 <- ([#"../knapsack.rs" 23 7 23 12] _6 < _7);
    switch (_5)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    _0 <- b_2;
    goto BB3
  }
  BB2 {
    _0 <- a_1;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Knapsack_M_Interface
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  function m (items : Seq.seq (Type.knapsack_item name)) (i : int) (w : int) : int
end
module Knapsack_M
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone Knapsack_MaxLog_Interface as MaxLog0
  function m [#"../knapsack.rs" 41 0 41 57] (items : Seq.seq (Type.knapsack_item name)) (i : int) (w : int) : int
  axiom def : forall items : Seq.seq (Type.knapsack_item name), i : int, w : int . m items i w = ([#"../knapsack.rs" 42 4 49 5] if i = 0 then
    0
  else
    if UInt64.to_int (Type.knapsack_item_Item_weight (Seq.get items (i - 1))) > w then
      m items (i - 1) w
    else
      MaxLog0.max_log (m items (i - 1) w) (m items (i - 1) (w - UInt64.to_int (Type.knapsack_item_Item_weight (Seq.get items (i - 1)))) + UInt64.to_int (Type.knapsack_item_Item_value (Seq.get items (i - 1))))
    
  )
  axiom m_spec : forall items : Seq.seq (Type.knapsack_item name), i : int, w : int . ([#"../knapsack.rs" 38 11 38 37] 0 <= i && i <= Seq.length items) -> ([#"../knapsack.rs" 39 11 39 17] 0 <= w) -> ([#"../knapsack.rs" 40 10 40 21] m items i w >= 0)
end
module Knapsack_M_Impl
  type name
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone Knapsack_MaxLog as MaxLog0
  let rec ghost function m (items : Seq.seq (Type.knapsack_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack.rs" 38 11 38 37] 0 <= i && i <= Seq.length items}
    requires {[#"../knapsack.rs" 39 11 39 17] 0 <= w}
    ensures { [#"../knapsack.rs" 40 10 40 21] result >= 0 }
    variant {[#"../knapsack.rs" 37 10 37 11] i}
    
   =
    [#"../knapsack.rs" 42 4 49 5] if pure {i = 0} then
      0
    else
      if (let a' = Type.knapsack_item_Item_weight (Seq.get items (i - 1)) in UInt64.to_int a') > w then
        m items (i - 1) w
      else
        let a' = m items (i - 1) w in let b' = (let c' = w - (let a' = Type.knapsack_item_Item_weight (Seq.get items (i - 1)) in UInt64.to_int a') in m items (i - 1) c') + (let a' = Type.knapsack_item_Item_value (Seq.get items (i - 1)) in UInt64.to_int a') in MaxLog0.max_log a' b'
      
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Alloc_Vec_Impl0_WithCapacity_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_WithCapacity
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Vec_Impl1
  type t
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module Knapsack_Knapsack01Dyn_Interface
  type name
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.knapsack_item name,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val knapsack01_dyn [@cfg:stackify] (items : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global)) (max_weight : usize) : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global)
    requires {[#"../knapsack.rs" 52 11 52 36] Seq.length (Model0.model items) < 10000000}
    requires {[#"../knapsack.rs" 53 11 53 33] UInt64.to_int max_weight < 10000000}
    requires {[#"../knapsack.rs" 54 0 54 91] forall i : (int) . 0 <= i && i < Seq.length (Model0.model items) -> UInt64.to_int (Type.knapsack_item_Item_value (Seq.get (Model0.model items) i)) <= 10000000}
    
end
module Knapsack_Knapsack01Dyn
  type name
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  use Type
  clone Knapsack_MaxLog as MaxLog0
  clone Knapsack_M as M0 with type name = name, function MaxLog0.max_log = MaxLog0.max_log, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.knapsack_item name,
  type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.knapsack_item name,
  type a = Type.alloc_alloc_global
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve7 with type t = usize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.knapsack_item name,
  type a = Type.alloc_alloc_global, axiom .
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Type.knapsack_item name, type a = Type.alloc_alloc_global,
  function Model0.model = Model4.model
  clone Alloc_Vec_Impl0_WithCapacity_Interface as WithCapacity0 with type t = Type.knapsack_item name,
  function Model0.model = Model4.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy3 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy2 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.knapsack_item name
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve4 with type t = Type.knapsack_item name,
  function Model0.model = Model4.model, predicate Resolve0.resolve = Resolve0.resolve
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = Type.knapsack_item name
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = Type.knapsack_item name
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Type.knapsack_item name
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = Type.knapsack_item name
  clone Knapsack_Max_Interface as Max0 with function MaxLog0.max_log = MaxLog0.max_log
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve6 with type t = usize, function Model0.model = Model2.model,
  predicate Resolve0.resolve = Resolve7.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere, type Output0.output = Output2.output
  clone Alloc_Vec_Impl16_Index_Interface as Index2 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue2.has_value,
  type Output0.output = Output2.output
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve5 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  function Model0.model = Model1.model, predicate Resolve0.resolve = Resolve6.resolve
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  type i = usize, type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = Type.alloc_vec_vec usize (Type.alloc_alloc_global),
  function Model0.model = Model1.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Type.knapsack_item name, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = Type.knapsack_item name, type a = Type.alloc_alloc_global,
  function Model0.model = Model3.model
  let rec cfg knapsack01_dyn [@cfg:stackify] [#"../knapsack.rs" 55 0 55 91] (items : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global)) (max_weight : usize) : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global)
    requires {[#"../knapsack.rs" 52 11 52 36] Seq.length (Model0.model items) < 10000000}
    requires {[#"../knapsack.rs" 53 11 53 33] UInt64.to_int max_weight < 10000000}
    requires {[#"../knapsack.rs" 54 0 54 91] forall i : (int) . 0 <= i && i < Seq.length (Model0.model items) -> UInt64.to_int (Type.knapsack_item_Item_value (Seq.get (Model0.model items) i)) <= 10000000}
    
   =
  var _0 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var items_1 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var max_weight_2 : usize;
  var best_value_6 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _7 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _8 : usize;
  var _9 : usize;
  var _10 : usize;
  var _11 : usize;
  var _12 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var i_13 : usize;
  var _14 : ();
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var it_24 : Type.knapsack_item name;
  var _25 : Type.knapsack_item name;
  var _26 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var _27 : usize;
  var w_28 : usize;
  var _29 : ();
  var _35 : bool;
  var _36 : usize;
  var _37 : usize;
  var _38 : usize;
  var _39 : bool;
  var _40 : usize;
  var _41 : usize;
  var _42 : usize;
  var _43 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _44 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _45 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _46 : usize;
  var _47 : usize;
  var _48 : usize;
  var _49 : usize;
  var _50 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _51 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _52 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _53 : usize;
  var _54 : usize;
  var _55 : usize;
  var _56 : usize;
  var _57 : usize;
  var _58 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _59 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _60 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _61 : usize;
  var _62 : usize;
  var _63 : usize;
  var _64 : usize;
  var _65 : usize;
  var _66 : borrowed usize;
  var _67 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _68 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _69 : borrowed (Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global));
  var _70 : usize;
  var _71 : usize;
  var _72 : usize;
  var _73 : ();
  var _74 : ();
  var _75 : ();
  var _76 : ();
  var _77 : ();
  var _78 : ();
  var result_79 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var _80 : usize;
  var _81 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var left_weight_82 : usize;
  var j_83 : usize;
  var _84 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var _85 : ();
  var _88 : bool;
  var _89 : usize;
  var it_90 : Type.knapsack_item name;
  var _91 : Type.knapsack_item name;
  var _92 : Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global);
  var _93 : usize;
  var _94 : bool;
  var _95 : usize;
  var _96 : usize;
  var _97 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _98 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _99 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _100 : usize;
  var _101 : usize;
  var _102 : usize;
  var _103 : usize;
  var _104 : usize;
  var _105 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _106 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _107 : Type.alloc_vec_vec (Type.alloc_vec_vec usize (Type.alloc_alloc_global)) (Type.alloc_alloc_global);
  var _108 : usize;
  var _109 : usize;
  var _110 : ();
  var _111 : borrowed (Type.alloc_vec_vec (Type.knapsack_item name) (Type.alloc_alloc_global));
  var _112 : Type.knapsack_item name;
  var _113 : usize;
  var _114 : ();
  var _115 : ();
  var _116 : ();
  {
    items_1 <- items;
    max_weight_2 <- max_weight;
    goto BB0
  }
  BB0 {
    _9 <- max_weight_2;
    _8 <- ([#"../knapsack.rs" 57 41 57 55] _9 + (1 : usize));
    _7 <- ([#"../knapsack.rs" 57 23 57 56] FromElem0.from_elem (0 : usize) _8);
    goto BB1
  }
  BB1 {
    _12 <- items_1;
    _11 <- ([#"../knapsack.rs" 57 58 57 69] Len0.len _12);
    goto BB2
  }
  BB2 {
    _10 <- ([#"../knapsack.rs" 57 58 57 73] _11 + (1 : usize));
    best_value_6 <- ([#"../knapsack.rs" 57 8 57 74] FromElem1.from_elem _7 _10);
    goto BB3
  }
  BB3 {
    i_13 <- (0 : usize);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    invariant items_len { [#"../knapsack.rs" 60 27 60 68] Seq.length (Model0.model items_1) + 1 = Seq.length (Model1.model best_value_6) };
    invariant weight_len { [#"../knapsack.rs" 60 4 60 70] forall i : (int) . 0 <= i && i < Seq.length (Model1.model best_value_6) -> UInt64.to_int max_weight_2 + 1 = Seq.length (Model2.model (Seq.get (Model1.model best_value_6) i)) };
    invariant best_value { [#"../knapsack.rs" 60 4 60 70] forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= UInt64.to_int i_13 && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_6) ii)) ww) = M0.m (Model0.model items_1) ii ww };
    invariant best_value_bounds { [#"../knapsack.rs" 60 4 60 70] forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= Seq.length (Model0.model items_1) && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_6) ii)) ww) <= 10000000 * ii };
    _21 <- i_13;
    _23 <- items_1;
    _22 <- ([#"../knapsack.rs" 67 14 67 25] Len0.len _23);
    goto BB9
  }
  BB9 {
    _20 <- ([#"../knapsack.rs" 67 10 67 25] _21 < _22);
    switch (_20)
      | False -> goto BB32
      | True -> goto BB10
      end
  }
  BB10 {
    _26 <- items_1;
    _27 <- i_13;
    _25 <- ([#"../knapsack.rs" 68 18 68 26] Index0.index _26 _27);
    goto BB11
  }
  BB11 {
    it_24 <- _25;
    assume { Resolve0.resolve _25 };
    w_28 <- (0 : usize);
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    invariant items_len2 { [#"../knapsack.rs" 74 32 74 73] Seq.length (Model0.model items_1) + 1 = Seq.length (Model1.model best_value_6) };
    invariant weight_len2 { [#"../knapsack.rs" 74 8 74 75] forall i : (int) . 0 <= i && i < Seq.length (Model1.model best_value_6) -> UInt64.to_int max_weight_2 + 1 = Seq.length (Model2.model (Seq.get (Model1.model best_value_6) i)) };
    invariant best_value2 { [#"../knapsack.rs" 74 8 74 75] forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= UInt64.to_int i_13 && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_6) ii)) ww) = M0.m (Model0.model items_1) ii ww };
    invariant best_value2 { [#"../knapsack.rs" 74 8 74 75] forall ww : (int) . 0 <= ww && ww <= UInt64.to_int w_28 - 1 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_6) (UInt64.to_int i_13 + 1))) ww) = M0.m (Model0.model items_1) (UInt64.to_int i_13 + 1) ww };
    invariant best_value_bounds { [#"../knapsack.rs" 74 8 74 75] forall ww : (int) . forall ii : (int) . 0 <= ii && ii <= Seq.length (Model0.model items_1) && 0 <= ww && ww <= UInt64.to_int max_weight_2 -> UInt64.to_int (Seq.get (Model2.model (Seq.get (Model1.model best_value_6) ii)) ww) <= 10000000 * ii };
    _36 <- w_28;
    _37 <- max_weight_2;
    _35 <- ([#"../knapsack.rs" 84 14 84 29] _36 <= _37);
    switch (_35)
      | False -> goto BB31
      | True -> goto BB18
      end
  }
  BB18 {
    _40 <- Type.knapsack_item_Item_weight it_24;
    _41 <- w_28;
    _39 <- ([#"../knapsack.rs" 85 38 85 51] _40 > _41);
    switch (_39)
      | False -> goto BB22
      | True -> goto BB19
      end
  }
  BB19 {
    _45 <- best_value_6;
    _46 <- i_13;
    _44 <- ([#"../knapsack.rs" 86 16 86 29] Index1.index _45 _46);
    goto BB20
  }
  BB20 {
    _43 <- _44;
    _47 <- w_28;
    _42 <- ([#"../knapsack.rs" 86 16 86 32] Index2.index _43 _47);
    goto BB21
  }
  BB21 {
    _38 <- _42;
    goto BB28
  }
  BB22 {
    _52 <- best_value_6;
    _53 <- i_13;
    _51 <- ([#"../knapsack.rs" 88 20 88 33] Index1.index _52 _53);
    goto BB23
  }
  BB23 {
    _50 <- _51;
    _54 <- w_28;
    _49 <- ([#"../knapsack.rs" 88 20 88 36] Index2.index _50 _54);
    goto BB24
  }
  BB24 {
    _48 <- _49;
    _60 <- best_value_6;
    _61 <- i_13;
    _59 <- ([#"../knapsack.rs" 88 38 88 51] Index1.index _60 _61);
    goto BB25
  }
  BB25 {
    _58 <- _59;
    _63 <- w_28;
    _64 <- Type.knapsack_item_Item_weight it_24;
    _62 <- ([#"../knapsack.rs" 88 52 88 65] _63 - _64);
    _57 <- ([#"../knapsack.rs" 88 38 88 66] Index2.index _58 _62);
    goto BB26
  }
  BB26 {
    _56 <- _57;
    _65 <- Type.knapsack_item_Item_value it_24;
    _55 <- ([#"../knapsack.rs" 88 38 88 77] _56 + _65);
    _38 <- ([#"../knapsack.rs" 88 16 88 78] Max0.max _48 _55);
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    _69 <- borrow_mut best_value_6;
    best_value_6 <-  ^ _69;
    _71 <- i_13;
    _70 <- ([#"../knapsack.rs" 85 23 85 28] _71 + (1 : usize));
    _68 <- ([#"../knapsack.rs" 85 12 85 29] IndexMut0.index_mut _69 _70);
    goto BB29
  }
  BB29 {
    _67 <- borrow_mut ( * _68);
    _68 <- { _68 with current = ( ^ _67) };
    assume { Resolve1.resolve _68 };
    _72 <- w_28;
    _66 <- ([#"../knapsack.rs" 85 12 85 32] IndexMut1.index_mut _67 _72);
    goto BB30
  }
  BB30 {
    _66 <- { _66 with current = _38 };
    assume { Resolve2.resolve _66 };
    w_28 <- ([#"../knapsack.rs" 90 12 90 18] w_28 + (1 : usize));
    _19 <- ();
    goto BB17
  }
  BB31 {
    assume { Resolve0.resolve it_24 };
    _29 <- ();
    i_13 <- ([#"../knapsack.rs" 92 8 92 14] i_13 + (1 : usize));
    _19 <- ();
    goto BB8
  }
  BB32 {
    _14 <- ();
    _81 <- items_1;
    _80 <- ([#"../knapsack.rs" 95 40 95 51] Len0.len _81);
    goto BB33
  }
  BB33 {
    result_79 <- ([#"../knapsack.rs" 95 21 95 52] WithCapacity0.with_capacity _80);
    goto BB34
  }
  BB34 {
    left_weight_82 <- max_weight_2;
    _84 <- items_1;
    j_83 <- ([#"../knapsack.rs" 98 16 98 27] Len0.len _84);
    goto BB35
  }
  BB35 {
    goto BB36
  }
  BB36 {
    invariant j_items_len { [#"../knapsack.rs" 99 29 99 49] UInt64.to_int j_83 <= Seq.length (Model0.model items_1) };
    invariant left_weight_le_max { [#"../knapsack.rs" 100 36 100 63] UInt64.to_int left_weight_82 <= UInt64.to_int max_weight_2 };
    _89 <- j_83;
    _88 <- ([#"../knapsack.rs" 101 10 101 15] (0 : usize) < _89);
    switch (_88)
      | False -> goto BB47
      | True -> goto BB37
      end
  }
  BB37 {
    j_83 <- ([#"../knapsack.rs" 102 8 102 14] j_83 - (1 : usize));
    _92 <- items_1;
    _93 <- j_83;
    _91 <- ([#"../knapsack.rs" 103 18 103 26] Index0.index _92 _93);
    goto BB38
  }
  BB38 {
    it_90 <- _91;
    assume { Resolve0.resolve _91 };
    _99 <- best_value_6;
    _101 <- j_83;
    _100 <- ([#"../knapsack.rs" 104 22 104 27] _101 + (1 : usize));
    _98 <- ([#"../knapsack.rs" 104 11 104 28] Index1.index _99 _100);
    goto BB39
  }
  BB39 {
    _97 <- _98;
    _102 <- left_weight_82;
    _96 <- ([#"../knapsack.rs" 104 11 104 41] Index2.index _97 _102);
    goto BB40
  }
  BB40 {
    _95 <- _96;
    _107 <- best_value_6;
    _108 <- j_83;
    _106 <- ([#"../knapsack.rs" 104 45 104 58] Index1.index _107 _108);
    goto BB41
  }
  BB41 {
    _105 <- _106;
    _109 <- left_weight_82;
    _104 <- ([#"../knapsack.rs" 104 45 104 71] Index2.index _105 _109);
    goto BB42
  }
  BB42 {
    _103 <- _104;
    _94 <- ([#"../knapsack.rs" 104 11 104 71] _95 <> _103);
    switch (_94)
      | False -> goto BB45
      | True -> goto BB43
      end
  }
  BB43 {
    _111 <- borrow_mut result_79;
    result_79 <-  ^ _111;
    assume { Resolve0.resolve _112 };
    _112 <- it_90;
    _110 <- ([#"../knapsack.rs" 105 12 105 27] Push0.push _111 _112);
    goto BB44
  }
  BB44 {
    _113 <- Type.knapsack_item_Item_weight it_90;
    assume { Resolve0.resolve it_90 };
    left_weight_82 <- ([#"../knapsack.rs" 106 12 106 36] left_weight_82 - _113);
    _19 <- ();
    goto BB46
  }
  BB45 {
    assume { Resolve0.resolve it_90 };
    _19 <- ();
    goto BB46
  }
  BB46 {
    goto BB36
  }
  BB47 {
    assume { Resolve3.resolve items_1 };
    _85 <- ();
    assume { Resolve4.resolve _0 };
    _0 <- result_79;
    goto BB48
  }
  BB48 {
    goto BB49
  }
  BB49 {
    assume { Resolve5.resolve best_value_6 };
    return _0
  }
  
end
