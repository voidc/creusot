module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Prelude.id self && Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Seq_Impl2_Tail_Interface
  type t
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl2_Tail
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t =
    SeqExt.subsequence self 1 (Seq.length self)
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface
  type self
  function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog
  type self
  function default_log (_ : ()) : self
end
module Core_Mem_Take_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module Core_Mem_Take
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Core_Slice_Impl0_SplitFirstMut_Interface
  type t
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Seq_Impl2_Tail_Interface as Tail0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val split_first_mut [@cfg:stackify] (self : borrowed (seq t)) : Type.core_option_option (borrowed t, borrowed (seq t))
    ensures { result = Type.Core_Option_Option_None -> Seq.length (Model0.model self) = 0 &&  ^ self =  * self && Model1.model ( * self) = Seq.empty  }
    ensures { forall tail : (borrowed (seq t)) . forall first : (borrowed t) . result = Type.Core_Option_Option_Some (first, tail) &&  * first = Seq.get (Model1.model ( * self)) 0 &&  ^ first = Seq.get (Model1.model ( ^ self)) 0 && Seq.length (Model1.model ( * self)) > 0 && Seq.length (Model1.model ( ^ self)) > 0 && Model1.model ( * tail) = Tail0.tail (Model1.model ( * self)) && Model1.model ( ^ tail) = Tail0.tail (Model1.model ( ^ self)) }
    
end
module Core_Slice_Impl0_SplitFirstMut
  type t
  use Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Seq_Impl2_Tail_Interface as Tail0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val split_first_mut [@cfg:stackify] (self : borrowed (seq t)) : Type.core_option_option (borrowed t, borrowed (seq t))
    ensures { result = Type.Core_Option_Option_None -> Seq.length (Model0.model self) = 0 &&  ^ self =  * self && Model1.model ( * self) = Seq.empty  }
    ensures { forall tail : (borrowed (seq t)) . forall first : (borrowed t) . result = Type.Core_Option_Option_Some (first, tail) &&  * first = Seq.get (Model1.model ( * self)) 0 &&  ^ first = Seq.get (Model1.model ( ^ self)) 0 && Seq.length (Model1.model ( * self)) > 0 && Seq.length (Model1.model ( ^ self)) > 0 && Model1.model ( * tail) = Tail0.tail (Model1.model ( * self)) && Model1.model ( ^ tail) = Tail0.tail (Model1.model ( ^ self)) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Slice_Impl1_DefaultLog_Interface
  type t
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  function default_log (_ : ()) : borrowed (seq t)
end
module CreusotContracts_Std1_Slice_Impl1_DefaultLog
  type t
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  function default_log (_ : ()) : borrowed (seq t)
  axiom default_log_spec : Model0.model ( ^ default_log ()) = Seq.empty  && Model0.model ( * default_log ()) = Seq.empty 
end
module CreusotContracts_Std1_Slice_Impl1
  type t
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module TakeFirstMut_TakeFirstMut_Interface
  type t
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl2_Tail_Interface as Tail0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val take_first_mut [@cfg:stackify] (self_ : borrowed (borrowed (seq t))) : Type.core_option_option (borrowed t)
    ensures { [#"../take_first_mut.rs" 6 10 15 1] match (result) with
      | Type.Core_Option_Option_Some r ->  * r = Seq.get (Model0.model ( *  * self_)) 0 &&  ^ r = Seq.get (Model0.model ( ^  * self_)) 0 && Seq.length (Model0.model ( *  * self_)) > 0 && Seq.length (Model0.model ( ^  * self_)) > 0 && Model0.model ( *  ^ self_) = Tail0.tail (Model0.model ( *  * self_)) && Model0.model ( ^  ^ self_) = Tail0.tail (Model0.model ( ^  * self_))
      | Type.Core_Option_Option_None ->  ^ self_ =  * self_ && Seq.length (Model0.model ( *  * self_)) = 0
      end }
    
end
module TakeFirstMut_TakeFirstMut
  type t
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl2_Tail as Tail0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (borrowed t, borrowed (seq t))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = borrowed (seq t)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone Core_Slice_Impl0_SplitFirstMut_Interface as SplitFirstMut0 with type t = t,
  function Model0.model = Model1.model, function Model1.model = Model0.model, function Tail0.tail = Tail0.tail
  clone CreusotContracts_Std1_Slice_Impl1_DefaultLog as DefaultLog0 with type t = t,
  function Model0.model = Model0.model, axiom .
  clone Core_Mem_Take_Interface as Take0 with type t = borrowed (seq t),
  function DefaultLog0.default_log = DefaultLog0.default_log
  let rec cfg take_first_mut [@cfg:stackify] [#"../take_first_mut.rs" 16 0 16 74] (self_ : borrowed (borrowed (seq t))) : Type.core_option_option (borrowed t)
    ensures { [#"../take_first_mut.rs" 6 10 15 1] match (result) with
      | Type.Core_Option_Option_Some r ->  * r = Seq.get (Model0.model ( *  * self_)) 0 &&  ^ r = Seq.get (Model0.model ( ^  * self_)) 0 && Seq.length (Model0.model ( *  * self_)) > 0 && Seq.length (Model0.model ( ^  * self_)) > 0 && Model0.model ( *  ^ self_) = Tail0.tail (Model0.model ( *  * self_)) && Model0.model ( ^  ^ self_) = Tail0.tail (Model0.model ( ^  * self_))
      | Type.Core_Option_Option_None ->  ^ self_ =  * self_ && Seq.length (Model0.model ( *  * self_)) = 0
      end }
    
   =
  var _0 : Type.core_option_option (borrowed t);
  var self__1 : borrowed (borrowed (seq t));
  var _3 : Type.core_option_option (borrowed t, borrowed (seq t));
  var _4 : borrowed (seq t);
  var _5 : borrowed (seq t);
  var _6 : borrowed (borrowed (seq t));
  var _7 : isize;
  var _8 : ();
  var first_9 : borrowed t;
  var rem_10 : borrowed (seq t);
  var _11 : borrowed (seq t);
  var _12 : borrowed t;
  {
    self__1 <- self_;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut ( * self__1);
    self__1 <- { self__1 with current = ( ^ _6) };
    _5 <- ([#"../take_first_mut.rs" 17 10 17 26] Take0.take _6);
    goto BB1
  }
  BB1 {
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _3 <- ([#"../take_first_mut.rs" 17 10 17 44] SplitFirstMut0.split_first_mut _4);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _5 };
    switch (_3)
      | Type.Core_Option_Option_None -> goto BB5
      | Type.Core_Option_Option_Some _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve3.resolve first_9 };
    first_9 <- (let (a, _) = Type.core_option_option_Some_0 _3 in a);
    assume { Resolve0.resolve rem_10 };
    rem_10 <- (let (_, a) = Type.core_option_option_Some_0 _3 in a);
    assume { Resolve2.resolve _3 };
    _11 <- borrow_mut ( * rem_10);
    rem_10 <- { rem_10 with current = ( ^ _11) };
    assume { Resolve0.resolve rem_10 };
    assume { Resolve0.resolve ( * self__1) };
    self__1 <- { self__1 with current = _11 };
    assume { Resolve1.resolve self__1 };
    _12 <- borrow_mut ( * first_9);
    first_9 <- { first_9 with current = ( ^ _12) };
    _0 <- Type.Core_Option_Option_Some _12;
    assume { Resolve3.resolve first_9 };
    goto BB6
  }
  BB4 {
    assume { Resolve1.resolve self__1 };
    assume { Resolve2.resolve _3 };
    absurd
  }
  BB5 {
    assume { Resolve1.resolve self__1 };
    assume { Resolve2.resolve _3 };
    _0 <- Type.Core_Option_Option_None;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
