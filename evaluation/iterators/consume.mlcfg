
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 63 20 63 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 17 281 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 4 281 27] Inv0.inv result }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range a)
  val next (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/range.rs" 711 17 711 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/range.rs" 711 4 711 35] Inv1.inv result }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  predicate into_iter_pre (self : i) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 30 4 30 10] ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 35 4 35 10] ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Num_Impl34_DeepModel_Stub
  use prelude.Int
  use prelude.IntSize
  function deep_model (self : isize) : int
end
module CreusotContracts_Std1_Num_Impl34_DeepModel_Interface
  use prelude.Int
  use prelude.IntSize
  function deep_model (self : isize) : int
  val deep_model (self : isize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl34_DeepModel
  use prelude.Int
  use prelude.IntSize
  function deep_model (self : isize) : int =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/num.rs" 22 16 22 35] IntSize.to_int self
  val deep_model (self : isize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 14 12 14 78] Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module Consume_SumRange_Interface
  use prelude.IntSize
  use prelude.Int
  val sum_range [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 6 0 6 35] (n : isize) : isize
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 4 11 4 18] IntSize.to_int n >= 0}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 5 10 5 21] result = n }
    
end
module Consume_SumRange
  use prelude.Int
  use prelude.IntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq isize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq isize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Option_Option_Type.t_option isize
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Option_Option_Type.t_option isize,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range isize
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range isize)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range isize),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl34_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = isize,
    predicate Resolve0.resolve = Resolve0.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range isize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = isize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans0 with
    type idx = isize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl0 with
    type idx = isize,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Ops_Range_Range_Type.t_range isize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_Range_Type.t_range isize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_Range_Type.t_range isize
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = isize,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = isize,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv2.inv
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range isize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  let rec cfg sum_range [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 6 0 6 35] [@cfg:stackify] [@cfg:subregion_analysis] (n : isize) : isize
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 4 11 4 18] IntSize.to_int n >= 0}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 5 10 5 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n : isize = n;
  var i : isize;
  var it : Core_Ops_Range_Range_Type.t_range isize;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range isize);
  var produced : Ghost.ghost_ty (Seq.seq isize);
  var _17 : Core_Option_Option_Type.t_option isize;
  var _18 : borrowed (Core_Ops_Range_Range_Type.t_range isize);
  var x : isize;
  var _21 : Ghost.ghost_ty (Seq.seq isize);
  {
    goto BB0
  }
  BB0 {
    i <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 7 16 7 17] (0 : isize));
    it <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 8 17 8 35] IntoIter0.into_iter (Core_Ops_Range_Range_Type.C_Range ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 8 18 8 19] (0 : isize)) n));
    goto BB1
  }
  BB1 {
    iter_old <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 9 19 9 29] Ghost.new it);
    goto BB2
  }
  BB2 {
    produced <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 10 23 10 41] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 11 16 11 23] Inv0.inv it };
    invariant { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 12 16 12 55] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) it };
    invariant { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 13 16 13 46] IntSize.to_int i = Seq.length (Ghost.inner produced) /\ i <= n };
    goto BB5
  }
  BB5 {
    _18 <- Borrow.borrow_mut it;
    it <-  ^ _18;
    _17 <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 15 14 15 23] Next0.next _18);
    _18 <- any borrowed (Core_Ops_Range_Range_Type.t_range isize);
    goto BB6
  }
  BB6 {
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB7
      | Core_Option_Option_Type.C_Some _ -> goto BB8
      end
  }
  BB7 {
    _0 <- i;
    return _0
  }
  BB8 {
    goto BB10
  }
  BB9 {
    absurd
  }
  BB10 {
    x <- Core_Option_Option_Type.some_0 _17;
    _21 <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 17 27 17 69] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton x)));
    goto BB11
  }
  BB11 {
    produced <- _21;
    _21 <- any Ghost.ghost_ty (Seq.seq isize);
    i <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 18 16 18 22] i + ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 18 21 18 22] (1 : isize)));
    goto BB4
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs" 49 8 49 27] (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/logic/ops.rs" 19 8 19 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Slice_Iter_IterMut_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_itermut 't =
    | C_IterMut (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata (borrowed 't))
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl15_ShallowModel_Stub
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
end
module CreusotContracts_Std1_Slice_Impl15_ShallowModel_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
  val shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 402 14 402 50] Seq.length (ShallowModel0.shallow_model ( ^ result)) = Seq.length (ShallowModel0.shallow_model ( * result)) }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 403 4 403 50] Inv0.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut t . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 403 4 403 50] Inv0.inv (shallow_model self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 402 14 402 50] Seq.length (ShallowModel0.shallow_model ( ^ shallow_model self)) = Seq.length (ShallowModel0.shallow_model ( * shallow_model self)))
end
module CreusotContracts_Std1_Slice_Impl15_ShallowModel
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
  val shallow_model (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : borrowed (slice t)
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 402 14 402 50] Seq.length (ShallowModel0.shallow_model ( ^ result)) = Seq.length (ShallowModel0.shallow_model ( * result)) }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 403 4 403 50] Inv0.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Core_Slice_Iter_IterMut_Type.t_itermut t . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 403 4 403 50] Inv0.inv (shallow_model self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 402 14 402 50] Seq.length (ShallowModel0.shallow_model ( ^ shallow_model self)) = Seq.length (ShallowModel0.shallow_model ( * shallow_model self)))
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Interface
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic
  type t
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/logic/ops.rs" 41 8 41 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 75 23 75 27] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 72 14 72 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 73 4 73 82] forall i : int . 0 <= i /\ i < Seq.length result ->  * Seq.get result i = IndexLogic0.index_logic ( * self) i }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 74 4 74 85] forall i : int . 0 <= i /\ i < Seq.length result ->  ^ Seq.get result i = IndexLogic0.index_logic ( ^ self) i }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 75 4 75 43] Inv1.inv result }
    ensures { result = to_mut_seq self }
    
  axiom to_mut_seq_spec : forall self : borrowed (slice t) . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 75 23 75 27] Inv0.inv self) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 75 4 75 43] Inv1.inv (to_mut_seq self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 74 4 74 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = IndexLogic0.index_logic ( ^ self) i) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 73 4 73 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = IndexLogic0.index_logic ( * self) i) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 72 14 72 41] Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToMutSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  function to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
  val to_mut_seq (self : borrowed (slice t)) : Seq.seq (borrowed t)
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 75 23 75 27] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 72 14 72 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 73 4 73 82] forall i : int . 0 <= i /\ i < Seq.length result ->  * Seq.get result i = IndexLogic0.index_logic ( * self) i }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 74 4 74 85] forall i : int . 0 <= i /\ i < Seq.length result ->  ^ Seq.get result i = IndexLogic0.index_logic ( ^ self) i }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 75 4 75 43] Inv1.inv result }
    ensures { result = to_mut_seq self }
    
  axiom to_mut_seq_spec : forall self : borrowed (slice t) . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 75 23 75 27] Inv0.inv self) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 75 4 75 43] Inv1.inv (to_mut_seq self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 74 4 74 85] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  ^ Seq.get (to_mut_seq self) i = IndexLogic0.index_logic ( ^ self) i) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 73 4 73 82] forall i : int . 0 <= i /\ i < Seq.length (to_mut_seq self) ->  * Seq.get (to_mut_seq self) i = IndexLogic0.index_logic ( * self) i) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 72 14 72 41] Seq.length (to_mut_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl16_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
end
module CreusotContracts_Std1_Slice_Impl16_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
  val produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Slice_Impl16_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel2 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Stub as ToMutSeq0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl15_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv2.inv,
    axiom .
  predicate produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t)
    
   =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 428 12 428 66] ToMutSeq0.to_mut_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToMutSeq0.to_mut_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_IterMut_Type.t_itermut t) (visited : Seq.seq (borrowed t)) (tl : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Stub
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Interface
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/logic/ops.rs" 85 8 85 33] Seq.get (Ghost.inner self) ix
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl17_Resolve_Stub
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t)
end
module CreusotContracts_Std1_Slice_Impl17_Resolve_Interface
  type t
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t)
  val resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl17_Resolve
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl15_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv2.inv,
    axiom .
  predicate resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 413 20 413 36]  * ShallowModel0.shallow_model self =  ^ ShallowModel0.shallow_model self
  val resolve (self : Core_Slice_Iter_IterMut_Type.t_itermut t) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_Impl9_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = slice t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val deref_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (slice t)
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2616 22 2616 26] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 152 26 152 42] ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 153 26 153 48] ShallowModel2.shallow_model ( ^ result) = ShallowModel3.shallow_model ( ^ self) }
    ensures { [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2616 4 2616 39] Inv1.inv result }
    
end
module Core_Slice_Impl0_IterMut_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (slice t)
  clone CreusotContracts_Std1_Slice_Impl15_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv2.inv,
    axiom .
  val iter_mut (self : borrowed (slice t)) : Core_Slice_Iter_IterMut_Type.t_itermut t
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/mod.rs" 1018 25 1018 29] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 231 0 327 1] ShallowModel0.shallow_model result = self }
    
end
module CreusotContracts_Std1_Slice_Impl16_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
end
module CreusotContracts_Std1_Slice_Impl16_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t))
  val completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl16_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut t,
    type ShallowModelTy0.shallowModelTy = borrowed (slice t)
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut t
  predicate completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 421 20 421 61] Resolve0.resolve self /\ ShallowModel1.shallow_model ( * ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : bool
    ensures { result = completed self }
    
end
module Core_Slice_Iter_Impl189_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option (borrowed t)
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl16_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_IterMut_Type.t_itermut t
  val next (self : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/iter/macros.rs" 131 12 131 47] Inv0.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
  val produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 434 14 434 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t . [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 434 14 434 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl16_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : () =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 432 4 432 10] ()
  val produces_refl (a : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 434 14 434 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t . [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 434 14 434 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
  val produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 439 15 439 32] Produces0.produces a ab b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 440 15 440 32] Produces0.produces b bc c}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 442 31 442 33] Inv0.inv ab}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 442 61 442 63] Inv0.inv bc}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 441 14 441 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : Core_Slice_Iter_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : Core_Slice_Iter_IterMut_Type.t_itermut t . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 439 15 439 32] Produces0.produces a ab b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 440 15 440 32] Produces0.produces b bc c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 442 31 442 33] Inv0.inv ab) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 442 61 442 63] Inv0.inv bc) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 441 14 441 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Slice_Impl16_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (borrowed t)
  clone CreusotContracts_Std1_Slice_Impl16_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    
   =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 437 4 437 10] ()
  val produces_trans (a : Core_Slice_Iter_IterMut_Type.t_itermut t) (ab : Seq.seq (borrowed t)) (b : Core_Slice_Iter_IterMut_Type.t_itermut t) (bc : Seq.seq (borrowed t)) (c : Core_Slice_Iter_IterMut_Type.t_itermut t) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 439 15 439 32] Produces0.produces a ab b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 440 15 440 32] Produces0.produces b bc c}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 442 31 442 33] Inv0.inv ab}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 442 61 442 63] Inv0.inv bc}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 441 14 441 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_IterMut_Type.t_itermut t, ab : Seq.seq (borrowed t), b : Core_Slice_Iter_IterMut_Type.t_itermut t, bc : Seq.seq (borrowed t), c : Core_Slice_Iter_IterMut_Type.t_itermut t . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 439 15 439 32] Produces0.produces a ab b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 440 15 440 32] Produces0.produces b bc c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 442 31 442 33] Inv0.inv ab) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 442 61 442 63] Inv0.inv bc) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/slice.rs" 441 14 441 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module Consume_AllZero_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq usize
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  val all_zero [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 28 0 28 35] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 26 10 26 33] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 27 0 27 66] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UIntSize.to_int (IndexLogic0.index_logic ( ^ v) i) = 0 }
    
end
module Consume_AllZero
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Ghost
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Core_Option_Option_Type.t_option (borrowed usize)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Core_Option_Option_Type.t_option (borrowed usize),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq usize
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = slice usize
  use Core_Slice_Iter_IterMut_Type as Core_Slice_Iter_IterMut_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (slice usize)
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ShallowModel_Interface as ShallowModel4 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel5 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize,
    type ShallowModelTy0.shallowModelTy = borrowed (slice usize),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq (borrowed usize)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Seq.seq (borrowed usize),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = slice usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (slice usize),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl16_Completed as Completed0 with
    type t = usize,
    predicate Resolve0.resolve = Resolve4.resolve,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic2 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel2 with
    type t = slice usize,
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToMutSeq_Interface as ToMutSeq0 with
    type t = usize,
    predicate Inv0.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl16_Produces as Produces0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ToMutSeq0.to_mut_seq = ToMutSeq0.to_mut_seq,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv3.inv = Inv6.inv
  clone CreusotContracts_Std1_Slice_Impl16_ProducesTrans as ProducesTrans0 with
    type t = usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl16_ProducesRefl as ProducesRefl0 with
    type t = usize,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Slice_Iter_IterMut_Type.t_itermut usize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Slice_Iter_IterMut_Type.t_itermut usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl17_Resolve as Resolve2 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  clone Core_Slice_Iter_Impl189_Next_Interface as Next0 with
    type t = usize,
    type Item0.item = borrowed usize,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv7.inv
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = borrowed usize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = slice usize
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Slice_Iter_IterMut_Type.t_itermut usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Core_Slice_Impl0_IterMut_Interface as IterMut0 with
    type t = usize,
    predicate Inv0.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Inv1.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv4.inv
  clone Alloc_Vec_Impl9_DerefMut_Interface as DerefMut0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel0.shallow_model,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv3.inv = Inv4.inv,
    predicate Inv4.inv = Inv5.inv
  let rec cfg all_zero [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 28 0 28 35] [@cfg:stackify] [@cfg:subregion_analysis] (v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 26 10 26 33] Seq.length (ShallowModel0.shallow_model ( ^ v)) = Seq.length (ShallowModel1.shallow_model v) }
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 27 0 27 66] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model v) -> UIntSize.to_int (IndexLogic1.index_logic ( ^ v) i) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) = v;
  var it : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _5 : Core_Slice_Iter_IterMut_Type.t_itermut usize;
  var _6 : borrowed (slice usize);
  var _7 : borrowed (slice usize);
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var iter_old : Ghost.ghost_ty (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var produced : Ghost.ghost_ty (Seq.seq (borrowed usize));
  var _17 : Core_Option_Option_Type.t_option (borrowed usize);
  var _18 : borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
  var x : borrowed usize;
  var _21 : Ghost.ghost_ty (Seq.seq (borrowed usize));
  {
    goto BB0
  }
  BB0 {
    _8 <- Borrow.borrow_mut ( * v);
    v <- { v with current = ( ^ _8) };
    _7 <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 29 17 29 29] DerefMut0.deref_mut _8);
    _8 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB1
  }
  BB1 {
    _6 <- Borrow.borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 29 17 29 29] IterMut0.iter_mut _6);
    _6 <- any borrowed (slice usize);
    goto BB2
  }
  BB2 {
    it <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 29 17 29 41] IntoIter0.into_iter _5);
    _5 <- any Core_Slice_Iter_IterMut_Type.t_itermut usize;
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _7 };
    iter_old <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 30 19 30 29] Ghost.new it);
    goto BB4
  }
  BB4 {
    produced <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 31 23 31 41] Ghost.new (Seq.empty ));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 32 16 32 23] Inv0.inv it };
    invariant { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 33 16 33 55] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) it };
    invariant { [#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 32 4 32 25] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced) -> UIntSize.to_int ( ^ IndexLogic0.index_logic produced i) = 0 };
    goto BB7
  }
  BB7 {
    _18 <- Borrow.borrow_mut it;
    it <-  ^ _18;
    _17 <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 36 14 36 23] Next0.next _18);
    _18 <- any borrowed (Core_Slice_Iter_IterMut_Type.t_itermut usize);
    goto BB8
  }
  BB8 {
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB9 {
    assume { Resolve2.resolve it };
    _0 <- ();
    assume { Resolve3.resolve v };
    return _0
  }
  BB10 {
    goto BB12
  }
  BB11 {
    assume { Resolve2.resolve it };
    assume { Resolve3.resolve v };
    absurd
  }
  BB12 {
    x <- Core_Option_Option_Type.some_0 _17;
    _17 <- (let Core_Option_Option_Type.C_Some a = _17 in Core_Option_Option_Type.C_Some (any borrowed usize));
    _21 <- ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 38 27 38 69] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton x)));
    goto BB13
  }
  BB13 {
    produced <- _21;
    _21 <- any Ghost.ghost_ty (Seq.seq (borrowed usize));
    x <- { x with current = ([#"/mnt/data/projects/creusot/evaluation/iterators/consume.rs" 39 21 39 22] (0 : usize)) };
    assume { Resolve1.resolve x };
    goto BB6
  }
  
end
