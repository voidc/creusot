
module IterE3_SkipZeros_Type
  type t_skipzeros 'i =
    | C_SkipZeros 'i
    
  let function skipzeros_inner (self : t_skipzeros 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_SkipZeros a -> a
      end
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module IterE3_Iter_Produces_Stub
  type self
  use prelude.Int
  use prelude.UInt32
  predicate produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 10 4 10 51] (self : self) (x : uint32) (other : self)
    
end
module IterE3_Iter_Produces_Interface
  type self
  use prelude.Int
  use prelude.UInt32
  predicate produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 10 4 10 51] (self : self) (x : uint32) (other : self)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 10 4 10 51] (self : self) (x : uint32) (other : self) : bool
    ensures { result = produces self x other }
    
end
module IterE3_Iter_Produces
  type self
  use prelude.Int
  use prelude.UInt32
  predicate produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 10 4 10 51] (self : self) (x : uint32) (other : self)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 10 4 10 51] (self : self) (x : uint32) (other : self) : bool
    ensures { result = produces self x other }
    
end
module IterE3_Impl0_Produces_Stub
  type i
  use prelude.Int
  use prelude.UInt32
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 29 4 29 50] (self : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : IterE3_SkipZeros_Type.t_skipzeros i)
    
end
module IterE3_Impl0_Produces_Interface
  type i
  use prelude.Int
  use prelude.UInt32
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 29 4 29 50] (self : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : IterE3_SkipZeros_Type.t_skipzeros i)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 29 4 29 50] (self : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : IterE3_SkipZeros_Type.t_skipzeros i) : bool
    ensures { result = produces self x other }
    
end
module IterE3_Impl0_Produces
  type i
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  clone IterE3_Iter_Produces_Stub as Produces0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq i
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 29 4 29 50] (self : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : IterE3_SkipZeros_Type.t_skipzeros i)
    
   =
    [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 31 12 36 60] UInt32.to_int x <> 0 /\ (exists hist : Seq.seq i . Inv0.inv hist /\ Seq.length hist > 0 /\ IterE3_SkipZeros_Type.skipzeros_inner self = Seq.get hist 0 /\ (forall i : int . 0 < i /\ i < Seq.length hist -> Produces0.produces (Seq.get hist (i - 1)) (0 : uint32) (Seq.get hist i)) /\ Produces0.produces (Seq.get hist (Seq.length hist - 1)) x (IterE3_SkipZeros_Type.skipzeros_inner other))
  val produces [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 29 4 29 50] (self : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : IterE3_SkipZeros_Type.t_skipzeros i) : bool
    ensures { result = produces self x other }
    
end
module IterE3_Iter_ProducesInj_Stub
  type self
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone IterE3_Iter_Produces_Stub as Produces0 with
    type self = self
  function produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 4 16 54] (a : self) (x : uint32) (y : uint32) (b : self) : ()
    
end
module IterE3_Iter_ProducesInj_Interface
  type self
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone IterE3_Iter_Produces_Stub as Produces0 with
    type self = self
  function produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 4 16 54] (a : self) (x : uint32) (y : uint32) (b : self) : ()
    
  val produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 4 16 54] (a : self) (x : uint32) (y : uint32) (b : self) : ()
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 13 15 13 31] Produces0.produces a x b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 14 15 14 31] Produces0.produces a y b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 20 16 21] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 45 16 46] Inv0.inv b}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 15 14 15 20] x = y }
    ensures { result = produces_inj a x y b }
    
  axiom produces_inj_spec : forall a : self, x : uint32, y : uint32, b : self . ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 13 15 13 31] Produces0.produces a x b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 14 15 14 31] Produces0.produces a y b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 20 16 21] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 45 16 46] Inv0.inv b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 15 14 15 20] x = y)
end
module IterE3_Iter_ProducesInj
  type self
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone IterE3_Iter_Produces_Stub as Produces0 with
    type self = self
  function produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 4 16 54] (a : self) (x : uint32) (y : uint32) (b : self) : ()
    
  val produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 4 16 54] (a : self) (x : uint32) (y : uint32) (b : self) : ()
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 13 15 13 31] Produces0.produces a x b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 14 15 14 31] Produces0.produces a y b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 20 16 21] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 45 16 46] Inv0.inv b}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 15 14 15 20] x = y }
    ensures { result = produces_inj a x y b }
    
  axiom produces_inj_spec : forall a : self, x : uint32, y : uint32, b : self . ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 13 15 13 31] Produces0.produces a x b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 14 15 14 31] Produces0.produces a y b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 20 16 21] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 16 45 16 46] Inv0.inv b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 15 14 15 20] x = y)
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module IterE3_Impl0_ProducesInj_Stub
  type i
  use prelude.Int
  use prelude.UInt32
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = IterE3_SkipZeros_Type.t_skipzeros i
  clone IterE3_Impl0_Produces_Stub as Produces0 with
    type i = i
  function produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 4 45 53] (a : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (y : uint32) (b : IterE3_SkipZeros_Type.t_skipzeros i) : ()
    
end
module IterE3_Impl0_ProducesInj_Interface
  type i
  use prelude.Int
  use prelude.UInt32
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = IterE3_SkipZeros_Type.t_skipzeros i
  clone IterE3_Impl0_Produces_Stub as Produces0 with
    type i = i
  function produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 4 45 53] (a : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (y : uint32) (b : IterE3_SkipZeros_Type.t_skipzeros i) : ()
    
  val produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 4 45 53] (a : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (y : uint32) (b : IterE3_SkipZeros_Type.t_skipzeros i) : ()
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 42 15 42 31] Produces0.produces a x b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 43 15 43 31] Produces0.produces a y b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 20 45 21] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 45 45 46] Inv0.inv b}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 44 14 44 20] x = y }
    ensures { result = produces_inj a x y b }
    
  axiom produces_inj_spec : forall a : IterE3_SkipZeros_Type.t_skipzeros i, x : uint32, y : uint32, b : IterE3_SkipZeros_Type.t_skipzeros i . ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 42 15 42 31] Produces0.produces a x b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 43 15 43 31] Produces0.produces a y b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 20 45 21] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 45 45 46] Inv0.inv b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 44 14 44 20] x = y)
end
module IterE3_Impl0_ProducesInj
  type i
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone IterE3_Iter_Produces_Stub as Produces1 with
    type self = i
  clone IterE3_Iter_ProducesInj_Stub as ProducesInj0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = IterE3_SkipZeros_Type.t_skipzeros i
  clone IterE3_Impl0_Produces_Stub as Produces0 with
    type i = i
  function produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 4 45 53] (a : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (y : uint32) (b : IterE3_SkipZeros_Type.t_skipzeros i) : ()
    
   =
    [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 46 8 46 23] let _ = () in ()
  val produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 4 45 53] (a : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (y : uint32) (b : IterE3_SkipZeros_Type.t_skipzeros i) : ()
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 42 15 42 31] Produces0.produces a x b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 43 15 43 31] Produces0.produces a y b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 20 45 21] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 45 45 46] Inv0.inv b}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 44 14 44 20] x = y }
    ensures { result = produces_inj a x y b }
    
  axiom produces_inj_spec : forall a : IterE3_SkipZeros_Type.t_skipzeros i, x : uint32, y : uint32, b : IterE3_SkipZeros_Type.t_skipzeros i . ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 42 15 42 31] Produces0.produces a x b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 43 15 43 31] Produces0.produces a y b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 20 45 21] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 45 45 46] Inv0.inv b) -> ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 44 14 44 20] x = y)
end
module IterE3_Impl0_ProducesInj_Impl
  type i
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq i
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = IterE3_SkipZeros_Type.t_skipzeros i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = IterE3_SkipZeros_Type.t_skipzeros i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone IterE3_Iter_Produces_Interface as Produces1 with
    type self = i
  clone IterE3_Iter_ProducesInj_Interface as ProducesInj0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone IterE3_Impl0_Produces as Produces0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_inj [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 4 45 53] (a : IterE3_SkipZeros_Type.t_skipzeros i) (x : uint32) (y : uint32) (b : IterE3_SkipZeros_Type.t_skipzeros i) : ()
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 42 15 42 31] Produces0.produces a x b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 43 15 43 31] Produces0.produces a y b}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 20 45 21] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 45 45 46] Inv0.inv b}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 44 14 44 20] x = y }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 46 8 46 23] let _ = () in ()
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module IterE3_Iter_Next_Interface
  type self
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone IterE3_Iter_Produces_Stub as Produces0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val next [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 19 4 19 30] (self : borrowed self) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 19 17 19 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 18 14 18 42] Produces0.produces ( * self) result ( ^ self) }
    
end
module IterE3_Impl0_Next_Interface
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  clone IterE3_Impl0_Produces_Stub as Produces0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (IterE3_SkipZeros_Type.t_skipzeros i)
  val next [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 50 4 50 29] (self : borrowed (IterE3_SkipZeros_Type.t_skipzeros i)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 50 17 50 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 49 14 49 42] Produces0.produces ( * self) result ( ^ self) }
    
end
module IterE3_Impl0_Next
  type i
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq i
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (IterE3_SkipZeros_Type.t_skipzeros i)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (IterE3_SkipZeros_Type.t_skipzeros i),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone IterE3_Iter_Produces_Interface as Produces0 with
    type self = i
  clone IterE3_Iter_ProducesInj_Interface as ProducesInj0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone IterE3_Impl0_Produces as Produces1 with
    type i = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = IterE3_SkipZeros_Type.t_skipzeros i
  clone IterE3_Iter_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty i
  let rec cfg next [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 50 4 50 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (IterE3_SkipZeros_Type.t_skipzeros i)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 50 17 50 21] Inv2.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 49 14 49 42] Produces1.produces ( * self) result ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : borrowed (IterE3_SkipZeros_Type.t_skipzeros i) = self;
  var old' : Ghost.ghost_ty i;
  var next : uint32;
  var _6 : borrowed i;
  var _13 : uint32;
  var _14 : borrowed i;
  {
    goto BB0
  }
  BB0 {
    old' <- ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 51 18 51 36] Ghost.new (IterE3_SkipZeros_Type.skipzeros_inner ( * self)));
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv old' };
    assume { Resolve0.resolve old' };
    _6 <- Borrow.borrow_mut (IterE3_SkipZeros_Type.skipzeros_inner ( * self));
    self <- { self with current = (let IterE3_SkipZeros_Type.C_SkipZeros a =  * self in IterE3_SkipZeros_Type.C_SkipZeros ( ^ _6)) };
    assume { Inv1.inv ( ^ _6) };
    next <- ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 52 23 52 40] Next0.next _6);
    _6 <- any borrowed i;
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 54 20 54 29] Inv2.inv self };
    invariant { [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 54 8 54 31] exists hist : Seq.seq i . Inv3.inv hist /\ Seq.length hist > 0 /\ Ghost.inner old' = Seq.get hist 0 /\ (forall i : int . 0 < i /\ i < Seq.length hist -> Produces0.produces (Seq.get hist (i - 1)) (0 : uint32) (Seq.get hist i)) /\ Produces0.produces (Seq.get hist (Seq.length hist - 1)) next (IterE3_SkipZeros_Type.skipzeros_inner ( * self)) };
    goto BB4
  }
  BB4 {
    switch ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 61 14 61 23] next = ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 61 22 61 23] (0 : uint32)))
      | False -> goto BB7
      | True -> goto BB5
      end
  }
  BB5 {
    _14 <- Borrow.borrow_mut (IterE3_SkipZeros_Type.skipzeros_inner ( * self));
    self <- { self with current = (let IterE3_SkipZeros_Type.C_SkipZeros a =  * self in IterE3_SkipZeros_Type.C_SkipZeros ( ^ _14)) };
    assume { Inv1.inv ( ^ _14) };
    _13 <- ([#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 62 19 62 36] Next0.next _14);
    _14 <- any borrowed i;
    goto BB6
  }
  BB6 {
    next <- _13;
    _13 <- any uint32;
    goto BB3
  }
  BB7 {
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    _0 <- next;
    return _0
  }
  
end
module IterE3_Impl0
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use IterE3_SkipZeros_Type as IterE3_SkipZeros_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = IterE3_SkipZeros_Type.t_skipzeros i
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = IterE3_SkipZeros_Type.t_skipzeros i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone IterE3_Iter_Produces_Interface as Produces1 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (IterE3_SkipZeros_Type.t_skipzeros i)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed (IterE3_SkipZeros_Type.t_skipzeros i),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone IterE3_Impl0_Produces as Produces0 with
    type i = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces
  goal next_refn : [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 50 4 50 29] forall self : borrowed (IterE3_SkipZeros_Type.t_skipzeros i) . Inv0.inv self -> Inv0.inv self /\ (forall result : uint32 . Produces0.produces ( * self) result ( ^ self) -> Produces0.produces ( * self) result ( ^ self))
  goal produces_inj_refn : [#"/mnt/data/projects/creusot/evaluation/iterators/iter_e3.rs" 45 4 45 53] forall a : IterE3_SkipZeros_Type.t_skipzeros i . forall x : uint32 . forall y : uint32 . forall b : IterE3_SkipZeros_Type.t_skipzeros i . Inv1.inv b /\ Inv1.inv a /\ Produces0.produces a y b /\ Produces0.produces a x b -> Inv1.inv b /\ Inv1.inv a /\ Produces0.produces a y b /\ Produces0.produces a x b /\ (forall result : () . x = y -> x = y)
end
