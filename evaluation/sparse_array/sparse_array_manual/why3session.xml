<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.5.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="sparse_array_manual.mlcfg"/>
<theory name="SparseArrayManual_Impl1_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="1"><result status="valid" time="0.122953" steps="643"/></proof>
 </goal>
</theory>
<theory name="SparseArrayManual_Impl1_LemmaPermutation_Impl" proved="true">
 <goal name="lemma_permutation&#39;vc" expl="VC for lemma_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_permutation&#39;vc.0" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="map.MapInjection">
   <goal name="lemma_permutation&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="pose" proved="true" arg1="f" arg2="(fun k -&gt; to_int (get1 (shallow_model2 (sparse_back self)) k))">
    <goal name="lemma_permutation&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(surjective f (sparse_n self))">
     <goal name="lemma_permutation&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.112790" steps="27117"/></proof>
     </goal>
     <goal name="lemma_permutation&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists k. 0 &lt;= k &lt; sparse_n self /\ (f k) = i)">
      <goal name="lemma_permutation&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="unfold" proved="true" arg1="surjective" arg2="in" arg3="h1">
       <goal name="lemma_permutation&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.253336" steps="2159"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lemma_permutation&#39;vc.0.0.0.1.1" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.075475" steps="12126"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArrayManual_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.025164" steps="44"/></proof>
  </goal>
  <goal name="set&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.022422" steps="36"/></proof>
  </goal>
  <goal name="set&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.019970" steps="38"/></proof>
  </goal>
  <goal name="set&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.020500" steps="38"/></proof>
  </goal>
  <goal name="set&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.023617" steps="48"/></proof>
  </goal>
  <goal name="set&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.026933" steps="112"/></proof>
  </goal>
  <goal name="set&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.028300" steps="52"/></proof>
  </goal>
  <goal name="set&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.026470" steps="53"/></proof>
  </goal>
  <goal name="set&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.051214" steps="155"/></proof>
  </goal>
  <goal name="set&#39;vc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.035312" steps="63"/></proof>
  </goal>
  <goal name="set&#39;vc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.037769" steps="64"/></proof>
  </goal>
  <goal name="set&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.026598" steps="20"/></proof>
  </goal>
  <goal name="set&#39;vc.12" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.382240" steps="28244"/></proof>
  </goal>
  <goal name="set&#39;vc.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.062780" steps="168510"/></proof>
  </goal>
  <goal name="set&#39;vc.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.047910" steps="64"/></proof>
  </goal>
  <goal name="set&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.047160" steps="65"/></proof>
  </goal>
  <goal name="set&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.054243" steps="173847"/></proof>
  </goal>
  <goal name="set&#39;vc.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.089439" steps="121"/></proof>
  </goal>
  <goal name="set&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.090112" steps="122"/></proof>
  </goal>
  <goal name="set&#39;vc.19" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.140171" steps="304"/></proof>
  </goal>
  <goal name="set&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.104211" steps="178"/></proof>
  </goal>
  <goal name="set&#39;vc.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.21.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.820951" steps="62966"/></proof>
   </goal>
   <goal name="set&#39;vc.21.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.21.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.839651" steps="975701"/></proof>
    </goal>
    <goal name="set&#39;vc.21.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.805443" steps="1068030"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.360238" steps="476690"/></proof>
  </goal>
  <goal name="set&#39;vc.23" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.23.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.561811" steps="38173"/></proof>
   </goal>
   <goal name="set&#39;vc.23.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.897932" steps="64620"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.318148" steps="527715"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArrayManual_Create" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.160983" steps="718"/></proof>
 </goal>
</theory>
<theory name="SparseArrayManual_F" proved="true">
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <proof prover="1"><result status="valid" time="0.611607" steps="4168"/></proof>
 </goal>
</theory>
</file>
</why3session>
