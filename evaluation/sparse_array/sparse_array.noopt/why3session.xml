<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.5.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="sparse_array.noopt.mlcfg"/>
<theory name="SparseArray_Impl2_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="3"><result status="valid" time="0.119879" steps="23547"/></proof>
 </goal>
</theory>
<theory name="SparseArray_Impl2_LemmaPermutation_Impl" proved="true">
 <goal name="lemma_permutation&#39;vc" expl="VC for lemma_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_permutation&#39;vc.0" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="map.MapInjection">
   <goal name="lemma_permutation&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="pose" proved="true" arg1="f" arg2="(fun k -&gt; to_int (get1 (shallow_model2 (sparse_back self)) k))">
    <goal name="lemma_permutation&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(surjective f (sparse_n self))">
     <goal name="lemma_permutation&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.128155" steps="30105"/></proof>
     </goal>
     <goal name="lemma_permutation&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists k. 0 &lt;= k &lt; sparse_n self /\ (f k) = i)">
      <goal name="lemma_permutation&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="unfold" proved="true" arg1="surjective" arg2="in" arg3="h1">
       <goal name="lemma_permutation&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.873349" steps="6618"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lemma_permutation&#39;vc.0.0.0.1.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(exists k. 0 &lt;= k &lt; sparse_n self /\ (f k) = i)">
       <goal name="lemma_permutation&#39;vc.0.0.0.1.1.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.083982" steps="13036"/></proof>
       </goal>
       <goal name="lemma_permutation&#39;vc.0.0.0.1.1.1" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="0.096527" steps="13378"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Impl2_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.163957" steps="19766"/></proof>
  </goal>
  <goal name="set&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.165675" steps="19758"/></proof>
  </goal>
  <goal name="set&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.093846" steps="17573"/></proof>
  </goal>
  <goal name="set&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.098301" steps="16124"/></proof>
  </goal>
  <goal name="set&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.126567" steps="19987"/></proof>
  </goal>
  <goal name="set&#39;vc.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.024183" steps="505"/></proof>
  </goal>
  <goal name="set&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.109230" steps="31407"/></proof>
  </goal>
  <goal name="set&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.193378" steps="20952"/></proof>
  </goal>
  <goal name="set&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.140696" steps="24194"/></proof>
  </goal>
  <goal name="set&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.275862" steps="32965"/></proof>
  </goal>
  <goal name="set&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.108040" steps="21190"/></proof>
  </goal>
  <goal name="set&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.517403" steps="1120562"/></proof>
  </goal>
  <goal name="set&#39;vc.12" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.238761" steps="32016"/></proof>
  </goal>
  <goal name="set&#39;vc.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.213043" steps="24976"/></proof>
  </goal>
  <goal name="set&#39;vc.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.460348" steps="34020"/></proof>
  </goal>
  <goal name="set&#39;vc.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.160266" steps="21752"/></proof>
  </goal>
  <goal name="set&#39;vc.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.244901" steps="26370"/></proof>
  </goal>
  <goal name="set&#39;vc.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.357053" steps="38689"/></proof>
  </goal>
  <goal name="set&#39;vc.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.229656" steps="22118"/></proof>
  </goal>
  <goal name="set&#39;vc.19" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.255573" steps="31756"/></proof>
  </goal>
  <goal name="set&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="1.502794" steps="2002971"/></proof>
  </goal>
  <goal name="set&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.301371" steps="30999"/></proof>
  </goal>
  <goal name="set&#39;vc.22" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.22.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.637223" steps="46668"/></proof>
   </goal>
   <goal name="set&#39;vc.22.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.174191" steps="88485"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.528266" steps="785010"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Create" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="3"><result status="valid" time="0.611805" steps="51092"/></proof>
 </goal>
</theory>
<theory name="SparseArray_F" proved="true">
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <proof prover="2"><result status="valid" time="0.328671" steps="453848"/></proof>
 </goal>
</theory>
</file>
</why3session>
