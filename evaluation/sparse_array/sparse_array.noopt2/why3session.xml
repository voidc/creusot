<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.2" timelimit="1" steplimit="0" memlimit="4000"/>
<prover id="1" name="Alt-Ergo" version="2.5.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="sparse_array.noopt2.mlcfg"/>
<theory name="SparseArray_Impl2_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="1"><result status="valid" time="0.298803" steps="1800"/></proof>
 </goal>
</theory>
<theory name="SparseArray_Impl2_LemmaPermutation_Impl" proved="true">
 <goal name="lemma_permutation&#39;vc" expl="VC for lemma_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_permutation&#39;vc.0" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="map.MapInjection">
   <goal name="lemma_permutation&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="pose" proved="true" arg1="f" arg2="(fun k -&gt; to_int (get1 (shallow_model2 (sparse_back self)) k))">
    <goal name="lemma_permutation&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(surjective f (sparse_n self))">
     <goal name="lemma_permutation&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.237049" steps="46085"/></proof>
     </goal>
     <goal name="lemma_permutation&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists k. 0 &lt;= k &lt; sparse_n self /\ (f k) = i)">
      <goal name="lemma_permutation&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="unfold" proved="true" arg1="surjective" arg2="in" arg3="h1">
       <goal name="lemma_permutation&#39;vc.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.835133" steps="6665"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="lemma_permutation&#39;vc.0.0.0.1.1" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.085394" steps="14749"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="lemma_permutation&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.036737" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Impl2_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.047277" steps="187"/></proof>
  </goal>
  <goal name="set&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.029709" steps="71"/></proof>
  </goal>
  <goal name="set&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.027750" steps="28"/></proof>
  </goal>
  <goal name="set&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.020234" steps="38"/></proof>
  </goal>
  <goal name="set&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.030273" steps="49"/></proof>
  </goal>
  <goal name="set&#39;vc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.053190" steps="265"/></proof>
  </goal>
  <goal name="set&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.085620" steps="244"/></proof>
  </goal>
  <goal name="set&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.043281" steps="43"/></proof>
  </goal>
  <goal name="set&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.234205" steps="977"/></proof>
  </goal>
  <goal name="set&#39;vc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.108689" steps="306"/></proof>
  </goal>
  <goal name="set&#39;vc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.045791" steps="67"/></proof>
  </goal>
  <goal name="set&#39;vc.11" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.11.0" expl="type invariant" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.11.0.0" expl="type invariant" proved="true">
    <proof prover="0" timelimit="30"><result status="valid" time="0.972953" steps="1156976"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set&#39;vc.11.1" expl="type invariant" proved="true">
   <proof prover="1"><result status="valid" time="0.046434" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.037023" steps="44"/></proof>
  </goal>
  <goal name="set&#39;vc.13" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.470392" steps="33986"/></proof>
  </goal>
  <goal name="set&#39;vc.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.299192" steps="26227"/></proof>
  </goal>
  <goal name="set&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.690934" steps="1641"/></proof>
  </goal>
  <goal name="set&#39;vc.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.056755" steps="36"/></proof>
  </goal>
  <goal name="set&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.109138" steps="219"/></proof>
  </goal>
  <goal name="set&#39;vc.18" expl="precondition" proved="true">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.072374" steps="212546"/></proof>
  </goal>
  <goal name="set&#39;vc.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.216537" steps="27712"/></proof>
  </goal>
  <goal name="set&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.099111" steps="128"/></proof>
  </goal>
  <goal name="set&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.112708" steps="143"/></proof>
  </goal>
  <goal name="set&#39;vc.22" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.154602" steps="331"/></proof>
  </goal>
  <goal name="set&#39;vc.23" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.23.0" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="1.277294" steps="1376932"/></proof>
   </goal>
   <goal name="set&#39;vc.23.1" expl="type invariant" proved="true">
   <proof prover="0" timelimit="30"><result status="valid" time="2.020044" steps="1731596"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.365383" steps="32613"/></proof>
  </goal>
  <goal name="set&#39;vc.25" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.25.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.796039" steps="50706"/></proof>
   </goal>
   <goal name="set&#39;vc.25.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.25.1.0" expl="postcondition" proved="true">
    <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="2.199498" steps="120635"/></proof>
    </goal>
    <goal name="set&#39;vc.25.1.1" expl="postcondition" proved="true">
    <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="1.713990" steps="106664"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="0" memlimit="1000"><result status="valid" time="0.755968" steps="956719"/></proof>
  </goal>
  <goal name="set&#39;vc.27" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.096607" steps="29"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Create" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.271191" steps="1108"/></proof>
 </goal>
</theory>
<theory name="SparseArray_F" proved="true">
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <proof prover="0" memlimit="1000"><result status="valid" time="0.817294" steps="1199816"/></proof>
 </goal>
</theory>
</file>
</why3session>
