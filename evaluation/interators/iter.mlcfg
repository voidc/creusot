
module Iter_Fib_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.Ghost
  type t_fib  =
    | C_Fib uint32 uint32 (Ghost.ghost_ty uint32)
    
  let function fib_x (self : t_fib) : Ghost.ghost_ty uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Fib _ _ a -> a
      end
  let function fib_a (self : t_fib) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Fib a _ _ -> a
      end
  let function fib_b (self : t_fib) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Fib _ a _ -> a
      end
end
module Iter_Impl0_Invariant_Stub
  use Iter_Fib_Type as Iter_Fib_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 25 4 25 30] (self : Iter_Fib_Type.t_fib)
    
end
module Iter_Impl0_Invariant_Interface
  use Iter_Fib_Type as Iter_Fib_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 25 4 25 30] (self : Iter_Fib_Type.t_fib)
    
  val invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 25 4 25 30] (self : Iter_Fib_Type.t_fib) : bool
    ensures { result = invariant' self }
    
end
module Iter_Impl0_Invariant
  use prelude.Ghost
  use prelude.UInt32
  use prelude.Int
  use Iter_Fib_Type as Iter_Fib_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 25 4 25 30] (self : Iter_Fib_Type.t_fib)
    
   =
    [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 26 20 26 56] UInt32.to_int (Ghost.inner (Iter_Fib_Type.fib_x self)) + UInt32.to_int (Iter_Fib_Type.fib_a self) = UInt32.to_int (Iter_Fib_Type.fib_b self)
  val invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 25 4 25 30] (self : Iter_Fib_Type.t_fib) : bool
    ensures { result = invariant' self }
    
end
module Iter_Impl1_Produces_Stub
  use prelude.Int
  use prelude.UInt32
  use Iter_Fib_Type as Iter_Fib_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 33 4 33 50] (self : Iter_Fib_Type.t_fib) (x : uint32) (other : Iter_Fib_Type.t_fib)
    
end
module Iter_Impl1_Produces_Interface
  use prelude.Int
  use prelude.UInt32
  use Iter_Fib_Type as Iter_Fib_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 33 4 33 50] (self : Iter_Fib_Type.t_fib) (x : uint32) (other : Iter_Fib_Type.t_fib)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 33 4 33 50] (self : Iter_Fib_Type.t_fib) (x : uint32) (other : Iter_Fib_Type.t_fib) : bool
    ensures { result = produces self x other }
    
end
module Iter_Impl1_Produces
  use prelude.Int
  use prelude.UInt32
  use Iter_Fib_Type as Iter_Fib_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 33 4 33 50] (self : Iter_Fib_Type.t_fib) (x : uint32) (other : Iter_Fib_Type.t_fib)
    
   =
    [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 34 8 34 70] x = Iter_Fib_Type.fib_b self /\ Iter_Fib_Type.fib_a other = Iter_Fib_Type.fib_b self /\ Iter_Fib_Type.fib_b other = Iter_Fib_Type.fib_a self + Iter_Fib_Type.fib_b self
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 33 4 33 50] (self : Iter_Fib_Type.t_fib) (x : uint32) (other : Iter_Fib_Type.t_fib) : bool
    ensures { result = produces self x other }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Inv1.inv ( * self) /\ Inv1.inv ( ^ self))
end
module Iter_Fib_Type_Inv
  use Iter_Fib_Type as Iter_Fib_Type
  clone Iter_Impl0_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Iter_Fib_Type.t_fib
  axiom inv_t_fib [@rewrite] : forall self : Iter_Fib_Type.t_fib . Inv0.inv self = Invariant0.invariant' self
end
module Iter_Impl1_Next_Interface
  use prelude.Borrow
  use prelude.UInt32
  use prelude.Int
  use Iter_Fib_Type as Iter_Fib_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Iter_Fib_Type.t_fib
  clone Iter_Impl1_Produces_Stub as Produces0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Iter_Fib_Type.t_fib)
  val next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 39 4 39 29] (self : borrowed (Iter_Fib_Type.t_fib)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 39 17 39 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 37 14 37 42] Produces0.produces ( * self) result ( ^ self) }
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 38 4 38 137] UInt32.to_int result > 1 -> (exists f2 : Iter_Fib_Type.t_fib . exists x : uint32 . exists f1 : Iter_Fib_Type.t_fib . Inv1.inv f2 /\ Inv1.inv f1 /\ Produces0.produces f1 x f2 /\ Produces0.produces f2 (Iter_Fib_Type.fib_a ( * self)) ( * self) /\ x + Iter_Fib_Type.fib_a ( * self) = result) }
    
end
module Iter_Impl1_Next
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.UInt32
  use Iter_Fib_Type as Iter_Fib_Type
  clone Iter_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Iter_Fib_Type.t_fib
  clone Iter_Fib_Type_Inv as Iter_Fib_Type_Inv0 with
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (Iter_Fib_Type.t_fib)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Iter_Fib_Type.t_fib,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Iter_Impl1_Produces as Produces0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Iter_Fib_Type.t_fib
  let rec cfg next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 39 4 39 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Iter_Fib_Type.t_fib)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 39 17 39 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 37 14 37 42] Produces0.produces ( * self) result ( ^ self) }
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 38 4 38 137] UInt32.to_int result > 1 -> (exists f2 : Iter_Fib_Type.t_fib . exists x : uint32 . exists f1 : Iter_Fib_Type.t_fib . Inv1.inv f2 /\ Inv1.inv f1 /\ Produces0.produces f1 x f2 /\ Produces0.produces f2 (Iter_Fib_Type.fib_a ( * self)) ( * self) /\ x + Iter_Fib_Type.fib_a ( * self) = result) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : borrowed (Iter_Fib_Type.t_fib) = self;
  var _4 : Ghost.ghost_ty uint32;
  var next : uint32;
  {
    goto BB0
  }
  BB0 {
    _4 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 40 17 40 31] Ghost.new (Iter_Fib_Type.fib_a ( * self)));
    goto BB1
  }
  BB1 {
    self <- { self with current = (let Iter_Fib_Type.C_Fib a b c =  * self in Iter_Fib_Type.C_Fib a b _4) };
    _4 <- any Ghost.ghost_ty uint32;
    next <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 41 19 41 34] Iter_Fib_Type.fib_a ( * self) + Iter_Fib_Type.fib_b ( * self));
    self <- { self with current = (let Iter_Fib_Type.C_Fib a b c =  * self in Iter_Fib_Type.C_Fib (Iter_Fib_Type.fib_b ( * self)) b c) };
    self <- { self with current = (let Iter_Fib_Type.C_Fib a b c =  * self in Iter_Fib_Type.C_Fib a next c) };
    _0 <- Iter_Fib_Type.fib_a ( * self);
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    return _0
  }
  
end
module Iter_SkipZeros_Type
  type t_skipzeros 'i =
    | C_SkipZeros 'i
    
  let function skipzeros_inner (self : t_skipzeros 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_SkipZeros a -> a
      end
end
module Iter_Iter_Produces_Stub
  type self
  use prelude.Int
  use prelude.UInt32
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 10 4 10 51] (self : self) (x : uint32) (other : self)
    
end
module Iter_Iter_Produces_Interface
  type self
  use prelude.Int
  use prelude.UInt32
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 10 4 10 51] (self : self) (x : uint32) (other : self)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 10 4 10 51] (self : self) (x : uint32) (other : self) : bool
    ensures { result = produces self x other }
    
end
module Iter_Iter_Produces
  type self
  use prelude.Int
  use prelude.UInt32
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 10 4 10 51] (self : self) (x : uint32) (other : self)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 10 4 10 51] (self : self) (x : uint32) (other : self) : bool
    ensures { result = produces self x other }
    
end
module Iter_Impl2_Produces_Stub
  type i
  use prelude.Int
  use prelude.UInt32
  use Iter_SkipZeros_Type as Iter_SkipZeros_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 55 4 55 50] (self : Iter_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : Iter_SkipZeros_Type.t_skipzeros i)
    
end
module Iter_Impl2_Produces_Interface
  type i
  use prelude.Int
  use prelude.UInt32
  use Iter_SkipZeros_Type as Iter_SkipZeros_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 55 4 55 50] (self : Iter_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : Iter_SkipZeros_Type.t_skipzeros i)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 55 4 55 50] (self : Iter_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : Iter_SkipZeros_Type.t_skipzeros i) : bool
    ensures { result = produces self x other }
    
end
module Iter_Impl2_Produces
  type i
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq i
  clone Iter_Iter_Produces_Stub as Produces0 with
    type self = i
  use Iter_SkipZeros_Type as Iter_SkipZeros_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 55 4 55 50] (self : Iter_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : Iter_SkipZeros_Type.t_skipzeros i)
    
   =
    [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 57 12 60 54] UInt32.to_int x <> 0 /\ (Produces0.produces (Iter_SkipZeros_Type.skipzeros_inner self) x (Iter_SkipZeros_Type.skipzeros_inner other) \/ (exists s : Seq.seq i . Inv0.inv s /\ Seq.length s > 0 /\ Produces0.produces (Iter_SkipZeros_Type.skipzeros_inner self) (0 : uint32) (Seq.get s 0) /\ (forall i : int . 0 < i /\ i < Seq.length s -> Produces0.produces (Seq.get s (i - 1)) (0 : uint32) (Seq.get s i)) /\ Produces0.produces (Seq.get s (Seq.length s - 1)) x (Iter_SkipZeros_Type.skipzeros_inner other)))
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 55 4 55 50] (self : Iter_SkipZeros_Type.t_skipzeros i) (x : uint32) (other : Iter_SkipZeros_Type.t_skipzeros i) : bool
    ensures { result = produces self x other }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Iter_Iter_Next_Interface
  type self
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone Iter_Iter_Produces_Stub as Produces0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 13 4 13 30] (self : borrowed self) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 13 17 13 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 12 14 12 42] Produces0.produces ( * self) result ( ^ self) }
    
end
module Iter_Impl2_Next_Interface
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Iter_SkipZeros_Type as Iter_SkipZeros_Type
  clone Iter_Impl2_Produces_Stub as Produces0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Iter_SkipZeros_Type.t_skipzeros i)
  val next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 65 4 65 29] (self : borrowed (Iter_SkipZeros_Type.t_skipzeros i)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 65 17 65 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 64 14 64 42] Produces0.produces ( * self) result ( ^ self) }
    
end
module Iter_Impl2_Next
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq i
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Iter_SkipZeros_Type as Iter_SkipZeros_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Iter_SkipZeros_Type.t_skipzeros i)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed (Iter_SkipZeros_Type.t_skipzeros i),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Iter_Iter_Produces_Interface as Produces1 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Iter_Impl2_Produces as Produces0 with
    type i = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Iter_SkipZeros_Type.t_skipzeros i
  clone Iter_Iter_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces
  let rec cfg next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 65 4 65 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Iter_SkipZeros_Type.t_skipzeros i)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 65 17 65 21] Inv1.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 64 14 64 42] Produces0.produces ( * self) result ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : borrowed (Iter_SkipZeros_Type.t_skipzeros i) = self;
  var next : uint32;
  var _4 : borrowed i;
  var _9 : uint32;
  var _10 : borrowed i;
  {
    goto BB0
  }
  BB0 {
    _4 <- Borrow.borrow_mut (Iter_SkipZeros_Type.skipzeros_inner ( * self));
    self <- { self with current = (let Iter_SkipZeros_Type.C_SkipZeros a =  * self in Iter_SkipZeros_Type.C_SkipZeros ( ^ _4)) };
    assume { Inv0.inv ( ^ _4) };
    next <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 66 23 66 40] Next0.next _4);
    _4 <- any borrowed i;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    switch ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 67 14 67 23] next = ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 67 22 67 23] (0 : uint32)))
      | False -> goto BB6
      | True -> goto BB4
      end
  }
  BB4 {
    _10 <- Borrow.borrow_mut (Iter_SkipZeros_Type.skipzeros_inner ( * self));
    self <- { self with current = (let Iter_SkipZeros_Type.C_SkipZeros a =  * self in Iter_SkipZeros_Type.C_SkipZeros ( ^ _10)) };
    assume { Inv0.inv ( ^ _10) };
    _9 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 68 19 68 36] Next0.next _10);
    _10 <- any borrowed i;
    goto BB5
  }
  BB5 {
    next <- _9;
    _9 <- any uint32;
    goto BB2
  }
  BB6 {
    assert { [@expl:type invariant] Inv1.inv self };
    assume { Resolve0.resolve self };
    _0 <- next;
    return _0
  }
  
end
module Iter_Hist_Type
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  type t_hist 'i =
    | C_Hist 'i (Ghost.ghost_ty (Seq.seq ('i, uint32)))
    
  let function hist_inner (self : t_hist 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Hist a _ -> a
      end
  let function hist_hist (self : t_hist 'i) : Ghost.ghost_ty (Seq.seq ('i, uint32)) = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Hist _ a -> a
      end
end
module Iter_Impl3_Produces_Stub
  type i
  use prelude.Int
  use prelude.UInt32
  use Iter_Hist_Type as Iter_Hist_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 82 4 82 50] (self : Iter_Hist_Type.t_hist i) (x : uint32) (other : Iter_Hist_Type.t_hist i)
    
end
module Iter_Impl3_Produces_Interface
  type i
  use prelude.Int
  use prelude.UInt32
  use Iter_Hist_Type as Iter_Hist_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 82 4 82 50] (self : Iter_Hist_Type.t_hist i) (x : uint32) (other : Iter_Hist_Type.t_hist i)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 82 4 82 50] (self : Iter_Hist_Type.t_hist i) (x : uint32) (other : Iter_Hist_Type.t_hist i) : bool
    ensures { result = produces self x other }
    
end
module Iter_Impl3_Produces
  type i
  use prelude.Int
  use prelude.UInt32
  clone Iter_Iter_Produces_Stub as Produces0 with
    type self = i
  use Iter_Hist_Type as Iter_Hist_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 82 4 82 50] (self : Iter_Hist_Type.t_hist i) (x : uint32) (other : Iter_Hist_Type.t_hist i)
    
   =
    [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 80 4 80 16] Produces0.produces (Iter_Hist_Type.hist_inner self) x (Iter_Hist_Type.hist_inner other)
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 82 4 82 50] (self : Iter_Hist_Type.t_hist i) (x : uint32) (other : Iter_Hist_Type.t_hist i) : bool
    ensures { result = produces self x other }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Stub
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Interface
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/logic/ops.rs" 85 8 85 33] Seq.get (Ghost.inner self) ix
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Iter_Impl4_Invariant_Stub
  type i
  use Iter_Hist_Type as Iter_Hist_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 98 4 98 30] (self : Iter_Hist_Type.t_hist i)
    
end
module Iter_Impl4_Invariant_Interface
  type i
  use Iter_Hist_Type as Iter_Hist_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 98 4 98 30] (self : Iter_Hist_Type.t_hist i)
    
  val invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 98 4 98 30] (self : Iter_Hist_Type.t_hist i) : bool
    ensures { result = invariant' self }
    
end
module Iter_Impl4_Invariant
  type i
  use prelude.Int
  use prelude.Ghost
  use seq.Seq
  use prelude.UInt32
  clone Iter_Iter_Produces_Stub as Produces0 with
    type self = i
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic_Stub as IndexLogic0 with
    type t = (i, uint32)
  use Iter_Hist_Type as Iter_Hist_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 98 4 98 30] (self : Iter_Hist_Type.t_hist i)
    
   =
    [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 99 8 102 9] (forall i : int . 0 < i /\ i < Seq.length (Ghost.inner (Iter_Hist_Type.hist_hist self)) -> Produces0.produces (let (a, _) = IndexLogic0.index_logic (Iter_Hist_Type.hist_hist self) (i - 1) in a) (let (_, a) = IndexLogic0.index_logic (Iter_Hist_Type.hist_hist self) (i - 1) in a) (let (a, _) = IndexLogic0.index_logic (Iter_Hist_Type.hist_hist self) i in a)) /\ Produces0.produces (let (a, _) = IndexLogic0.index_logic (Iter_Hist_Type.hist_hist self) (Seq.length (Ghost.inner (Iter_Hist_Type.hist_hist self)) - 1) in a) (let (_, a) = IndexLogic0.index_logic (Iter_Hist_Type.hist_hist self) (Seq.length (Ghost.inner (Iter_Hist_Type.hist_hist self)) - 1) in a) (Iter_Hist_Type.hist_inner self)
  val invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 98 4 98 30] (self : Iter_Hist_Type.t_hist i) : bool
    ensures { result = invariant' self }
    
end
module Iter_Hist_Type_Inv
  type i
  use prelude.Ghost
  use prelude.Seq
  use prelude.Int
  use Iter_Hist_Type as Iter_Hist_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone Iter_Impl4_Invariant_Stub as Invariant0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Iter_Hist_Type.t_hist i
  axiom inv_t_hist [@rewrite] : forall self : Iter_Hist_Type.t_hist i . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (Iter_Hist_Type.hist_inner self) /\ (forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner (Iter_Hist_Type.hist_hist self)) -> (let (a_0, a_1) = Seq.get (Ghost.inner (Iter_Hist_Type.hist_hist self)) i in Inv1.inv a_0)))
end
module Iter_Impl3_Next_Interface
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Iter_Hist_Type as Iter_Hist_Type
  clone Iter_Impl3_Produces_Stub as Produces0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Iter_Hist_Type.t_hist i)
  val next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 87 4 87 29] (self : borrowed (Iter_Hist_Type.t_hist i)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 87 17 87 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 86 14 86 42] Produces0.produces ( * self) result ( ^ self) }
    
end
module Iter_Impl3_Next
  type i
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = (i, uint32)
  clone Iter_Iter_Produces_Interface as Produces1 with
    type self = i
  use Iter_Hist_Type as Iter_Hist_Type
  clone Iter_Impl4_Invariant as Invariant0 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Iter_Hist_Type.t_hist i
  clone Iter_Hist_Type_Inv as Iter_Hist_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (Iter_Hist_Type.t_hist i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Iter_Hist_Type.t_hist i,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv5.inv,
    axiom .
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Ghost.ghost_ty (Seq.seq (i, uint32))
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Ghost.ghost_ty (Seq.seq (i, uint32)),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Iter_Impl3_Produces as Produces0 with
    type i = i,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Iter_Hist_Type.t_hist i
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty (Seq.seq (i, uint32))
  clone Iter_Iter_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty i
  let rec cfg next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 87 4 87 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Iter_Hist_Type.t_hist i)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 87 17 87 21] Inv3.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 86 14 86 42] Produces0.produces ( * self) result ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : borrowed (Iter_Hist_Type.t_hist i) = self;
  var old' : Ghost.ghost_ty i;
  var x : uint32;
  var _6 : borrowed i;
  var _7 : Ghost.ghost_ty (Seq.seq (i, uint32));
  {
    goto BB0
  }
  BB0 {
    old' <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 88 18 88 36] Ghost.new (Iter_Hist_Type.hist_inner ( * self)));
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv old' };
    assume { Resolve0.resolve old' };
    _6 <- Borrow.borrow_mut (Iter_Hist_Type.hist_inner ( * self));
    self <- { self with current = (let Iter_Hist_Type.C_Hist a b =  * self in Iter_Hist_Type.C_Hist ( ^ _6) b) };
    assume { Inv1.inv ( ^ _6) };
    x <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 89 16 89 33] Next0.next _6);
    _6 <- any borrowed i;
    goto BB2
  }
  BB2 {
    _7 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 90 20 90 53] Ghost.new (Seq.snoc (Ghost.inner (Iter_Hist_Type.hist_hist ( * self))) (Ghost.inner old', x)));
    goto BB3
  }
  BB3 {
    self <- { self with current = (let Iter_Hist_Type.C_Hist a b =  * self in Iter_Hist_Type.C_Hist a _7) };
    _7 <- any Ghost.ghost_ty (Seq.seq (i, uint32));
    assert { [@expl:type invariant] Inv2.inv (Iter_Hist_Type.hist_hist ( * self)) };
    assume { Resolve1.resolve (Iter_Hist_Type.hist_hist ( * self)) };
    assert { [@expl:type invariant] Inv3.inv self };
    assume { Resolve2.resolve self };
    _0 <- x;
    return _0
  }
  
end
module Iter_SkipZerosHist_Type
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  type t_skipzeroshist 'i =
    | C_SkipZerosHist 'i (Ghost.ghost_ty (Seq.seq ('i, uint32)))
    
  let function skipzeroshist_inner (self : t_skipzeroshist 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_SkipZerosHist a _ -> a
      end
  let function skipzeroshist_hist (self : t_skipzeroshist 'i) : Ghost.ghost_ty (Seq.seq ('i, uint32))
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_SkipZerosHist _ a -> a
      end
end
module Iter_Impl7_Invariant_Stub
  type i
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 156 4 156 30] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i)
    
end
module Iter_Impl7_Invariant_Interface
  type i
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 156 4 156 30] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i)
    
  val invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 156 4 156 30] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i) : bool
    ensures { result = invariant' self }
    
end
module Iter_Impl7_Invariant
  type i
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  clone Iter_Iter_Produces_Stub as Produces0 with
    type self = i
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic_Stub as IndexLogic0 with
    type t = (i, uint32)
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  predicate invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 156 4 156 30] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i)
    
   =
    [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 157 8 161 9] Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist self)) > 0 -> (forall i : int . 0 < i /\ i < Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist self)) -> Produces0.produces (let (a, _) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist self) (i - 1) in a) (let (_, a) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist self) (i - 1) in a) (let (a, _) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist self) i in a)) /\ Produces0.produces (let (a, _) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist self) (Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist self)) - 1) in a) (let (_, a) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist self) (Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist self)) - 1) in a) (Iter_SkipZerosHist_Type.skipzeroshist_inner self)
  val invariant' [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 156 4 156 30] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i) : bool
    ensures { result = invariant' self }
    
end
module Iter_SkipZerosHist_Type_Inv
  type i
  use prelude.Ghost
  use prelude.Seq
  use prelude.Int
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone Iter_Impl7_Invariant_Stub as Invariant0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i
  axiom inv_t_skipzeroshist [@rewrite] : forall self : Iter_SkipZerosHist_Type.t_skipzeroshist i . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (Iter_SkipZerosHist_Type.skipzeroshist_inner self) /\ (forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist self)) -> (let (a_0, a_1) = Seq.get (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist self)) i in Inv1.inv a_0)))
end
module Iter_Impl5_New_Interface
  type i
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  val new [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 112 4 112 32] (inner : i) : Iter_SkipZerosHist_Type.t_skipzeroshist i
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 112 15 112 20] Inv0.inv inner}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 112 28 112 32] Inv1.inv result }
    
end
module Iter_Impl5_New
  type i
  use seq.Seq
  use prelude.Ghost
  use prelude.Int
  use prelude.UInt32
  clone Iter_Iter_Produces_Interface as Produces0 with
    type self = i
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = (i, uint32)
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  clone Iter_Impl7_Invariant as Invariant0 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i
  clone Iter_SkipZerosHist_Type_Inv as Iter_SkipZerosHist_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec cfg new [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 112 4 112 32] [@cfg:stackify] [@cfg:subregion_analysis] (inner : i) : Iter_SkipZerosHist_Type.t_skipzeroshist i
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 112 15 112 20] Inv0.inv inner}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 112 28 112 32] Inv1.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Iter_SkipZerosHist_Type.t_skipzeroshist i;
  var inner : i = inner;
  var _3 : Ghost.ghost_ty (Seq.seq (i, uint32));
  {
    goto BB0
  }
  BB0 {
    _3 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 115 18 115 36] Ghost.new (Seq.empty ));
    goto BB1
  }
  BB1 {
    _0 <- Iter_SkipZerosHist_Type.C_SkipZerosHist inner _3;
    inner <- any i;
    _3 <- any Ghost.ghost_ty (Seq.seq (i, uint32));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Iter_Impl6_Produces_Stub
  type i
  use prelude.Int
  use prelude.UInt32
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 123 4 123 50] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i) (x : uint32) (other : Iter_SkipZerosHist_Type.t_skipzeroshist i)
    
end
module Iter_Impl6_Produces_Interface
  type i
  use prelude.Int
  use prelude.UInt32
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 123 4 123 50] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i) (x : uint32) (other : Iter_SkipZerosHist_Type.t_skipzeroshist i)
    
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 123 4 123 50] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i) (x : uint32) (other : Iter_SkipZerosHist_Type.t_skipzeroshist i) : bool
    ensures { result = produces self x other }
    
end
module Iter_Impl6_Produces
  type i
  use prelude.Int
  use prelude.UInt32
  use prelude.Ghost
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic_Stub as IndexLogic0 with
    type t = (i, uint32)
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  predicate produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 123 4 123 50] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i) (x : uint32) (other : Iter_SkipZerosHist_Type.t_skipzeroshist i)
    
   =
    [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 125 12 130 13] UInt32.to_int x <> 0 /\ Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist other)) > 0 /\ Iter_SkipZerosHist_Type.skipzeroshist_inner self = (let (a, _) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist other) 0 in a) /\ (forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist other)) - 1 -> (let (_, a) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist other) i in a) = (0 : uint32)) /\ (let (_, a) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist other) (Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist other)) - 1) in a) = x
  val produces [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 123 4 123 50] (self : Iter_SkipZerosHist_Type.t_skipzeroshist i) (x : uint32) (other : Iter_SkipZerosHist_Type.t_skipzeroshist i) : bool
    ensures { result = produces self x other }
    
end
module Iter_Impl6_Next_Interface
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  clone Iter_Impl6_Produces_Stub as Produces0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i)
  val next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 135 4 135 29] (self : borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 135 17 135 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 134 14 134 42] Produces0.produces ( * self) result ( ^ self) }
    
end
module Iter_Impl6_Next
  type i
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.UInt32
  clone Iter_Iter_Produces_Interface as Produces1 with
    type self = i
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = (i, uint32)
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  clone Iter_Impl7_Invariant as Invariant0 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i
  clone Iter_SkipZerosHist_Type_Inv as Iter_SkipZerosHist_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Iter_Impl6_Produces as Produces0 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i
  clone Iter_Iter_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty i
  let rec cfg next [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 135 4 135 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i)) : uint32
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 135 17 135 21] Inv2.inv self}
    ensures { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 134 14 134 42] Produces0.produces ( * self) result ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i) = self;
  var old' : Ghost.ghost_ty i;
  var next : uint32;
  var _6 : borrowed i;
  var _7 : Ghost.ghost_ty (Seq.seq (i, uint32));
  var prev : Ghost.ghost_ty i;
  var _19 : uint32;
  var _20 : borrowed i;
  var _21 : Ghost.ghost_ty (Seq.seq (i, uint32));
  {
    goto BB0
  }
  BB0 {
    old' <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 136 18 136 36] Ghost.new (Iter_SkipZerosHist_Type.skipzeroshist_inner ( * self)));
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv old' };
    assume { Resolve0.resolve old' };
    _6 <- Borrow.borrow_mut (Iter_SkipZerosHist_Type.skipzeroshist_inner ( * self));
    self <- { self with current = (let Iter_SkipZerosHist_Type.C_SkipZerosHist a b =  * self in Iter_SkipZerosHist_Type.C_SkipZerosHist ( ^ _6) b) };
    assume { Inv1.inv ( ^ _6) };
    next <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 137 23 137 40] Next0.next _6);
    _6 <- any borrowed i;
    goto BB2
  }
  BB2 {
    _7 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 138 20 138 56] Ghost.new (Seq.singleton (Ghost.inner old', next)));
    goto BB3
  }
  BB3 {
    self <- { self with current = (let Iter_SkipZerosHist_Type.C_SkipZerosHist a b =  * self in Iter_SkipZerosHist_Type.C_SkipZerosHist a _7) };
    _7 <- any Ghost.ghost_ty (Seq.seq (i, uint32));
    goto BB4
  }
  BB4 {
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 140 20 140 29] Inv2.inv self };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 141 20 141 65] Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist ( * self))) > 0 /\ (let (a, _) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist ( * self)) 0 in a) = Ghost.inner old' };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 140 8 140 31] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist ( * self))) - 1 -> (let (_, a) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist ( * self)) i in a) = (0 : uint32) };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 143 20 143 58] (let (_, a) = IndexLogic0.index_logic (Iter_SkipZerosHist_Type.skipzeroshist_hist ( * self)) (Seq.length (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist ( * self))) - 1) in a) = next };
    goto BB5
  }
  BB5 {
    switch ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 144 14 144 23] next = ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 144 22 144 23] (0 : uint32)))
      | False -> goto BB10
      | True -> goto BB6
      end
  }
  BB6 {
    prev <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 145 23 145 41] Ghost.new (Iter_SkipZerosHist_Type.skipzeroshist_inner ( * self)));
    goto BB7
  }
  BB7 {
    assert { [@expl:type invariant] Inv0.inv prev };
    assume { Resolve0.resolve prev };
    _20 <- Borrow.borrow_mut (Iter_SkipZerosHist_Type.skipzeroshist_inner ( * self));
    self <- { self with current = (let Iter_SkipZerosHist_Type.C_SkipZerosHist a b =  * self in Iter_SkipZerosHist_Type.C_SkipZerosHist ( ^ _20) b) };
    assume { Inv1.inv ( ^ _20) };
    _19 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 146 19 146 36] Next0.next _20);
    _20 <- any borrowed i;
    goto BB8
  }
  BB8 {
    next <- _19;
    _19 <- any uint32;
    _21 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 147 24 147 61] Ghost.new (Seq.snoc (Ghost.inner (Iter_SkipZerosHist_Type.skipzeroshist_hist ( * self))) (Ghost.inner prev, next)));
    goto BB9
  }
  BB9 {
    self <- { self with current = (let Iter_SkipZerosHist_Type.C_SkipZerosHist a b =  * self in Iter_SkipZerosHist_Type.C_SkipZerosHist a _21) };
    _21 <- any Ghost.ghost_ty (Seq.seq (i, uint32));
    goto BB4
  }
  BB10 {
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    _0 <- next;
    return _0
  }
  
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 21 8 27 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs" 49 8 49 27] (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/logic/ops.rs" 19 8 19 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val clone' (self : self) : self
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/clone.rs" 120 14 120 18] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/clone.rs" 120 4 120 28] Inv1.inv result }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  val new (_1 : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 68 26 68 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    ensures { [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 420 4 420 30] Inv0.inv result }
    
end
module CreusotContracts_Ghost_Ghost_Type_Inv
  type t
  use prelude.Ghost
  use prelude.Ghost
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Ghost.ghost_ty t
  axiom inv_t_ghost [@rewrite] : forall self : Ghost.ghost_ty t . Inv0.inv self = Inv1.inv (Ghost.inner self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 63 20 63 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 17 281 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 4 281 27] Inv0.inv result }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range a)
  val next (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/range.rs" 711 17 711 21] Inv0.inv self}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/range.rs" 711 4 711 35] Inv1.inv result }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1824 21 1824 25] Inv0.inv self}
    requires {[#"/home/dominik/.rustup/toolchains/nightly-2023-06-29-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1824 27 1824 32] Inv1.inv value}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/vec.rs" 78 26 78 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  predicate into_iter_pre (self : i) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 30 4 30 10] ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 33 21 33 22] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 32 14 32 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq idx
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 35 4 35 10] ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc}
    requires {[#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c}
    ensures { [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 22 40 23] Inv0.inv a) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 31 40 33] Inv1.inv ab) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 52 40 53] Inv0.inv b) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 61 40 63] Inv1.inv bc) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 40 82 40 83] Inv0.inv c) -> ([#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/std/iter/range.rs" 14 12 14 78] Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"/mnt/data/projects/creusot/creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Seq_Seq_Type_Inv
  type t
  use prelude.Seq
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  axiom inv_t_seq [@rewrite] : forall self : Seq.seq t . Inv0.inv self = (forall i : int . 0 <= i /\ i < Seq.length self -> Inv1.inv (Seq.get self i))
end
module Iter_Client_Interface
  type i
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  val client [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 165 0 165 48] (i : i) (max : usize) : ()
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 165 31 165 32] Inv0.inv i}
    
end
module Iter_Client
  type i
  use seq.Seq
  use prelude.Ghost
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.UInt32
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = Seq.seq usize
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv14.inv,
    axiom .
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Seq.seq (Iter_SkipZerosHist_Type.t_skipzeroshist i)
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i,
    predicate Inv0.inv = Inv13.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = borrowed i
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = borrowed i,
    predicate Inv0.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = uint32
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = uint32,
    predicate Inv0.inv = Inv11.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i,
    predicate Inv0.inv = Inv9.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Core_Option_Option_Type.t_option usize
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Core_Option_Option_Type.t_option usize,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = borrowed (Core_Ops_Range_Range_Type.t_range usize),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone Iter_Iter_Produces_Interface as Produces2 with
    type self = i
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic2 with
    type t = (i, uint32)
  clone Iter_Impl7_Invariant as Invariant0 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Produces0.produces = Produces2.produces
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq uint32
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Seq.seq uint32,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = i,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = i,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve5 with
    type t = uint32
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use prelude.Int
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve1.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Iter_SkipZerosHist_Type_Inv as Iter_SkipZerosHist_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface as ProducesTrans0 with
    type idx = usize,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv14.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface as ProducesRefl0 with
    type idx = usize,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Core_Ops_Range_Range_Type.t_range usize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty (Seq.seq (Iter_SkipZerosHist_Type.t_skipzeroshist i))
  clone CreusotContracts_Ghost_Ghost_Type_Inv as CreusotContracts_Ghost_Ghost_Type_Inv0 with
    type t = Seq.seq (Iter_SkipZerosHist_Type.t_skipzeroshist i),
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv13.inv,
    axiom .
  clone Iter_Iter_Next_Interface as Next2 with
    type self = i,
    predicate Inv0.inv = Inv12.inv,
    predicate Produces0.produces = Produces2.produces
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = i
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Iter_SkipZerosHist_Type.t_skipzeroshist i
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve2 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Resolve0.resolve = Resolve5.resolve,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv10.inv,
    predicate Inv1.inv = Inv11.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv2.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv3.inv = Inv6.inv
  clone Iter_Impl6_Produces as Produces1 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic2.index_logic
  clone Iter_Impl6_Next_Interface as Next1 with
    type i = i,
    predicate Inv0.inv = Inv9.inv,
    predicate Produces0.produces = Produces1.produces
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = usize,
    predicate Inv0.inv = Inv7.inv,
    type Item0.item = usize,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv8.inv
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv1.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (Seq.seq (Iter_SkipZerosHist_Type.t_skipzeroshist i))
  clone Alloc_Vec_Impl0_New_Interface as New1 with
    type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone Iter_Impl5_New_Interface as New0 with
    type i = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv2.inv
  clone Core_Clone_Clone_Clone_Interface as Clone0 with
    type self = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv3.inv
  let rec cfg client [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 165 0 165 48] [@cfg:stackify] [@cfg:subregion_analysis] (i : i) (max : usize) : ()
    requires {[#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 165 31 165 32] Inv3.inv i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var i : i = i;
  var max : usize = max;
  var i2 : Iter_SkipZerosHist_Type.t_skipzeroshist i;
  var _4 : i;
  var nz2 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var is : Ghost.ghost_ty (Seq.seq (Iter_SkipZerosHist_Type.t_skipzeroshist i));
  var iter : Core_Ops_Range_Range_Type.t_range usize;
  var iter_old : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var produced : Ghost.ghost_ty (Seq.seq usize);
  var _24 : ();
  var _25 : Core_Option_Option_Type.t_option usize;
  var _26 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _27 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var __creusot_proc_iter_elem : usize;
  var _30 : Ghost.ghost_ty (Seq.seq usize);
  var _32 : ();
  var _33 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _34 : uint32;
  var _35 : borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i);
  var _36 : Ghost.ghost_ty (Seq.seq (Iter_SkipZerosHist_Type.t_skipzeroshist i));
  var i1 : i;
  var nz1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var count : usize;
  var x : uint32;
  var _50 : borrowed i;
  var _53 : ();
  var _54 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    _4 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 166 36 166 45] Clone0.clone' i);
    goto BB1
  }
  BB1 {
    i2 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 166 17 166 46] New0.new _4);
    _4 <- any i;
    goto BB2
  }
  BB2 {
    nz2 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 167 18 167 28] New1.new ());
    goto BB3
  }
  BB3 {
    is <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 168 17 168 43] Ghost.new (Seq.singleton i2));
    goto BB4
  }
  BB4 {
    assert { [@expl:type invariant] Inv0.inv is };
    assume { Resolve0.resolve is };
    iter <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 4 170 25] IntoIter0.into_iter (Core_Ops_Range_Range_Type.C_Range ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 175 13 175 14] (0 : usize)) max));
    goto BB5
  }
  BB5 {
    iter_old <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 4 170 25] Ghost.new iter);
    goto BB6
  }
  BB6 {
    produced <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 4 170 25] Ghost.new (Seq.empty ));
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 4 170 25] Inv1.inv iter };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 4 170 25] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 16 170 23] Inv2.inv i2 };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 171 16 171 23] Inv0.inv is };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 172 16 172 44] Seq.length (ShallowModel0.shallow_model nz2) = Seq.length (Ghost.inner produced) };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 173 16 173 42] Seq.length (Ghost.inner is) = 1 + Seq.length (ShallowModel0.shallow_model nz2) };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 4 170 25] forall j : int . 0 < j /\ j < Seq.length (Ghost.inner is) -> Produces1.produces (IndexLogic0.index_logic is (j - 1)) (IndexLogic1.index_logic nz2 (j - 1)) (IndexLogic0.index_logic is j) };
    goto BB13
  }
  BB13 {
    _27 <- Borrow.borrow_mut iter;
    iter <-  ^ _27;
    _26 <- Borrow.borrow_mut ( * _27);
    _27 <- { _27 with current = ( ^ _26) };
    _25 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 4 170 25] Next0.next _26);
    _26 <- any borrowed (Core_Ops_Range_Range_Type.t_range usize);
    goto BB14
  }
  BB14 {
    assume { Resolve1.resolve _27 };
    switch (_25)
      | Core_Option_Option_Type.C_None -> goto BB15
      | Core_Option_Option_Type.C_Some _ -> goto BB16
      end
  }
  BB15 {
    assume { Resolve2.resolve nz2 };
    assert { [@expl:type invariant] Inv2.inv i2 };
    assume { Resolve3.resolve i2 };
    i1 <- i;
    i <- any i;
    nz1 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 181 18 181 28] New1.new ());
    goto BB23
  }
  BB16 {
    goto BB18
  }
  BB17 {
    assume { Resolve2.resolve nz2 };
    assert { [@expl:type invariant] Inv2.inv i2 };
    assume { Resolve3.resolve i2 };
    assert { [@expl:type invariant] Inv3.inv i };
    assume { Resolve4.resolve i };
    absurd
  }
  BB18 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _25;
    _30 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 170 4 170 25] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB19
  }
  BB19 {
    produced <- _30;
    _30 <- any Ghost.ghost_ty (Seq.seq usize);
    _33 <- Borrow.borrow_mut nz2;
    nz2 <-  ^ _33;
    _35 <- Borrow.borrow_mut i2;
    i2 <-  ^ _35;
    assume { Inv2.inv ( ^ _35) };
    _34 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 176 17 176 26] Next1.next _35);
    _35 <- any borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i);
    goto BB20
  }
  BB20 {
    _32 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 176 8 176 27] Push0.push _33 _34);
    _33 <- any borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
    _34 <- any uint32;
    goto BB21
  }
  BB21 {
    _36 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 177 13 177 32] Ghost.new (Seq.snoc (Ghost.inner is) i2));
    goto BB22
  }
  BB22 {
    is <- _36;
    _36 <- any Ghost.ghost_ty (Seq.seq (Iter_SkipZerosHist_Type.t_skipzeroshist i));
    assert { [@expl:type invariant] Inv0.inv is };
    assume { Resolve0.resolve is };
    _24 <- ();
    goto BB12
  }
  BB23 {
    count <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 182 20 182 21] (0 : usize));
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 183 16 183 36] Seq.length (ShallowModel0.shallow_model nz1) = UIntSize.to_int count };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 184 16 184 28] count <= max };
    invariant { [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 183 4 183 38] forall k : int . 0 <= k /\ k < UIntSize.to_int count -> IndexLogic1.index_logic nz1 k = IndexLogic1.index_logic nz2 k };
    goto BB27
  }
  BB27 {
    switch ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 186 10 186 21] count < max)
      | False -> goto BB34
      | True -> goto BB28
      end
  }
  BB28 {
    _50 <- Borrow.borrow_mut i1;
    i1 <-  ^ _50;
    assume { Inv3.inv ( ^ _50) };
    x <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 187 16 187 25] Next2.next _50);
    _50 <- any borrowed i;
    goto BB29
  }
  BB29 {
    switch ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 188 11 188 17] x <> ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 188 16 188 17] (0 : uint32)))
      | False -> goto BB32
      | True -> goto BB30
      end
  }
  BB30 {
    _54 <- Borrow.borrow_mut nz1;
    nz1 <-  ^ _54;
    _53 <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 189 12 189 23] Push0.push _54 x);
    _54 <- any borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
    goto BB31
  }
  BB31 {
    count <- ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 190 12 190 22] count + ([#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 190 21 190 22] (1 : usize)));
    _24 <- ();
    goto BB33
  }
  BB32 {
    _24 <- ();
    goto BB33
  }
  BB33 {
    goto BB26
  }
  BB34 {
    assume { Resolve2.resolve nz1 };
    assert { [@expl:type invariant] Inv3.inv i1 };
    assume { Resolve4.resolve i1 };
    assert { [@expl:assertion] [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 194 20 194 32] ShallowModel0.shallow_model nz1 = ShallowModel0.shallow_model nz2 };
    goto BB35
  }
  BB35 {
    _0 <- ();
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    goto BB40
  }
  BB40 {
    return _0
  }
  
end
module Iter_Impl0
  
end
module Iter_Impl4
  type i
end
module Iter_Impl7
  type i
end
module Iter_Impl1
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use Iter_Fib_Type as Iter_Fib_Type
  clone Iter_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Iter_Fib_Type.t_fib
  clone Iter_Fib_Type_Inv as Iter_Fib_Type_Inv0 with
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (Iter_Fib_Type.t_fib)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Iter_Fib_Type.t_fib,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Iter_Impl1_Produces as Produces0
  goal next_refn : [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 39 4 39 29] forall self : borrowed (Iter_Fib_Type.t_fib) . Inv0.inv self -> Inv0.inv self /\ (forall result : uint32 . (UInt32.to_int result > 1 -> (exists f2 : Iter_Fib_Type.t_fib . exists x : uint32 . exists f1 : Iter_Fib_Type.t_fib . Inv1.inv f2 /\ Inv1.inv f1 /\ Produces0.produces f1 x f2 /\ Produces0.produces f2 (Iter_Fib_Type.fib_a ( * self)) ( * self) /\ x + Iter_Fib_Type.fib_a ( * self) = result)) /\ Produces0.produces ( * self) result ( ^ self) -> Produces0.produces ( * self) result ( ^ self))
end
module Iter_Impl2
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq i
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Seq.seq i,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Iter_Iter_Produces_Interface as Produces1 with
    type self = i
  use Iter_SkipZeros_Type as Iter_SkipZeros_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (Iter_SkipZeros_Type.t_skipzeros i)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed (Iter_SkipZeros_Type.t_skipzeros i),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Iter_Impl2_Produces as Produces0 with
    type i = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv
  goal next_refn : [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 65 4 65 29] forall self : borrowed (Iter_SkipZeros_Type.t_skipzeros i) . Inv0.inv self -> Inv0.inv self /\ (forall result : uint32 . Produces0.produces ( * self) result ( ^ self) -> Produces0.produces ( * self) result ( ^ self))
end
module Iter_Impl3
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = (i, uint32)
  clone Iter_Iter_Produces_Interface as Produces1 with
    type self = i
  use Iter_Hist_Type as Iter_Hist_Type
  clone Iter_Impl4_Invariant as Invariant0 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Iter_Hist_Type.t_hist i
  clone Iter_Hist_Type_Inv as Iter_Hist_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (Iter_Hist_Type.t_hist i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Iter_Hist_Type.t_hist i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Iter_Impl3_Produces as Produces0 with
    type i = i,
    predicate Produces0.produces = Produces1.produces
  goal next_refn : [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 87 4 87 29] forall self : borrowed (Iter_Hist_Type.t_hist i) . Inv0.inv self -> Inv0.inv self /\ (forall result : uint32 . Produces0.produces ( * self) result ( ^ self) -> Produces0.produces ( * self) result ( ^ self))
end
module Iter_Impl6
  type i
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = i,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone Iter_Iter_Produces_Interface as Produces1 with
    type self = i
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = (i, uint32)
  use Iter_SkipZerosHist_Type as Iter_SkipZerosHist_Type
  clone Iter_Impl7_Invariant as Invariant0 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i
  clone Iter_SkipZerosHist_Type_Inv as Iter_SkipZerosHist_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Iter_SkipZerosHist_Type.t_skipzeroshist i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Iter_Impl6_Produces as Produces0 with
    type i = i,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  goal next_refn : [#"/mnt/data/projects/creusot/evaluation/interators/iter.rs" 135 4 135 29] forall self : borrowed (Iter_SkipZerosHist_Type.t_skipzeroshist i) . Inv0.inv self -> Inv0.inv self /\ (forall result : uint32 . Produces0.produces ( * self) result ( ^ self) -> Produces0.produces ( * self) result ( ^ self))
end
